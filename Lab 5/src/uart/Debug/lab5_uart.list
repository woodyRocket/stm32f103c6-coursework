
lab5_uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002540  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  0800264c  0800264c  0001264c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002674  08002674  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002674  08002674  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002674  08002674  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002674  08002674  00012674  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002678  08002678  00012678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800267c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000098  2000000c  08002688  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000a4  08002688  000200a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007028  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017f8  00000000  00000000  0002705d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007b0  00000000  00000000  00028858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000718  00000000  00000000  00029008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001651a  00000000  00000000  00029720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008814  00000000  00000000  0003fc3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080d5d  00000000  00000000  0004844e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c91ab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001dec  00000000  00000000  000c91fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002634 	.word	0x08002634

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002634 	.word	0x08002634

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fa38 	bl	80005c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f81a 	bl	800018c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f8d0 	bl	80002fc <MX_GPIO_Init>
  MX_ADC1_Init();
 800015c:	f000 f866 	bl	800022c <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000160:	f000 f8a2 	bl	80002a8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, &temp, 1);
 8000164:	2201      	movs	r2, #1
 8000166:	4906      	ldr	r1, [pc, #24]	; (8000180 <main+0x34>)
 8000168:	4806      	ldr	r0, [pc, #24]	; (8000184 <main+0x38>)
 800016a:	f001 fdde 	bl	8001d2a <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 800016e:	2120      	movs	r1, #32
 8000170:	4805      	ldr	r0, [pc, #20]	; (8000188 <main+0x3c>)
 8000172:	f001 f811 	bl	8001198 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8000176:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800017a:	f000 fa85 	bl	8000688 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 800017e:	e7f6      	b.n	800016e <main+0x22>
 8000180:	2000009c 	.word	0x2000009c
 8000184:	20000058 	.word	0x20000058
 8000188:	40010800 	.word	0x40010800

0800018c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800018c:	b580      	push	{r7, lr}
 800018e:	b094      	sub	sp, #80	; 0x50
 8000190:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000192:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000196:	2228      	movs	r2, #40	; 0x28
 8000198:	2100      	movs	r1, #0
 800019a:	4618      	mov	r0, r3
 800019c:	f002 fa42 	bl	8002624 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001a0:	f107 0314 	add.w	r3, r7, #20
 80001a4:	2200      	movs	r2, #0
 80001a6:	601a      	str	r2, [r3, #0]
 80001a8:	605a      	str	r2, [r3, #4]
 80001aa:	609a      	str	r2, [r3, #8]
 80001ac:	60da      	str	r2, [r3, #12]
 80001ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001b0:	1d3b      	adds	r3, r7, #4
 80001b2:	2200      	movs	r2, #0
 80001b4:	601a      	str	r2, [r3, #0]
 80001b6:	605a      	str	r2, [r3, #4]
 80001b8:	609a      	str	r2, [r3, #8]
 80001ba:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001bc:	2302      	movs	r3, #2
 80001be:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001c0:	2301      	movs	r3, #1
 80001c2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001c4:	2310      	movs	r3, #16
 80001c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001c8:	2300      	movs	r3, #0
 80001ca:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001d0:	4618      	mov	r0, r3
 80001d2:	f000 fffb 	bl	80011cc <HAL_RCC_OscConfig>
 80001d6:	4603      	mov	r3, r0
 80001d8:	2b00      	cmp	r3, #0
 80001da:	d001      	beq.n	80001e0 <SystemClock_Config+0x54>
  {
    Error_Handler();
 80001dc:	f000 f8de 	bl	800039c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001e0:	230f      	movs	r3, #15
 80001e2:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80001e4:	2300      	movs	r3, #0
 80001e6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001e8:	2300      	movs	r3, #0
 80001ea:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80001ec:	2300      	movs	r3, #0
 80001ee:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001f0:	2300      	movs	r3, #0
 80001f2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80001f4:	f107 0314 	add.w	r3, r7, #20
 80001f8:	2100      	movs	r1, #0
 80001fa:	4618      	mov	r0, r3
 80001fc:	f001 fa68 	bl	80016d0 <HAL_RCC_ClockConfig>
 8000200:	4603      	mov	r3, r0
 8000202:	2b00      	cmp	r3, #0
 8000204:	d001      	beq.n	800020a <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000206:	f000 f8c9 	bl	800039c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800020a:	2302      	movs	r3, #2
 800020c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800020e:	2300      	movs	r3, #0
 8000210:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000212:	1d3b      	adds	r3, r7, #4
 8000214:	4618      	mov	r0, r3
 8000216:	f001 fbf3 	bl	8001a00 <HAL_RCCEx_PeriphCLKConfig>
 800021a:	4603      	mov	r3, r0
 800021c:	2b00      	cmp	r3, #0
 800021e:	d001      	beq.n	8000224 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000220:	f000 f8bc 	bl	800039c <Error_Handler>
  }
}
 8000224:	bf00      	nop
 8000226:	3750      	adds	r7, #80	; 0x50
 8000228:	46bd      	mov	sp, r7
 800022a:	bd80      	pop	{r7, pc}

0800022c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b084      	sub	sp, #16
 8000230:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000232:	1d3b      	adds	r3, r7, #4
 8000234:	2200      	movs	r2, #0
 8000236:	601a      	str	r2, [r3, #0]
 8000238:	605a      	str	r2, [r3, #4]
 800023a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800023c:	4b18      	ldr	r3, [pc, #96]	; (80002a0 <MX_ADC1_Init+0x74>)
 800023e:	4a19      	ldr	r2, [pc, #100]	; (80002a4 <MX_ADC1_Init+0x78>)
 8000240:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000242:	4b17      	ldr	r3, [pc, #92]	; (80002a0 <MX_ADC1_Init+0x74>)
 8000244:	2200      	movs	r2, #0
 8000246:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000248:	4b15      	ldr	r3, [pc, #84]	; (80002a0 <MX_ADC1_Init+0x74>)
 800024a:	2201      	movs	r2, #1
 800024c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800024e:	4b14      	ldr	r3, [pc, #80]	; (80002a0 <MX_ADC1_Init+0x74>)
 8000250:	2200      	movs	r2, #0
 8000252:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000254:	4b12      	ldr	r3, [pc, #72]	; (80002a0 <MX_ADC1_Init+0x74>)
 8000256:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800025a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800025c:	4b10      	ldr	r3, [pc, #64]	; (80002a0 <MX_ADC1_Init+0x74>)
 800025e:	2200      	movs	r2, #0
 8000260:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000262:	4b0f      	ldr	r3, [pc, #60]	; (80002a0 <MX_ADC1_Init+0x74>)
 8000264:	2201      	movs	r2, #1
 8000266:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000268:	480d      	ldr	r0, [pc, #52]	; (80002a0 <MX_ADC1_Init+0x74>)
 800026a:	f000 fa31 	bl	80006d0 <HAL_ADC_Init>
 800026e:	4603      	mov	r3, r0
 8000270:	2b00      	cmp	r3, #0
 8000272:	d001      	beq.n	8000278 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000274:	f000 f892 	bl	800039c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000278:	2300      	movs	r3, #0
 800027a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800027c:	2301      	movs	r3, #1
 800027e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000280:	2300      	movs	r3, #0
 8000282:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000284:	1d3b      	adds	r3, r7, #4
 8000286:	4619      	mov	r1, r3
 8000288:	4805      	ldr	r0, [pc, #20]	; (80002a0 <MX_ADC1_Init+0x74>)
 800028a:	f000 faf9 	bl	8000880 <HAL_ADC_ConfigChannel>
 800028e:	4603      	mov	r3, r0
 8000290:	2b00      	cmp	r3, #0
 8000292:	d001      	beq.n	8000298 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000294:	f000 f882 	bl	800039c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000298:	bf00      	nop
 800029a:	3710      	adds	r7, #16
 800029c:	46bd      	mov	sp, r7
 800029e:	bd80      	pop	{r7, pc}
 80002a0:	20000028 	.word	0x20000028
 80002a4:	40012400 	.word	0x40012400

080002a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80002ac:	4b11      	ldr	r3, [pc, #68]	; (80002f4 <MX_USART2_UART_Init+0x4c>)
 80002ae:	4a12      	ldr	r2, [pc, #72]	; (80002f8 <MX_USART2_UART_Init+0x50>)
 80002b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80002b2:	4b10      	ldr	r3, [pc, #64]	; (80002f4 <MX_USART2_UART_Init+0x4c>)
 80002b4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80002b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80002ba:	4b0e      	ldr	r3, [pc, #56]	; (80002f4 <MX_USART2_UART_Init+0x4c>)
 80002bc:	2200      	movs	r2, #0
 80002be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80002c0:	4b0c      	ldr	r3, [pc, #48]	; (80002f4 <MX_USART2_UART_Init+0x4c>)
 80002c2:	2200      	movs	r2, #0
 80002c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80002c6:	4b0b      	ldr	r3, [pc, #44]	; (80002f4 <MX_USART2_UART_Init+0x4c>)
 80002c8:	2200      	movs	r2, #0
 80002ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80002cc:	4b09      	ldr	r3, [pc, #36]	; (80002f4 <MX_USART2_UART_Init+0x4c>)
 80002ce:	220c      	movs	r2, #12
 80002d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002d2:	4b08      	ldr	r3, [pc, #32]	; (80002f4 <MX_USART2_UART_Init+0x4c>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80002d8:	4b06      	ldr	r3, [pc, #24]	; (80002f4 <MX_USART2_UART_Init+0x4c>)
 80002da:	2200      	movs	r2, #0
 80002dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80002de:	4805      	ldr	r0, [pc, #20]	; (80002f4 <MX_USART2_UART_Init+0x4c>)
 80002e0:	f001 fc44 	bl	8001b6c <HAL_UART_Init>
 80002e4:	4603      	mov	r3, r0
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d001      	beq.n	80002ee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80002ea:	f000 f857 	bl	800039c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80002ee:	bf00      	nop
 80002f0:	bd80      	pop	{r7, pc}
 80002f2:	bf00      	nop
 80002f4:	20000058 	.word	0x20000058
 80002f8:	40004400 	.word	0x40004400

080002fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b086      	sub	sp, #24
 8000300:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000302:	f107 0308 	add.w	r3, r7, #8
 8000306:	2200      	movs	r2, #0
 8000308:	601a      	str	r2, [r3, #0]
 800030a:	605a      	str	r2, [r3, #4]
 800030c:	609a      	str	r2, [r3, #8]
 800030e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000310:	4b11      	ldr	r3, [pc, #68]	; (8000358 <MX_GPIO_Init+0x5c>)
 8000312:	699b      	ldr	r3, [r3, #24]
 8000314:	4a10      	ldr	r2, [pc, #64]	; (8000358 <MX_GPIO_Init+0x5c>)
 8000316:	f043 0304 	orr.w	r3, r3, #4
 800031a:	6193      	str	r3, [r2, #24]
 800031c:	4b0e      	ldr	r3, [pc, #56]	; (8000358 <MX_GPIO_Init+0x5c>)
 800031e:	699b      	ldr	r3, [r3, #24]
 8000320:	f003 0304 	and.w	r3, r3, #4
 8000324:	607b      	str	r3, [r7, #4]
 8000326:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000328:	2200      	movs	r2, #0
 800032a:	2120      	movs	r1, #32
 800032c:	480b      	ldr	r0, [pc, #44]	; (800035c <MX_GPIO_Init+0x60>)
 800032e:	f000 ff1b 	bl	8001168 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8000332:	2320      	movs	r3, #32
 8000334:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000336:	2301      	movs	r3, #1
 8000338:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800033a:	2300      	movs	r3, #0
 800033c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800033e:	2302      	movs	r3, #2
 8000340:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8000342:	f107 0308 	add.w	r3, r7, #8
 8000346:	4619      	mov	r1, r3
 8000348:	4804      	ldr	r0, [pc, #16]	; (800035c <MX_GPIO_Init+0x60>)
 800034a:	f000 fd91 	bl	8000e70 <HAL_GPIO_Init>

}
 800034e:	bf00      	nop
 8000350:	3718      	adds	r7, #24
 8000352:	46bd      	mov	sp, r7
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	40021000 	.word	0x40021000
 800035c:	40010800 	.word	0x40010800

08000360 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback ( UART_HandleTypeDef * huart ){
 8000360:	b580      	push	{r7, lr}
 8000362:	b082      	sub	sp, #8
 8000364:	af00      	add	r7, sp, #0
 8000366:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2){
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	4a08      	ldr	r2, [pc, #32]	; (8000390 <HAL_UART_RxCpltCallback+0x30>)
 800036e:	4293      	cmp	r3, r2
 8000370:	d10a      	bne.n	8000388 <HAL_UART_RxCpltCallback+0x28>
		HAL_UART_Transmit(&huart2, &temp, 1, 50);
 8000372:	2332      	movs	r3, #50	; 0x32
 8000374:	2201      	movs	r2, #1
 8000376:	4907      	ldr	r1, [pc, #28]	; (8000394 <HAL_UART_RxCpltCallback+0x34>)
 8000378:	4807      	ldr	r0, [pc, #28]	; (8000398 <HAL_UART_RxCpltCallback+0x38>)
 800037a:	f001 fc44 	bl	8001c06 <HAL_UART_Transmit>
		HAL_UART_Receive_IT(&huart2, &temp, 1);
 800037e:	2201      	movs	r2, #1
 8000380:	4904      	ldr	r1, [pc, #16]	; (8000394 <HAL_UART_RxCpltCallback+0x34>)
 8000382:	4805      	ldr	r0, [pc, #20]	; (8000398 <HAL_UART_RxCpltCallback+0x38>)
 8000384:	f001 fcd1 	bl	8001d2a <HAL_UART_Receive_IT>
	}
}
 8000388:	bf00      	nop
 800038a:	3708      	adds	r7, #8
 800038c:	46bd      	mov	sp, r7
 800038e:	bd80      	pop	{r7, pc}
 8000390:	40004400 	.word	0x40004400
 8000394:	2000009c 	.word	0x2000009c
 8000398:	20000058 	.word	0x20000058

0800039c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800039c:	b480      	push	{r7}
 800039e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003a0:	b672      	cpsid	i
}
 80003a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003a4:	e7fe      	b.n	80003a4 <Error_Handler+0x8>
	...

080003a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003a8:	b480      	push	{r7}
 80003aa:	b083      	sub	sp, #12
 80003ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003ae:	4b0e      	ldr	r3, [pc, #56]	; (80003e8 <HAL_MspInit+0x40>)
 80003b0:	699b      	ldr	r3, [r3, #24]
 80003b2:	4a0d      	ldr	r2, [pc, #52]	; (80003e8 <HAL_MspInit+0x40>)
 80003b4:	f043 0301 	orr.w	r3, r3, #1
 80003b8:	6193      	str	r3, [r2, #24]
 80003ba:	4b0b      	ldr	r3, [pc, #44]	; (80003e8 <HAL_MspInit+0x40>)
 80003bc:	699b      	ldr	r3, [r3, #24]
 80003be:	f003 0301 	and.w	r3, r3, #1
 80003c2:	607b      	str	r3, [r7, #4]
 80003c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003c6:	4b08      	ldr	r3, [pc, #32]	; (80003e8 <HAL_MspInit+0x40>)
 80003c8:	69db      	ldr	r3, [r3, #28]
 80003ca:	4a07      	ldr	r2, [pc, #28]	; (80003e8 <HAL_MspInit+0x40>)
 80003cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003d0:	61d3      	str	r3, [r2, #28]
 80003d2:	4b05      	ldr	r3, [pc, #20]	; (80003e8 <HAL_MspInit+0x40>)
 80003d4:	69db      	ldr	r3, [r3, #28]
 80003d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003da:	603b      	str	r3, [r7, #0]
 80003dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003de:	bf00      	nop
 80003e0:	370c      	adds	r7, #12
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bc80      	pop	{r7}
 80003e6:	4770      	bx	lr
 80003e8:	40021000 	.word	0x40021000

080003ec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b088      	sub	sp, #32
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003f4:	f107 0310 	add.w	r3, r7, #16
 80003f8:	2200      	movs	r2, #0
 80003fa:	601a      	str	r2, [r3, #0]
 80003fc:	605a      	str	r2, [r3, #4]
 80003fe:	609a      	str	r2, [r3, #8]
 8000400:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	4a14      	ldr	r2, [pc, #80]	; (8000458 <HAL_ADC_MspInit+0x6c>)
 8000408:	4293      	cmp	r3, r2
 800040a:	d121      	bne.n	8000450 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800040c:	4b13      	ldr	r3, [pc, #76]	; (800045c <HAL_ADC_MspInit+0x70>)
 800040e:	699b      	ldr	r3, [r3, #24]
 8000410:	4a12      	ldr	r2, [pc, #72]	; (800045c <HAL_ADC_MspInit+0x70>)
 8000412:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000416:	6193      	str	r3, [r2, #24]
 8000418:	4b10      	ldr	r3, [pc, #64]	; (800045c <HAL_ADC_MspInit+0x70>)
 800041a:	699b      	ldr	r3, [r3, #24]
 800041c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000420:	60fb      	str	r3, [r7, #12]
 8000422:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000424:	4b0d      	ldr	r3, [pc, #52]	; (800045c <HAL_ADC_MspInit+0x70>)
 8000426:	699b      	ldr	r3, [r3, #24]
 8000428:	4a0c      	ldr	r2, [pc, #48]	; (800045c <HAL_ADC_MspInit+0x70>)
 800042a:	f043 0304 	orr.w	r3, r3, #4
 800042e:	6193      	str	r3, [r2, #24]
 8000430:	4b0a      	ldr	r3, [pc, #40]	; (800045c <HAL_ADC_MspInit+0x70>)
 8000432:	699b      	ldr	r3, [r3, #24]
 8000434:	f003 0304 	and.w	r3, r3, #4
 8000438:	60bb      	str	r3, [r7, #8]
 800043a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800043c:	2301      	movs	r3, #1
 800043e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000440:	2303      	movs	r3, #3
 8000442:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000444:	f107 0310 	add.w	r3, r7, #16
 8000448:	4619      	mov	r1, r3
 800044a:	4805      	ldr	r0, [pc, #20]	; (8000460 <HAL_ADC_MspInit+0x74>)
 800044c:	f000 fd10 	bl	8000e70 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000450:	bf00      	nop
 8000452:	3720      	adds	r7, #32
 8000454:	46bd      	mov	sp, r7
 8000456:	bd80      	pop	{r7, pc}
 8000458:	40012400 	.word	0x40012400
 800045c:	40021000 	.word	0x40021000
 8000460:	40010800 	.word	0x40010800

08000464 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b088      	sub	sp, #32
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800046c:	f107 0310 	add.w	r3, r7, #16
 8000470:	2200      	movs	r2, #0
 8000472:	601a      	str	r2, [r3, #0]
 8000474:	605a      	str	r2, [r3, #4]
 8000476:	609a      	str	r2, [r3, #8]
 8000478:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	4a1f      	ldr	r2, [pc, #124]	; (80004fc <HAL_UART_MspInit+0x98>)
 8000480:	4293      	cmp	r3, r2
 8000482:	d137      	bne.n	80004f4 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000484:	4b1e      	ldr	r3, [pc, #120]	; (8000500 <HAL_UART_MspInit+0x9c>)
 8000486:	69db      	ldr	r3, [r3, #28]
 8000488:	4a1d      	ldr	r2, [pc, #116]	; (8000500 <HAL_UART_MspInit+0x9c>)
 800048a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800048e:	61d3      	str	r3, [r2, #28]
 8000490:	4b1b      	ldr	r3, [pc, #108]	; (8000500 <HAL_UART_MspInit+0x9c>)
 8000492:	69db      	ldr	r3, [r3, #28]
 8000494:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000498:	60fb      	str	r3, [r7, #12]
 800049a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800049c:	4b18      	ldr	r3, [pc, #96]	; (8000500 <HAL_UART_MspInit+0x9c>)
 800049e:	699b      	ldr	r3, [r3, #24]
 80004a0:	4a17      	ldr	r2, [pc, #92]	; (8000500 <HAL_UART_MspInit+0x9c>)
 80004a2:	f043 0304 	orr.w	r3, r3, #4
 80004a6:	6193      	str	r3, [r2, #24]
 80004a8:	4b15      	ldr	r3, [pc, #84]	; (8000500 <HAL_UART_MspInit+0x9c>)
 80004aa:	699b      	ldr	r3, [r3, #24]
 80004ac:	f003 0304 	and.w	r3, r3, #4
 80004b0:	60bb      	str	r3, [r7, #8]
 80004b2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80004b4:	2304      	movs	r3, #4
 80004b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004b8:	2302      	movs	r3, #2
 80004ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004bc:	2303      	movs	r3, #3
 80004be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004c0:	f107 0310 	add.w	r3, r7, #16
 80004c4:	4619      	mov	r1, r3
 80004c6:	480f      	ldr	r0, [pc, #60]	; (8000504 <HAL_UART_MspInit+0xa0>)
 80004c8:	f000 fcd2 	bl	8000e70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80004cc:	2308      	movs	r3, #8
 80004ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004d0:	2300      	movs	r3, #0
 80004d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d4:	2300      	movs	r3, #0
 80004d6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004d8:	f107 0310 	add.w	r3, r7, #16
 80004dc:	4619      	mov	r1, r3
 80004de:	4809      	ldr	r0, [pc, #36]	; (8000504 <HAL_UART_MspInit+0xa0>)
 80004e0:	f000 fcc6 	bl	8000e70 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80004e4:	2200      	movs	r2, #0
 80004e6:	2100      	movs	r1, #0
 80004e8:	2026      	movs	r0, #38	; 0x26
 80004ea:	f000 fbda 	bl	8000ca2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80004ee:	2026      	movs	r0, #38	; 0x26
 80004f0:	f000 fbf3 	bl	8000cda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80004f4:	bf00      	nop
 80004f6:	3720      	adds	r7, #32
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	40004400 	.word	0x40004400
 8000500:	40021000 	.word	0x40021000
 8000504:	40010800 	.word	0x40010800

08000508 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800050c:	e7fe      	b.n	800050c <NMI_Handler+0x4>

0800050e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800050e:	b480      	push	{r7}
 8000510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000512:	e7fe      	b.n	8000512 <HardFault_Handler+0x4>

08000514 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000518:	e7fe      	b.n	8000518 <MemManage_Handler+0x4>

0800051a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800051a:	b480      	push	{r7}
 800051c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800051e:	e7fe      	b.n	800051e <BusFault_Handler+0x4>

08000520 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000524:	e7fe      	b.n	8000524 <UsageFault_Handler+0x4>

08000526 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000526:	b480      	push	{r7}
 8000528:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800052a:	bf00      	nop
 800052c:	46bd      	mov	sp, r7
 800052e:	bc80      	pop	{r7}
 8000530:	4770      	bx	lr

08000532 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000532:	b480      	push	{r7}
 8000534:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000536:	bf00      	nop
 8000538:	46bd      	mov	sp, r7
 800053a:	bc80      	pop	{r7}
 800053c:	4770      	bx	lr

0800053e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800053e:	b480      	push	{r7}
 8000540:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000542:	bf00      	nop
 8000544:	46bd      	mov	sp, r7
 8000546:	bc80      	pop	{r7}
 8000548:	4770      	bx	lr

0800054a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800054a:	b580      	push	{r7, lr}
 800054c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800054e:	f000 f87f 	bl	8000650 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000552:	bf00      	nop
 8000554:	bd80      	pop	{r7, pc}
	...

08000558 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800055c:	4802      	ldr	r0, [pc, #8]	; (8000568 <USART2_IRQHandler+0x10>)
 800055e:	f001 fc15 	bl	8001d8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000562:	bf00      	nop
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	20000058 	.word	0x20000058

0800056c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000570:	bf00      	nop
 8000572:	46bd      	mov	sp, r7
 8000574:	bc80      	pop	{r7}
 8000576:	4770      	bx	lr

08000578 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000578:	480c      	ldr	r0, [pc, #48]	; (80005ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800057a:	490d      	ldr	r1, [pc, #52]	; (80005b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800057c:	4a0d      	ldr	r2, [pc, #52]	; (80005b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800057e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000580:	e002      	b.n	8000588 <LoopCopyDataInit>

08000582 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000582:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000584:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000586:	3304      	adds	r3, #4

08000588 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000588:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800058a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800058c:	d3f9      	bcc.n	8000582 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800058e:	4a0a      	ldr	r2, [pc, #40]	; (80005b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000590:	4c0a      	ldr	r4, [pc, #40]	; (80005bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000592:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000594:	e001      	b.n	800059a <LoopFillZerobss>

08000596 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000596:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000598:	3204      	adds	r2, #4

0800059a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800059a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800059c:	d3fb      	bcc.n	8000596 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800059e:	f7ff ffe5 	bl	800056c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005a2:	f002 f81b 	bl	80025dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005a6:	f7ff fdd1 	bl	800014c <main>
  bx lr
 80005aa:	4770      	bx	lr
  ldr r0, =_sdata
 80005ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005b0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80005b4:	0800267c 	.word	0x0800267c
  ldr r2, =_sbss
 80005b8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80005bc:	200000a4 	.word	0x200000a4

080005c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005c0:	e7fe      	b.n	80005c0 <ADC1_2_IRQHandler>
	...

080005c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005c8:	4b08      	ldr	r3, [pc, #32]	; (80005ec <HAL_Init+0x28>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a07      	ldr	r2, [pc, #28]	; (80005ec <HAL_Init+0x28>)
 80005ce:	f043 0310 	orr.w	r3, r3, #16
 80005d2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005d4:	2003      	movs	r0, #3
 80005d6:	f000 fb59 	bl	8000c8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005da:	200f      	movs	r0, #15
 80005dc:	f000 f808 	bl	80005f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005e0:	f7ff fee2 	bl	80003a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005e4:	2300      	movs	r3, #0
}
 80005e6:	4618      	mov	r0, r3
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	40022000 	.word	0x40022000

080005f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005f8:	4b12      	ldr	r3, [pc, #72]	; (8000644 <HAL_InitTick+0x54>)
 80005fa:	681a      	ldr	r2, [r3, #0]
 80005fc:	4b12      	ldr	r3, [pc, #72]	; (8000648 <HAL_InitTick+0x58>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	4619      	mov	r1, r3
 8000602:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000606:	fbb3 f3f1 	udiv	r3, r3, r1
 800060a:	fbb2 f3f3 	udiv	r3, r2, r3
 800060e:	4618      	mov	r0, r3
 8000610:	f000 fb71 	bl	8000cf6 <HAL_SYSTICK_Config>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800061a:	2301      	movs	r3, #1
 800061c:	e00e      	b.n	800063c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	2b0f      	cmp	r3, #15
 8000622:	d80a      	bhi.n	800063a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000624:	2200      	movs	r2, #0
 8000626:	6879      	ldr	r1, [r7, #4]
 8000628:	f04f 30ff 	mov.w	r0, #4294967295
 800062c:	f000 fb39 	bl	8000ca2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000630:	4a06      	ldr	r2, [pc, #24]	; (800064c <HAL_InitTick+0x5c>)
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000636:	2300      	movs	r3, #0
 8000638:	e000      	b.n	800063c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800063a:	2301      	movs	r3, #1
}
 800063c:	4618      	mov	r0, r3
 800063e:	3708      	adds	r7, #8
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	20000000 	.word	0x20000000
 8000648:	20000008 	.word	0x20000008
 800064c:	20000004 	.word	0x20000004

08000650 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000654:	4b05      	ldr	r3, [pc, #20]	; (800066c <HAL_IncTick+0x1c>)
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	461a      	mov	r2, r3
 800065a:	4b05      	ldr	r3, [pc, #20]	; (8000670 <HAL_IncTick+0x20>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	4413      	add	r3, r2
 8000660:	4a03      	ldr	r2, [pc, #12]	; (8000670 <HAL_IncTick+0x20>)
 8000662:	6013      	str	r3, [r2, #0]
}
 8000664:	bf00      	nop
 8000666:	46bd      	mov	sp, r7
 8000668:	bc80      	pop	{r7}
 800066a:	4770      	bx	lr
 800066c:	20000008 	.word	0x20000008
 8000670:	200000a0 	.word	0x200000a0

08000674 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
  return uwTick;
 8000678:	4b02      	ldr	r3, [pc, #8]	; (8000684 <HAL_GetTick+0x10>)
 800067a:	681b      	ldr	r3, [r3, #0]
}
 800067c:	4618      	mov	r0, r3
 800067e:	46bd      	mov	sp, r7
 8000680:	bc80      	pop	{r7}
 8000682:	4770      	bx	lr
 8000684:	200000a0 	.word	0x200000a0

08000688 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b084      	sub	sp, #16
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000690:	f7ff fff0 	bl	8000674 <HAL_GetTick>
 8000694:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006a0:	d005      	beq.n	80006ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80006a2:	4b0a      	ldr	r3, [pc, #40]	; (80006cc <HAL_Delay+0x44>)
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	461a      	mov	r2, r3
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	4413      	add	r3, r2
 80006ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80006ae:	bf00      	nop
 80006b0:	f7ff ffe0 	bl	8000674 <HAL_GetTick>
 80006b4:	4602      	mov	r2, r0
 80006b6:	68bb      	ldr	r3, [r7, #8]
 80006b8:	1ad3      	subs	r3, r2, r3
 80006ba:	68fa      	ldr	r2, [r7, #12]
 80006bc:	429a      	cmp	r2, r3
 80006be:	d8f7      	bhi.n	80006b0 <HAL_Delay+0x28>
  {
  }
}
 80006c0:	bf00      	nop
 80006c2:	bf00      	nop
 80006c4:	3710      	adds	r7, #16
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	20000008 	.word	0x20000008

080006d0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b086      	sub	sp, #24
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80006d8:	2300      	movs	r3, #0
 80006da:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80006dc:	2300      	movs	r3, #0
 80006de:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80006e0:	2300      	movs	r3, #0
 80006e2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80006e4:	2300      	movs	r3, #0
 80006e6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d101      	bne.n	80006f2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80006ee:	2301      	movs	r3, #1
 80006f0:	e0be      	b.n	8000870 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	689b      	ldr	r3, [r3, #8]
 80006f6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d109      	bne.n	8000714 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	2200      	movs	r2, #0
 8000704:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	2200      	movs	r2, #0
 800070a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800070e:	6878      	ldr	r0, [r7, #4]
 8000710:	f7ff fe6c 	bl	80003ec <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000714:	6878      	ldr	r0, [r7, #4]
 8000716:	f000 f9ab 	bl	8000a70 <ADC_ConversionStop_Disable>
 800071a:	4603      	mov	r3, r0
 800071c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000722:	f003 0310 	and.w	r3, r3, #16
 8000726:	2b00      	cmp	r3, #0
 8000728:	f040 8099 	bne.w	800085e <HAL_ADC_Init+0x18e>
 800072c:	7dfb      	ldrb	r3, [r7, #23]
 800072e:	2b00      	cmp	r3, #0
 8000730:	f040 8095 	bne.w	800085e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000738:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800073c:	f023 0302 	bic.w	r3, r3, #2
 8000740:	f043 0202 	orr.w	r2, r3, #2
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000750:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	7b1b      	ldrb	r3, [r3, #12]
 8000756:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000758:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800075a:	68ba      	ldr	r2, [r7, #8]
 800075c:	4313      	orrs	r3, r2
 800075e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	689b      	ldr	r3, [r3, #8]
 8000764:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000768:	d003      	beq.n	8000772 <HAL_ADC_Init+0xa2>
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	689b      	ldr	r3, [r3, #8]
 800076e:	2b01      	cmp	r3, #1
 8000770:	d102      	bne.n	8000778 <HAL_ADC_Init+0xa8>
 8000772:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000776:	e000      	b.n	800077a <HAL_ADC_Init+0xaa>
 8000778:	2300      	movs	r3, #0
 800077a:	693a      	ldr	r2, [r7, #16]
 800077c:	4313      	orrs	r3, r2
 800077e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	7d1b      	ldrb	r3, [r3, #20]
 8000784:	2b01      	cmp	r3, #1
 8000786:	d119      	bne.n	80007bc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	7b1b      	ldrb	r3, [r3, #12]
 800078c:	2b00      	cmp	r3, #0
 800078e:	d109      	bne.n	80007a4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	699b      	ldr	r3, [r3, #24]
 8000794:	3b01      	subs	r3, #1
 8000796:	035a      	lsls	r2, r3, #13
 8000798:	693b      	ldr	r3, [r7, #16]
 800079a:	4313      	orrs	r3, r2
 800079c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80007a0:	613b      	str	r3, [r7, #16]
 80007a2:	e00b      	b.n	80007bc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007a8:	f043 0220 	orr.w	r2, r3, #32
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007b4:	f043 0201 	orr.w	r2, r3, #1
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	685b      	ldr	r3, [r3, #4]
 80007c2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	693a      	ldr	r2, [r7, #16]
 80007cc:	430a      	orrs	r2, r1
 80007ce:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	689a      	ldr	r2, [r3, #8]
 80007d6:	4b28      	ldr	r3, [pc, #160]	; (8000878 <HAL_ADC_Init+0x1a8>)
 80007d8:	4013      	ands	r3, r2
 80007da:	687a      	ldr	r2, [r7, #4]
 80007dc:	6812      	ldr	r2, [r2, #0]
 80007de:	68b9      	ldr	r1, [r7, #8]
 80007e0:	430b      	orrs	r3, r1
 80007e2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	689b      	ldr	r3, [r3, #8]
 80007e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80007ec:	d003      	beq.n	80007f6 <HAL_ADC_Init+0x126>
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	689b      	ldr	r3, [r3, #8]
 80007f2:	2b01      	cmp	r3, #1
 80007f4:	d104      	bne.n	8000800 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	691b      	ldr	r3, [r3, #16]
 80007fa:	3b01      	subs	r3, #1
 80007fc:	051b      	lsls	r3, r3, #20
 80007fe:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000806:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	68fa      	ldr	r2, [r7, #12]
 8000810:	430a      	orrs	r2, r1
 8000812:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	689a      	ldr	r2, [r3, #8]
 800081a:	4b18      	ldr	r3, [pc, #96]	; (800087c <HAL_ADC_Init+0x1ac>)
 800081c:	4013      	ands	r3, r2
 800081e:	68ba      	ldr	r2, [r7, #8]
 8000820:	429a      	cmp	r2, r3
 8000822:	d10b      	bne.n	800083c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	2200      	movs	r2, #0
 8000828:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800082e:	f023 0303 	bic.w	r3, r3, #3
 8000832:	f043 0201 	orr.w	r2, r3, #1
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800083a:	e018      	b.n	800086e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000840:	f023 0312 	bic.w	r3, r3, #18
 8000844:	f043 0210 	orr.w	r2, r3, #16
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000850:	f043 0201 	orr.w	r2, r3, #1
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000858:	2301      	movs	r3, #1
 800085a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800085c:	e007      	b.n	800086e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000862:	f043 0210 	orr.w	r2, r3, #16
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800086a:	2301      	movs	r3, #1
 800086c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800086e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000870:	4618      	mov	r0, r3
 8000872:	3718      	adds	r7, #24
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	ffe1f7fd 	.word	0xffe1f7fd
 800087c:	ff1f0efe 	.word	0xff1f0efe

08000880 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000880:	b480      	push	{r7}
 8000882:	b085      	sub	sp, #20
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
 8000888:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800088a:	2300      	movs	r3, #0
 800088c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800088e:	2300      	movs	r3, #0
 8000890:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000898:	2b01      	cmp	r3, #1
 800089a:	d101      	bne.n	80008a0 <HAL_ADC_ConfigChannel+0x20>
 800089c:	2302      	movs	r3, #2
 800089e:	e0dc      	b.n	8000a5a <HAL_ADC_ConfigChannel+0x1da>
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	2201      	movs	r2, #1
 80008a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	685b      	ldr	r3, [r3, #4]
 80008ac:	2b06      	cmp	r3, #6
 80008ae:	d81c      	bhi.n	80008ea <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80008b6:	683b      	ldr	r3, [r7, #0]
 80008b8:	685a      	ldr	r2, [r3, #4]
 80008ba:	4613      	mov	r3, r2
 80008bc:	009b      	lsls	r3, r3, #2
 80008be:	4413      	add	r3, r2
 80008c0:	3b05      	subs	r3, #5
 80008c2:	221f      	movs	r2, #31
 80008c4:	fa02 f303 	lsl.w	r3, r2, r3
 80008c8:	43db      	mvns	r3, r3
 80008ca:	4019      	ands	r1, r3
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	6818      	ldr	r0, [r3, #0]
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	685a      	ldr	r2, [r3, #4]
 80008d4:	4613      	mov	r3, r2
 80008d6:	009b      	lsls	r3, r3, #2
 80008d8:	4413      	add	r3, r2
 80008da:	3b05      	subs	r3, #5
 80008dc:	fa00 f203 	lsl.w	r2, r0, r3
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	430a      	orrs	r2, r1
 80008e6:	635a      	str	r2, [r3, #52]	; 0x34
 80008e8:	e03c      	b.n	8000964 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	685b      	ldr	r3, [r3, #4]
 80008ee:	2b0c      	cmp	r3, #12
 80008f0:	d81c      	bhi.n	800092c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	685a      	ldr	r2, [r3, #4]
 80008fc:	4613      	mov	r3, r2
 80008fe:	009b      	lsls	r3, r3, #2
 8000900:	4413      	add	r3, r2
 8000902:	3b23      	subs	r3, #35	; 0x23
 8000904:	221f      	movs	r2, #31
 8000906:	fa02 f303 	lsl.w	r3, r2, r3
 800090a:	43db      	mvns	r3, r3
 800090c:	4019      	ands	r1, r3
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	6818      	ldr	r0, [r3, #0]
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	685a      	ldr	r2, [r3, #4]
 8000916:	4613      	mov	r3, r2
 8000918:	009b      	lsls	r3, r3, #2
 800091a:	4413      	add	r3, r2
 800091c:	3b23      	subs	r3, #35	; 0x23
 800091e:	fa00 f203 	lsl.w	r2, r0, r3
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	430a      	orrs	r2, r1
 8000928:	631a      	str	r2, [r3, #48]	; 0x30
 800092a:	e01b      	b.n	8000964 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	685a      	ldr	r2, [r3, #4]
 8000936:	4613      	mov	r3, r2
 8000938:	009b      	lsls	r3, r3, #2
 800093a:	4413      	add	r3, r2
 800093c:	3b41      	subs	r3, #65	; 0x41
 800093e:	221f      	movs	r2, #31
 8000940:	fa02 f303 	lsl.w	r3, r2, r3
 8000944:	43db      	mvns	r3, r3
 8000946:	4019      	ands	r1, r3
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	6818      	ldr	r0, [r3, #0]
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	685a      	ldr	r2, [r3, #4]
 8000950:	4613      	mov	r3, r2
 8000952:	009b      	lsls	r3, r3, #2
 8000954:	4413      	add	r3, r2
 8000956:	3b41      	subs	r3, #65	; 0x41
 8000958:	fa00 f203 	lsl.w	r2, r0, r3
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	430a      	orrs	r2, r1
 8000962:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	2b09      	cmp	r3, #9
 800096a:	d91c      	bls.n	80009a6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	68d9      	ldr	r1, [r3, #12]
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	681a      	ldr	r2, [r3, #0]
 8000976:	4613      	mov	r3, r2
 8000978:	005b      	lsls	r3, r3, #1
 800097a:	4413      	add	r3, r2
 800097c:	3b1e      	subs	r3, #30
 800097e:	2207      	movs	r2, #7
 8000980:	fa02 f303 	lsl.w	r3, r2, r3
 8000984:	43db      	mvns	r3, r3
 8000986:	4019      	ands	r1, r3
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	6898      	ldr	r0, [r3, #8]
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	681a      	ldr	r2, [r3, #0]
 8000990:	4613      	mov	r3, r2
 8000992:	005b      	lsls	r3, r3, #1
 8000994:	4413      	add	r3, r2
 8000996:	3b1e      	subs	r3, #30
 8000998:	fa00 f203 	lsl.w	r2, r0, r3
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	430a      	orrs	r2, r1
 80009a2:	60da      	str	r2, [r3, #12]
 80009a4:	e019      	b.n	80009da <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	6919      	ldr	r1, [r3, #16]
 80009ac:	683b      	ldr	r3, [r7, #0]
 80009ae:	681a      	ldr	r2, [r3, #0]
 80009b0:	4613      	mov	r3, r2
 80009b2:	005b      	lsls	r3, r3, #1
 80009b4:	4413      	add	r3, r2
 80009b6:	2207      	movs	r2, #7
 80009b8:	fa02 f303 	lsl.w	r3, r2, r3
 80009bc:	43db      	mvns	r3, r3
 80009be:	4019      	ands	r1, r3
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	6898      	ldr	r0, [r3, #8]
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	681a      	ldr	r2, [r3, #0]
 80009c8:	4613      	mov	r3, r2
 80009ca:	005b      	lsls	r3, r3, #1
 80009cc:	4413      	add	r3, r2
 80009ce:	fa00 f203 	lsl.w	r2, r0, r3
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	430a      	orrs	r2, r1
 80009d8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	2b10      	cmp	r3, #16
 80009e0:	d003      	beq.n	80009ea <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80009e6:	2b11      	cmp	r3, #17
 80009e8:	d132      	bne.n	8000a50 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	4a1d      	ldr	r2, [pc, #116]	; (8000a64 <HAL_ADC_ConfigChannel+0x1e4>)
 80009f0:	4293      	cmp	r3, r2
 80009f2:	d125      	bne.n	8000a40 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	689b      	ldr	r3, [r3, #8]
 80009fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d126      	bne.n	8000a50 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	689a      	ldr	r2, [r3, #8]
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000a10:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	2b10      	cmp	r3, #16
 8000a18:	d11a      	bne.n	8000a50 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000a1a:	4b13      	ldr	r3, [pc, #76]	; (8000a68 <HAL_ADC_ConfigChannel+0x1e8>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	4a13      	ldr	r2, [pc, #76]	; (8000a6c <HAL_ADC_ConfigChannel+0x1ec>)
 8000a20:	fba2 2303 	umull	r2, r3, r2, r3
 8000a24:	0c9a      	lsrs	r2, r3, #18
 8000a26:	4613      	mov	r3, r2
 8000a28:	009b      	lsls	r3, r3, #2
 8000a2a:	4413      	add	r3, r2
 8000a2c:	005b      	lsls	r3, r3, #1
 8000a2e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000a30:	e002      	b.n	8000a38 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000a32:	68bb      	ldr	r3, [r7, #8]
 8000a34:	3b01      	subs	r3, #1
 8000a36:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000a38:	68bb      	ldr	r3, [r7, #8]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d1f9      	bne.n	8000a32 <HAL_ADC_ConfigChannel+0x1b2>
 8000a3e:	e007      	b.n	8000a50 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a44:	f043 0220 	orr.w	r2, r3, #32
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	2200      	movs	r2, #0
 8000a54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	3714      	adds	r7, #20
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bc80      	pop	{r7}
 8000a62:	4770      	bx	lr
 8000a64:	40012400 	.word	0x40012400
 8000a68:	20000000 	.word	0x20000000
 8000a6c:	431bde83 	.word	0x431bde83

08000a70 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b084      	sub	sp, #16
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	689b      	ldr	r3, [r3, #8]
 8000a82:	f003 0301 	and.w	r3, r3, #1
 8000a86:	2b01      	cmp	r3, #1
 8000a88:	d12e      	bne.n	8000ae8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	689a      	ldr	r2, [r3, #8]
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	f022 0201 	bic.w	r2, r2, #1
 8000a98:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000a9a:	f7ff fdeb 	bl	8000674 <HAL_GetTick>
 8000a9e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000aa0:	e01b      	b.n	8000ada <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000aa2:	f7ff fde7 	bl	8000674 <HAL_GetTick>
 8000aa6:	4602      	mov	r2, r0
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	1ad3      	subs	r3, r2, r3
 8000aac:	2b02      	cmp	r3, #2
 8000aae:	d914      	bls.n	8000ada <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	689b      	ldr	r3, [r3, #8]
 8000ab6:	f003 0301 	and.w	r3, r3, #1
 8000aba:	2b01      	cmp	r3, #1
 8000abc:	d10d      	bne.n	8000ada <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ac2:	f043 0210 	orr.w	r2, r3, #16
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ace:	f043 0201 	orr.w	r2, r3, #1
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	e007      	b.n	8000aea <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	689b      	ldr	r3, [r3, #8]
 8000ae0:	f003 0301 	and.w	r3, r3, #1
 8000ae4:	2b01      	cmp	r3, #1
 8000ae6:	d0dc      	beq.n	8000aa2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000ae8:	2300      	movs	r3, #0
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	3710      	adds	r7, #16
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
	...

08000af4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b085      	sub	sp, #20
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	f003 0307 	and.w	r3, r3, #7
 8000b02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b04:	4b0c      	ldr	r3, [pc, #48]	; (8000b38 <__NVIC_SetPriorityGrouping+0x44>)
 8000b06:	68db      	ldr	r3, [r3, #12]
 8000b08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b0a:	68ba      	ldr	r2, [r7, #8]
 8000b0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b10:	4013      	ands	r3, r2
 8000b12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b18:	68bb      	ldr	r3, [r7, #8]
 8000b1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b26:	4a04      	ldr	r2, [pc, #16]	; (8000b38 <__NVIC_SetPriorityGrouping+0x44>)
 8000b28:	68bb      	ldr	r3, [r7, #8]
 8000b2a:	60d3      	str	r3, [r2, #12]
}
 8000b2c:	bf00      	nop
 8000b2e:	3714      	adds	r7, #20
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bc80      	pop	{r7}
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	e000ed00 	.word	0xe000ed00

08000b3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b40:	4b04      	ldr	r3, [pc, #16]	; (8000b54 <__NVIC_GetPriorityGrouping+0x18>)
 8000b42:	68db      	ldr	r3, [r3, #12]
 8000b44:	0a1b      	lsrs	r3, r3, #8
 8000b46:	f003 0307 	and.w	r3, r3, #7
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bc80      	pop	{r7}
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	e000ed00 	.word	0xe000ed00

08000b58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	4603      	mov	r3, r0
 8000b60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	db0b      	blt.n	8000b82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b6a:	79fb      	ldrb	r3, [r7, #7]
 8000b6c:	f003 021f 	and.w	r2, r3, #31
 8000b70:	4906      	ldr	r1, [pc, #24]	; (8000b8c <__NVIC_EnableIRQ+0x34>)
 8000b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b76:	095b      	lsrs	r3, r3, #5
 8000b78:	2001      	movs	r0, #1
 8000b7a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b82:	bf00      	nop
 8000b84:	370c      	adds	r7, #12
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bc80      	pop	{r7}
 8000b8a:	4770      	bx	lr
 8000b8c:	e000e100 	.word	0xe000e100

08000b90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	4603      	mov	r3, r0
 8000b98:	6039      	str	r1, [r7, #0]
 8000b9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	db0a      	blt.n	8000bba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	b2da      	uxtb	r2, r3
 8000ba8:	490c      	ldr	r1, [pc, #48]	; (8000bdc <__NVIC_SetPriority+0x4c>)
 8000baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bae:	0112      	lsls	r2, r2, #4
 8000bb0:	b2d2      	uxtb	r2, r2
 8000bb2:	440b      	add	r3, r1
 8000bb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bb8:	e00a      	b.n	8000bd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	b2da      	uxtb	r2, r3
 8000bbe:	4908      	ldr	r1, [pc, #32]	; (8000be0 <__NVIC_SetPriority+0x50>)
 8000bc0:	79fb      	ldrb	r3, [r7, #7]
 8000bc2:	f003 030f 	and.w	r3, r3, #15
 8000bc6:	3b04      	subs	r3, #4
 8000bc8:	0112      	lsls	r2, r2, #4
 8000bca:	b2d2      	uxtb	r2, r2
 8000bcc:	440b      	add	r3, r1
 8000bce:	761a      	strb	r2, [r3, #24]
}
 8000bd0:	bf00      	nop
 8000bd2:	370c      	adds	r7, #12
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bc80      	pop	{r7}
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	e000e100 	.word	0xe000e100
 8000be0:	e000ed00 	.word	0xe000ed00

08000be4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b089      	sub	sp, #36	; 0x24
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	60f8      	str	r0, [r7, #12]
 8000bec:	60b9      	str	r1, [r7, #8]
 8000bee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	f003 0307 	and.w	r3, r3, #7
 8000bf6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bf8:	69fb      	ldr	r3, [r7, #28]
 8000bfa:	f1c3 0307 	rsb	r3, r3, #7
 8000bfe:	2b04      	cmp	r3, #4
 8000c00:	bf28      	it	cs
 8000c02:	2304      	movcs	r3, #4
 8000c04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c06:	69fb      	ldr	r3, [r7, #28]
 8000c08:	3304      	adds	r3, #4
 8000c0a:	2b06      	cmp	r3, #6
 8000c0c:	d902      	bls.n	8000c14 <NVIC_EncodePriority+0x30>
 8000c0e:	69fb      	ldr	r3, [r7, #28]
 8000c10:	3b03      	subs	r3, #3
 8000c12:	e000      	b.n	8000c16 <NVIC_EncodePriority+0x32>
 8000c14:	2300      	movs	r3, #0
 8000c16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c18:	f04f 32ff 	mov.w	r2, #4294967295
 8000c1c:	69bb      	ldr	r3, [r7, #24]
 8000c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c22:	43da      	mvns	r2, r3
 8000c24:	68bb      	ldr	r3, [r7, #8]
 8000c26:	401a      	ands	r2, r3
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c2c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	fa01 f303 	lsl.w	r3, r1, r3
 8000c36:	43d9      	mvns	r1, r3
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c3c:	4313      	orrs	r3, r2
         );
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	3724      	adds	r7, #36	; 0x24
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bc80      	pop	{r7}
 8000c46:	4770      	bx	lr

08000c48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	3b01      	subs	r3, #1
 8000c54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c58:	d301      	bcc.n	8000c5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	e00f      	b.n	8000c7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c5e:	4a0a      	ldr	r2, [pc, #40]	; (8000c88 <SysTick_Config+0x40>)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	3b01      	subs	r3, #1
 8000c64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c66:	210f      	movs	r1, #15
 8000c68:	f04f 30ff 	mov.w	r0, #4294967295
 8000c6c:	f7ff ff90 	bl	8000b90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c70:	4b05      	ldr	r3, [pc, #20]	; (8000c88 <SysTick_Config+0x40>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c76:	4b04      	ldr	r3, [pc, #16]	; (8000c88 <SysTick_Config+0x40>)
 8000c78:	2207      	movs	r2, #7
 8000c7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c7c:	2300      	movs	r3, #0
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	e000e010 	.word	0xe000e010

08000c8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c94:	6878      	ldr	r0, [r7, #4]
 8000c96:	f7ff ff2d 	bl	8000af4 <__NVIC_SetPriorityGrouping>
}
 8000c9a:	bf00      	nop
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}

08000ca2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	b086      	sub	sp, #24
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	4603      	mov	r3, r0
 8000caa:	60b9      	str	r1, [r7, #8]
 8000cac:	607a      	str	r2, [r7, #4]
 8000cae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cb4:	f7ff ff42 	bl	8000b3c <__NVIC_GetPriorityGrouping>
 8000cb8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cba:	687a      	ldr	r2, [r7, #4]
 8000cbc:	68b9      	ldr	r1, [r7, #8]
 8000cbe:	6978      	ldr	r0, [r7, #20]
 8000cc0:	f7ff ff90 	bl	8000be4 <NVIC_EncodePriority>
 8000cc4:	4602      	mov	r2, r0
 8000cc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cca:	4611      	mov	r1, r2
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f7ff ff5f 	bl	8000b90 <__NVIC_SetPriority>
}
 8000cd2:	bf00      	nop
 8000cd4:	3718      	adds	r7, #24
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}

08000cda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cda:	b580      	push	{r7, lr}
 8000cdc:	b082      	sub	sp, #8
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ce4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f7ff ff35 	bl	8000b58 <__NVIC_EnableIRQ>
}
 8000cee:	bf00      	nop
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}

08000cf6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cf6:	b580      	push	{r7, lr}
 8000cf8:	b082      	sub	sp, #8
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cfe:	6878      	ldr	r0, [r7, #4]
 8000d00:	f7ff ffa2 	bl	8000c48 <SysTick_Config>
 8000d04:	4603      	mov	r3, r0
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}

08000d0e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d0e:	b480      	push	{r7}
 8000d10:	b085      	sub	sp, #20
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d16:	2300      	movs	r3, #0
 8000d18:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000d20:	2b02      	cmp	r3, #2
 8000d22:	d008      	beq.n	8000d36 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	2204      	movs	r2, #4
 8000d28:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000d32:	2301      	movs	r3, #1
 8000d34:	e020      	b.n	8000d78 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f022 020e 	bic.w	r2, r2, #14
 8000d44:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f022 0201 	bic.w	r2, r2, #1
 8000d54:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d5e:	2101      	movs	r1, #1
 8000d60:	fa01 f202 	lsl.w	r2, r1, r2
 8000d64:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	2201      	movs	r2, #1
 8000d6a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2200      	movs	r2, #0
 8000d72:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000d76:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	3714      	adds	r7, #20
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bc80      	pop	{r7}
 8000d80:	4770      	bx	lr
	...

08000d84 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b084      	sub	sp, #16
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000d96:	2b02      	cmp	r3, #2
 8000d98:	d005      	beq.n	8000da6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	2204      	movs	r2, #4
 8000d9e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000da0:	2301      	movs	r3, #1
 8000da2:	73fb      	strb	r3, [r7, #15]
 8000da4:	e051      	b.n	8000e4a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f022 020e 	bic.w	r2, r2, #14
 8000db4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	681a      	ldr	r2, [r3, #0]
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f022 0201 	bic.w	r2, r2, #1
 8000dc4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4a22      	ldr	r2, [pc, #136]	; (8000e54 <HAL_DMA_Abort_IT+0xd0>)
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	d029      	beq.n	8000e24 <HAL_DMA_Abort_IT+0xa0>
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a20      	ldr	r2, [pc, #128]	; (8000e58 <HAL_DMA_Abort_IT+0xd4>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d022      	beq.n	8000e20 <HAL_DMA_Abort_IT+0x9c>
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4a1f      	ldr	r2, [pc, #124]	; (8000e5c <HAL_DMA_Abort_IT+0xd8>)
 8000de0:	4293      	cmp	r3, r2
 8000de2:	d01a      	beq.n	8000e1a <HAL_DMA_Abort_IT+0x96>
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a1d      	ldr	r2, [pc, #116]	; (8000e60 <HAL_DMA_Abort_IT+0xdc>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d012      	beq.n	8000e14 <HAL_DMA_Abort_IT+0x90>
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4a1c      	ldr	r2, [pc, #112]	; (8000e64 <HAL_DMA_Abort_IT+0xe0>)
 8000df4:	4293      	cmp	r3, r2
 8000df6:	d00a      	beq.n	8000e0e <HAL_DMA_Abort_IT+0x8a>
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a1a      	ldr	r2, [pc, #104]	; (8000e68 <HAL_DMA_Abort_IT+0xe4>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d102      	bne.n	8000e08 <HAL_DMA_Abort_IT+0x84>
 8000e02:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000e06:	e00e      	b.n	8000e26 <HAL_DMA_Abort_IT+0xa2>
 8000e08:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000e0c:	e00b      	b.n	8000e26 <HAL_DMA_Abort_IT+0xa2>
 8000e0e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e12:	e008      	b.n	8000e26 <HAL_DMA_Abort_IT+0xa2>
 8000e14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e18:	e005      	b.n	8000e26 <HAL_DMA_Abort_IT+0xa2>
 8000e1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e1e:	e002      	b.n	8000e26 <HAL_DMA_Abort_IT+0xa2>
 8000e20:	2310      	movs	r3, #16
 8000e22:	e000      	b.n	8000e26 <HAL_DMA_Abort_IT+0xa2>
 8000e24:	2301      	movs	r3, #1
 8000e26:	4a11      	ldr	r2, [pc, #68]	; (8000e6c <HAL_DMA_Abort_IT+0xe8>)
 8000e28:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	2200      	movs	r2, #0
 8000e36:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d003      	beq.n	8000e4a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e46:	6878      	ldr	r0, [r7, #4]
 8000e48:	4798      	blx	r3
    } 
  }
  return status;
 8000e4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3710      	adds	r7, #16
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	40020008 	.word	0x40020008
 8000e58:	4002001c 	.word	0x4002001c
 8000e5c:	40020030 	.word	0x40020030
 8000e60:	40020044 	.word	0x40020044
 8000e64:	40020058 	.word	0x40020058
 8000e68:	4002006c 	.word	0x4002006c
 8000e6c:	40020000 	.word	0x40020000

08000e70 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b08b      	sub	sp, #44	; 0x2c
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
 8000e78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e82:	e161      	b.n	8001148 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000e84:	2201      	movs	r2, #1
 8000e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e88:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	69fa      	ldr	r2, [r7, #28]
 8000e94:	4013      	ands	r3, r2
 8000e96:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e98:	69ba      	ldr	r2, [r7, #24]
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	f040 8150 	bne.w	8001142 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	4a97      	ldr	r2, [pc, #604]	; (8001104 <HAL_GPIO_Init+0x294>)
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d05e      	beq.n	8000f6a <HAL_GPIO_Init+0xfa>
 8000eac:	4a95      	ldr	r2, [pc, #596]	; (8001104 <HAL_GPIO_Init+0x294>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d875      	bhi.n	8000f9e <HAL_GPIO_Init+0x12e>
 8000eb2:	4a95      	ldr	r2, [pc, #596]	; (8001108 <HAL_GPIO_Init+0x298>)
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d058      	beq.n	8000f6a <HAL_GPIO_Init+0xfa>
 8000eb8:	4a93      	ldr	r2, [pc, #588]	; (8001108 <HAL_GPIO_Init+0x298>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d86f      	bhi.n	8000f9e <HAL_GPIO_Init+0x12e>
 8000ebe:	4a93      	ldr	r2, [pc, #588]	; (800110c <HAL_GPIO_Init+0x29c>)
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d052      	beq.n	8000f6a <HAL_GPIO_Init+0xfa>
 8000ec4:	4a91      	ldr	r2, [pc, #580]	; (800110c <HAL_GPIO_Init+0x29c>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d869      	bhi.n	8000f9e <HAL_GPIO_Init+0x12e>
 8000eca:	4a91      	ldr	r2, [pc, #580]	; (8001110 <HAL_GPIO_Init+0x2a0>)
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d04c      	beq.n	8000f6a <HAL_GPIO_Init+0xfa>
 8000ed0:	4a8f      	ldr	r2, [pc, #572]	; (8001110 <HAL_GPIO_Init+0x2a0>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d863      	bhi.n	8000f9e <HAL_GPIO_Init+0x12e>
 8000ed6:	4a8f      	ldr	r2, [pc, #572]	; (8001114 <HAL_GPIO_Init+0x2a4>)
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d046      	beq.n	8000f6a <HAL_GPIO_Init+0xfa>
 8000edc:	4a8d      	ldr	r2, [pc, #564]	; (8001114 <HAL_GPIO_Init+0x2a4>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d85d      	bhi.n	8000f9e <HAL_GPIO_Init+0x12e>
 8000ee2:	2b12      	cmp	r3, #18
 8000ee4:	d82a      	bhi.n	8000f3c <HAL_GPIO_Init+0xcc>
 8000ee6:	2b12      	cmp	r3, #18
 8000ee8:	d859      	bhi.n	8000f9e <HAL_GPIO_Init+0x12e>
 8000eea:	a201      	add	r2, pc, #4	; (adr r2, 8000ef0 <HAL_GPIO_Init+0x80>)
 8000eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ef0:	08000f6b 	.word	0x08000f6b
 8000ef4:	08000f45 	.word	0x08000f45
 8000ef8:	08000f57 	.word	0x08000f57
 8000efc:	08000f99 	.word	0x08000f99
 8000f00:	08000f9f 	.word	0x08000f9f
 8000f04:	08000f9f 	.word	0x08000f9f
 8000f08:	08000f9f 	.word	0x08000f9f
 8000f0c:	08000f9f 	.word	0x08000f9f
 8000f10:	08000f9f 	.word	0x08000f9f
 8000f14:	08000f9f 	.word	0x08000f9f
 8000f18:	08000f9f 	.word	0x08000f9f
 8000f1c:	08000f9f 	.word	0x08000f9f
 8000f20:	08000f9f 	.word	0x08000f9f
 8000f24:	08000f9f 	.word	0x08000f9f
 8000f28:	08000f9f 	.word	0x08000f9f
 8000f2c:	08000f9f 	.word	0x08000f9f
 8000f30:	08000f9f 	.word	0x08000f9f
 8000f34:	08000f4d 	.word	0x08000f4d
 8000f38:	08000f61 	.word	0x08000f61
 8000f3c:	4a76      	ldr	r2, [pc, #472]	; (8001118 <HAL_GPIO_Init+0x2a8>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d013      	beq.n	8000f6a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000f42:	e02c      	b.n	8000f9e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	68db      	ldr	r3, [r3, #12]
 8000f48:	623b      	str	r3, [r7, #32]
          break;
 8000f4a:	e029      	b.n	8000fa0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	68db      	ldr	r3, [r3, #12]
 8000f50:	3304      	adds	r3, #4
 8000f52:	623b      	str	r3, [r7, #32]
          break;
 8000f54:	e024      	b.n	8000fa0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	68db      	ldr	r3, [r3, #12]
 8000f5a:	3308      	adds	r3, #8
 8000f5c:	623b      	str	r3, [r7, #32]
          break;
 8000f5e:	e01f      	b.n	8000fa0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	68db      	ldr	r3, [r3, #12]
 8000f64:	330c      	adds	r3, #12
 8000f66:	623b      	str	r3, [r7, #32]
          break;
 8000f68:	e01a      	b.n	8000fa0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	689b      	ldr	r3, [r3, #8]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d102      	bne.n	8000f78 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f72:	2304      	movs	r3, #4
 8000f74:	623b      	str	r3, [r7, #32]
          break;
 8000f76:	e013      	b.n	8000fa0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	689b      	ldr	r3, [r3, #8]
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	d105      	bne.n	8000f8c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f80:	2308      	movs	r3, #8
 8000f82:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	69fa      	ldr	r2, [r7, #28]
 8000f88:	611a      	str	r2, [r3, #16]
          break;
 8000f8a:	e009      	b.n	8000fa0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f8c:	2308      	movs	r3, #8
 8000f8e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	69fa      	ldr	r2, [r7, #28]
 8000f94:	615a      	str	r2, [r3, #20]
          break;
 8000f96:	e003      	b.n	8000fa0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	623b      	str	r3, [r7, #32]
          break;
 8000f9c:	e000      	b.n	8000fa0 <HAL_GPIO_Init+0x130>
          break;
 8000f9e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000fa0:	69bb      	ldr	r3, [r7, #24]
 8000fa2:	2bff      	cmp	r3, #255	; 0xff
 8000fa4:	d801      	bhi.n	8000faa <HAL_GPIO_Init+0x13a>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	e001      	b.n	8000fae <HAL_GPIO_Init+0x13e>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	3304      	adds	r3, #4
 8000fae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000fb0:	69bb      	ldr	r3, [r7, #24]
 8000fb2:	2bff      	cmp	r3, #255	; 0xff
 8000fb4:	d802      	bhi.n	8000fbc <HAL_GPIO_Init+0x14c>
 8000fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb8:	009b      	lsls	r3, r3, #2
 8000fba:	e002      	b.n	8000fc2 <HAL_GPIO_Init+0x152>
 8000fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fbe:	3b08      	subs	r3, #8
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	210f      	movs	r1, #15
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	fa01 f303 	lsl.w	r3, r1, r3
 8000fd0:	43db      	mvns	r3, r3
 8000fd2:	401a      	ands	r2, r3
 8000fd4:	6a39      	ldr	r1, [r7, #32]
 8000fd6:	693b      	ldr	r3, [r7, #16]
 8000fd8:	fa01 f303 	lsl.w	r3, r1, r3
 8000fdc:	431a      	orrs	r2, r3
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	f000 80a9 	beq.w	8001142 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ff0:	4b4a      	ldr	r3, [pc, #296]	; (800111c <HAL_GPIO_Init+0x2ac>)
 8000ff2:	699b      	ldr	r3, [r3, #24]
 8000ff4:	4a49      	ldr	r2, [pc, #292]	; (800111c <HAL_GPIO_Init+0x2ac>)
 8000ff6:	f043 0301 	orr.w	r3, r3, #1
 8000ffa:	6193      	str	r3, [r2, #24]
 8000ffc:	4b47      	ldr	r3, [pc, #284]	; (800111c <HAL_GPIO_Init+0x2ac>)
 8000ffe:	699b      	ldr	r3, [r3, #24]
 8001000:	f003 0301 	and.w	r3, r3, #1
 8001004:	60bb      	str	r3, [r7, #8]
 8001006:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001008:	4a45      	ldr	r2, [pc, #276]	; (8001120 <HAL_GPIO_Init+0x2b0>)
 800100a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800100c:	089b      	lsrs	r3, r3, #2
 800100e:	3302      	adds	r3, #2
 8001010:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001014:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001018:	f003 0303 	and.w	r3, r3, #3
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	220f      	movs	r2, #15
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	43db      	mvns	r3, r3
 8001026:	68fa      	ldr	r2, [r7, #12]
 8001028:	4013      	ands	r3, r2
 800102a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	4a3d      	ldr	r2, [pc, #244]	; (8001124 <HAL_GPIO_Init+0x2b4>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d00d      	beq.n	8001050 <HAL_GPIO_Init+0x1e0>
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	4a3c      	ldr	r2, [pc, #240]	; (8001128 <HAL_GPIO_Init+0x2b8>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d007      	beq.n	800104c <HAL_GPIO_Init+0x1dc>
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	4a3b      	ldr	r2, [pc, #236]	; (800112c <HAL_GPIO_Init+0x2bc>)
 8001040:	4293      	cmp	r3, r2
 8001042:	d101      	bne.n	8001048 <HAL_GPIO_Init+0x1d8>
 8001044:	2302      	movs	r3, #2
 8001046:	e004      	b.n	8001052 <HAL_GPIO_Init+0x1e2>
 8001048:	2303      	movs	r3, #3
 800104a:	e002      	b.n	8001052 <HAL_GPIO_Init+0x1e2>
 800104c:	2301      	movs	r3, #1
 800104e:	e000      	b.n	8001052 <HAL_GPIO_Init+0x1e2>
 8001050:	2300      	movs	r3, #0
 8001052:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001054:	f002 0203 	and.w	r2, r2, #3
 8001058:	0092      	lsls	r2, r2, #2
 800105a:	4093      	lsls	r3, r2
 800105c:	68fa      	ldr	r2, [r7, #12]
 800105e:	4313      	orrs	r3, r2
 8001060:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001062:	492f      	ldr	r1, [pc, #188]	; (8001120 <HAL_GPIO_Init+0x2b0>)
 8001064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001066:	089b      	lsrs	r3, r3, #2
 8001068:	3302      	adds	r3, #2
 800106a:	68fa      	ldr	r2, [r7, #12]
 800106c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001078:	2b00      	cmp	r3, #0
 800107a:	d006      	beq.n	800108a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800107c:	4b2c      	ldr	r3, [pc, #176]	; (8001130 <HAL_GPIO_Init+0x2c0>)
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	492b      	ldr	r1, [pc, #172]	; (8001130 <HAL_GPIO_Init+0x2c0>)
 8001082:	69bb      	ldr	r3, [r7, #24]
 8001084:	4313      	orrs	r3, r2
 8001086:	600b      	str	r3, [r1, #0]
 8001088:	e006      	b.n	8001098 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800108a:	4b29      	ldr	r3, [pc, #164]	; (8001130 <HAL_GPIO_Init+0x2c0>)
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	69bb      	ldr	r3, [r7, #24]
 8001090:	43db      	mvns	r3, r3
 8001092:	4927      	ldr	r1, [pc, #156]	; (8001130 <HAL_GPIO_Init+0x2c0>)
 8001094:	4013      	ands	r3, r2
 8001096:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d006      	beq.n	80010b2 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80010a4:	4b22      	ldr	r3, [pc, #136]	; (8001130 <HAL_GPIO_Init+0x2c0>)
 80010a6:	685a      	ldr	r2, [r3, #4]
 80010a8:	4921      	ldr	r1, [pc, #132]	; (8001130 <HAL_GPIO_Init+0x2c0>)
 80010aa:	69bb      	ldr	r3, [r7, #24]
 80010ac:	4313      	orrs	r3, r2
 80010ae:	604b      	str	r3, [r1, #4]
 80010b0:	e006      	b.n	80010c0 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80010b2:	4b1f      	ldr	r3, [pc, #124]	; (8001130 <HAL_GPIO_Init+0x2c0>)
 80010b4:	685a      	ldr	r2, [r3, #4]
 80010b6:	69bb      	ldr	r3, [r7, #24]
 80010b8:	43db      	mvns	r3, r3
 80010ba:	491d      	ldr	r1, [pc, #116]	; (8001130 <HAL_GPIO_Init+0x2c0>)
 80010bc:	4013      	ands	r3, r2
 80010be:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d006      	beq.n	80010da <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80010cc:	4b18      	ldr	r3, [pc, #96]	; (8001130 <HAL_GPIO_Init+0x2c0>)
 80010ce:	689a      	ldr	r2, [r3, #8]
 80010d0:	4917      	ldr	r1, [pc, #92]	; (8001130 <HAL_GPIO_Init+0x2c0>)
 80010d2:	69bb      	ldr	r3, [r7, #24]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	608b      	str	r3, [r1, #8]
 80010d8:	e006      	b.n	80010e8 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80010da:	4b15      	ldr	r3, [pc, #84]	; (8001130 <HAL_GPIO_Init+0x2c0>)
 80010dc:	689a      	ldr	r2, [r3, #8]
 80010de:	69bb      	ldr	r3, [r7, #24]
 80010e0:	43db      	mvns	r3, r3
 80010e2:	4913      	ldr	r1, [pc, #76]	; (8001130 <HAL_GPIO_Init+0x2c0>)
 80010e4:	4013      	ands	r3, r2
 80010e6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d01f      	beq.n	8001134 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80010f4:	4b0e      	ldr	r3, [pc, #56]	; (8001130 <HAL_GPIO_Init+0x2c0>)
 80010f6:	68da      	ldr	r2, [r3, #12]
 80010f8:	490d      	ldr	r1, [pc, #52]	; (8001130 <HAL_GPIO_Init+0x2c0>)
 80010fa:	69bb      	ldr	r3, [r7, #24]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	60cb      	str	r3, [r1, #12]
 8001100:	e01f      	b.n	8001142 <HAL_GPIO_Init+0x2d2>
 8001102:	bf00      	nop
 8001104:	10320000 	.word	0x10320000
 8001108:	10310000 	.word	0x10310000
 800110c:	10220000 	.word	0x10220000
 8001110:	10210000 	.word	0x10210000
 8001114:	10120000 	.word	0x10120000
 8001118:	10110000 	.word	0x10110000
 800111c:	40021000 	.word	0x40021000
 8001120:	40010000 	.word	0x40010000
 8001124:	40010800 	.word	0x40010800
 8001128:	40010c00 	.word	0x40010c00
 800112c:	40011000 	.word	0x40011000
 8001130:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001134:	4b0b      	ldr	r3, [pc, #44]	; (8001164 <HAL_GPIO_Init+0x2f4>)
 8001136:	68da      	ldr	r2, [r3, #12]
 8001138:	69bb      	ldr	r3, [r7, #24]
 800113a:	43db      	mvns	r3, r3
 800113c:	4909      	ldr	r1, [pc, #36]	; (8001164 <HAL_GPIO_Init+0x2f4>)
 800113e:	4013      	ands	r3, r2
 8001140:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001144:	3301      	adds	r3, #1
 8001146:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800114e:	fa22 f303 	lsr.w	r3, r2, r3
 8001152:	2b00      	cmp	r3, #0
 8001154:	f47f ae96 	bne.w	8000e84 <HAL_GPIO_Init+0x14>
  }
}
 8001158:	bf00      	nop
 800115a:	bf00      	nop
 800115c:	372c      	adds	r7, #44	; 0x2c
 800115e:	46bd      	mov	sp, r7
 8001160:	bc80      	pop	{r7}
 8001162:	4770      	bx	lr
 8001164:	40010400 	.word	0x40010400

08001168 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	460b      	mov	r3, r1
 8001172:	807b      	strh	r3, [r7, #2]
 8001174:	4613      	mov	r3, r2
 8001176:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001178:	787b      	ldrb	r3, [r7, #1]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d003      	beq.n	8001186 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800117e:	887a      	ldrh	r2, [r7, #2]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001184:	e003      	b.n	800118e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001186:	887b      	ldrh	r3, [r7, #2]
 8001188:	041a      	lsls	r2, r3, #16
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	611a      	str	r2, [r3, #16]
}
 800118e:	bf00      	nop
 8001190:	370c      	adds	r7, #12
 8001192:	46bd      	mov	sp, r7
 8001194:	bc80      	pop	{r7}
 8001196:	4770      	bx	lr

08001198 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001198:	b480      	push	{r7}
 800119a:	b085      	sub	sp, #20
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	460b      	mov	r3, r1
 80011a2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011aa:	887a      	ldrh	r2, [r7, #2]
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	4013      	ands	r3, r2
 80011b0:	041a      	lsls	r2, r3, #16
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	43d9      	mvns	r1, r3
 80011b6:	887b      	ldrh	r3, [r7, #2]
 80011b8:	400b      	ands	r3, r1
 80011ba:	431a      	orrs	r2, r3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	611a      	str	r2, [r3, #16]
}
 80011c0:	bf00      	nop
 80011c2:	3714      	adds	r7, #20
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bc80      	pop	{r7}
 80011c8:	4770      	bx	lr
	...

080011cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b086      	sub	sp, #24
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d101      	bne.n	80011de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	e272      	b.n	80016c4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f003 0301 	and.w	r3, r3, #1
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	f000 8087 	beq.w	80012fa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80011ec:	4b92      	ldr	r3, [pc, #584]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f003 030c 	and.w	r3, r3, #12
 80011f4:	2b04      	cmp	r3, #4
 80011f6:	d00c      	beq.n	8001212 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80011f8:	4b8f      	ldr	r3, [pc, #572]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f003 030c 	and.w	r3, r3, #12
 8001200:	2b08      	cmp	r3, #8
 8001202:	d112      	bne.n	800122a <HAL_RCC_OscConfig+0x5e>
 8001204:	4b8c      	ldr	r3, [pc, #560]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800120c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001210:	d10b      	bne.n	800122a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001212:	4b89      	ldr	r3, [pc, #548]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800121a:	2b00      	cmp	r3, #0
 800121c:	d06c      	beq.n	80012f8 <HAL_RCC_OscConfig+0x12c>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d168      	bne.n	80012f8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001226:	2301      	movs	r3, #1
 8001228:	e24c      	b.n	80016c4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001232:	d106      	bne.n	8001242 <HAL_RCC_OscConfig+0x76>
 8001234:	4b80      	ldr	r3, [pc, #512]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a7f      	ldr	r2, [pc, #508]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 800123a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800123e:	6013      	str	r3, [r2, #0]
 8001240:	e02e      	b.n	80012a0 <HAL_RCC_OscConfig+0xd4>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d10c      	bne.n	8001264 <HAL_RCC_OscConfig+0x98>
 800124a:	4b7b      	ldr	r3, [pc, #492]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a7a      	ldr	r2, [pc, #488]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 8001250:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001254:	6013      	str	r3, [r2, #0]
 8001256:	4b78      	ldr	r3, [pc, #480]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a77      	ldr	r2, [pc, #476]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 800125c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001260:	6013      	str	r3, [r2, #0]
 8001262:	e01d      	b.n	80012a0 <HAL_RCC_OscConfig+0xd4>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800126c:	d10c      	bne.n	8001288 <HAL_RCC_OscConfig+0xbc>
 800126e:	4b72      	ldr	r3, [pc, #456]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a71      	ldr	r2, [pc, #452]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 8001274:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001278:	6013      	str	r3, [r2, #0]
 800127a:	4b6f      	ldr	r3, [pc, #444]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a6e      	ldr	r2, [pc, #440]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 8001280:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001284:	6013      	str	r3, [r2, #0]
 8001286:	e00b      	b.n	80012a0 <HAL_RCC_OscConfig+0xd4>
 8001288:	4b6b      	ldr	r3, [pc, #428]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a6a      	ldr	r2, [pc, #424]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 800128e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001292:	6013      	str	r3, [r2, #0]
 8001294:	4b68      	ldr	r3, [pc, #416]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a67      	ldr	r2, [pc, #412]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 800129a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800129e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d013      	beq.n	80012d0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012a8:	f7ff f9e4 	bl	8000674 <HAL_GetTick>
 80012ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ae:	e008      	b.n	80012c2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012b0:	f7ff f9e0 	bl	8000674 <HAL_GetTick>
 80012b4:	4602      	mov	r2, r0
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	2b64      	cmp	r3, #100	; 0x64
 80012bc:	d901      	bls.n	80012c2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80012be:	2303      	movs	r3, #3
 80012c0:	e200      	b.n	80016c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012c2:	4b5d      	ldr	r3, [pc, #372]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d0f0      	beq.n	80012b0 <HAL_RCC_OscConfig+0xe4>
 80012ce:	e014      	b.n	80012fa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012d0:	f7ff f9d0 	bl	8000674 <HAL_GetTick>
 80012d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012d6:	e008      	b.n	80012ea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012d8:	f7ff f9cc 	bl	8000674 <HAL_GetTick>
 80012dc:	4602      	mov	r2, r0
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	2b64      	cmp	r3, #100	; 0x64
 80012e4:	d901      	bls.n	80012ea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80012e6:	2303      	movs	r3, #3
 80012e8:	e1ec      	b.n	80016c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012ea:	4b53      	ldr	r3, [pc, #332]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d1f0      	bne.n	80012d8 <HAL_RCC_OscConfig+0x10c>
 80012f6:	e000      	b.n	80012fa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f003 0302 	and.w	r3, r3, #2
 8001302:	2b00      	cmp	r3, #0
 8001304:	d063      	beq.n	80013ce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001306:	4b4c      	ldr	r3, [pc, #304]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	f003 030c 	and.w	r3, r3, #12
 800130e:	2b00      	cmp	r3, #0
 8001310:	d00b      	beq.n	800132a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001312:	4b49      	ldr	r3, [pc, #292]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	f003 030c 	and.w	r3, r3, #12
 800131a:	2b08      	cmp	r3, #8
 800131c:	d11c      	bne.n	8001358 <HAL_RCC_OscConfig+0x18c>
 800131e:	4b46      	ldr	r3, [pc, #280]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001326:	2b00      	cmp	r3, #0
 8001328:	d116      	bne.n	8001358 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800132a:	4b43      	ldr	r3, [pc, #268]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f003 0302 	and.w	r3, r3, #2
 8001332:	2b00      	cmp	r3, #0
 8001334:	d005      	beq.n	8001342 <HAL_RCC_OscConfig+0x176>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	691b      	ldr	r3, [r3, #16]
 800133a:	2b01      	cmp	r3, #1
 800133c:	d001      	beq.n	8001342 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	e1c0      	b.n	80016c4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001342:	4b3d      	ldr	r3, [pc, #244]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	695b      	ldr	r3, [r3, #20]
 800134e:	00db      	lsls	r3, r3, #3
 8001350:	4939      	ldr	r1, [pc, #228]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 8001352:	4313      	orrs	r3, r2
 8001354:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001356:	e03a      	b.n	80013ce <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	691b      	ldr	r3, [r3, #16]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d020      	beq.n	80013a2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001360:	4b36      	ldr	r3, [pc, #216]	; (800143c <HAL_RCC_OscConfig+0x270>)
 8001362:	2201      	movs	r2, #1
 8001364:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001366:	f7ff f985 	bl	8000674 <HAL_GetTick>
 800136a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800136c:	e008      	b.n	8001380 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800136e:	f7ff f981 	bl	8000674 <HAL_GetTick>
 8001372:	4602      	mov	r2, r0
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	2b02      	cmp	r3, #2
 800137a:	d901      	bls.n	8001380 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800137c:	2303      	movs	r3, #3
 800137e:	e1a1      	b.n	80016c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001380:	4b2d      	ldr	r3, [pc, #180]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f003 0302 	and.w	r3, r3, #2
 8001388:	2b00      	cmp	r3, #0
 800138a:	d0f0      	beq.n	800136e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800138c:	4b2a      	ldr	r3, [pc, #168]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	695b      	ldr	r3, [r3, #20]
 8001398:	00db      	lsls	r3, r3, #3
 800139a:	4927      	ldr	r1, [pc, #156]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 800139c:	4313      	orrs	r3, r2
 800139e:	600b      	str	r3, [r1, #0]
 80013a0:	e015      	b.n	80013ce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013a2:	4b26      	ldr	r3, [pc, #152]	; (800143c <HAL_RCC_OscConfig+0x270>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a8:	f7ff f964 	bl	8000674 <HAL_GetTick>
 80013ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013ae:	e008      	b.n	80013c2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013b0:	f7ff f960 	bl	8000674 <HAL_GetTick>
 80013b4:	4602      	mov	r2, r0
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	2b02      	cmp	r3, #2
 80013bc:	d901      	bls.n	80013c2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80013be:	2303      	movs	r3, #3
 80013c0:	e180      	b.n	80016c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013c2:	4b1d      	ldr	r3, [pc, #116]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 0302 	and.w	r3, r3, #2
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d1f0      	bne.n	80013b0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f003 0308 	and.w	r3, r3, #8
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d03a      	beq.n	8001450 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	699b      	ldr	r3, [r3, #24]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d019      	beq.n	8001416 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013e2:	4b17      	ldr	r3, [pc, #92]	; (8001440 <HAL_RCC_OscConfig+0x274>)
 80013e4:	2201      	movs	r2, #1
 80013e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013e8:	f7ff f944 	bl	8000674 <HAL_GetTick>
 80013ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013ee:	e008      	b.n	8001402 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013f0:	f7ff f940 	bl	8000674 <HAL_GetTick>
 80013f4:	4602      	mov	r2, r0
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	2b02      	cmp	r3, #2
 80013fc:	d901      	bls.n	8001402 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80013fe:	2303      	movs	r3, #3
 8001400:	e160      	b.n	80016c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001402:	4b0d      	ldr	r3, [pc, #52]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 8001404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001406:	f003 0302 	and.w	r3, r3, #2
 800140a:	2b00      	cmp	r3, #0
 800140c:	d0f0      	beq.n	80013f0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800140e:	2001      	movs	r0, #1
 8001410:	f000 fad8 	bl	80019c4 <RCC_Delay>
 8001414:	e01c      	b.n	8001450 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001416:	4b0a      	ldr	r3, [pc, #40]	; (8001440 <HAL_RCC_OscConfig+0x274>)
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800141c:	f7ff f92a 	bl	8000674 <HAL_GetTick>
 8001420:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001422:	e00f      	b.n	8001444 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001424:	f7ff f926 	bl	8000674 <HAL_GetTick>
 8001428:	4602      	mov	r2, r0
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	2b02      	cmp	r3, #2
 8001430:	d908      	bls.n	8001444 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001432:	2303      	movs	r3, #3
 8001434:	e146      	b.n	80016c4 <HAL_RCC_OscConfig+0x4f8>
 8001436:	bf00      	nop
 8001438:	40021000 	.word	0x40021000
 800143c:	42420000 	.word	0x42420000
 8001440:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001444:	4b92      	ldr	r3, [pc, #584]	; (8001690 <HAL_RCC_OscConfig+0x4c4>)
 8001446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001448:	f003 0302 	and.w	r3, r3, #2
 800144c:	2b00      	cmp	r3, #0
 800144e:	d1e9      	bne.n	8001424 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f003 0304 	and.w	r3, r3, #4
 8001458:	2b00      	cmp	r3, #0
 800145a:	f000 80a6 	beq.w	80015aa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800145e:	2300      	movs	r3, #0
 8001460:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001462:	4b8b      	ldr	r3, [pc, #556]	; (8001690 <HAL_RCC_OscConfig+0x4c4>)
 8001464:	69db      	ldr	r3, [r3, #28]
 8001466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d10d      	bne.n	800148a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800146e:	4b88      	ldr	r3, [pc, #544]	; (8001690 <HAL_RCC_OscConfig+0x4c4>)
 8001470:	69db      	ldr	r3, [r3, #28]
 8001472:	4a87      	ldr	r2, [pc, #540]	; (8001690 <HAL_RCC_OscConfig+0x4c4>)
 8001474:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001478:	61d3      	str	r3, [r2, #28]
 800147a:	4b85      	ldr	r3, [pc, #532]	; (8001690 <HAL_RCC_OscConfig+0x4c4>)
 800147c:	69db      	ldr	r3, [r3, #28]
 800147e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001482:	60bb      	str	r3, [r7, #8]
 8001484:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001486:	2301      	movs	r3, #1
 8001488:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800148a:	4b82      	ldr	r3, [pc, #520]	; (8001694 <HAL_RCC_OscConfig+0x4c8>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001492:	2b00      	cmp	r3, #0
 8001494:	d118      	bne.n	80014c8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001496:	4b7f      	ldr	r3, [pc, #508]	; (8001694 <HAL_RCC_OscConfig+0x4c8>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a7e      	ldr	r2, [pc, #504]	; (8001694 <HAL_RCC_OscConfig+0x4c8>)
 800149c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014a2:	f7ff f8e7 	bl	8000674 <HAL_GetTick>
 80014a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014a8:	e008      	b.n	80014bc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014aa:	f7ff f8e3 	bl	8000674 <HAL_GetTick>
 80014ae:	4602      	mov	r2, r0
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	1ad3      	subs	r3, r2, r3
 80014b4:	2b64      	cmp	r3, #100	; 0x64
 80014b6:	d901      	bls.n	80014bc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80014b8:	2303      	movs	r3, #3
 80014ba:	e103      	b.n	80016c4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014bc:	4b75      	ldr	r3, [pc, #468]	; (8001694 <HAL_RCC_OscConfig+0x4c8>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d0f0      	beq.n	80014aa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d106      	bne.n	80014de <HAL_RCC_OscConfig+0x312>
 80014d0:	4b6f      	ldr	r3, [pc, #444]	; (8001690 <HAL_RCC_OscConfig+0x4c4>)
 80014d2:	6a1b      	ldr	r3, [r3, #32]
 80014d4:	4a6e      	ldr	r2, [pc, #440]	; (8001690 <HAL_RCC_OscConfig+0x4c4>)
 80014d6:	f043 0301 	orr.w	r3, r3, #1
 80014da:	6213      	str	r3, [r2, #32]
 80014dc:	e02d      	b.n	800153a <HAL_RCC_OscConfig+0x36e>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	68db      	ldr	r3, [r3, #12]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d10c      	bne.n	8001500 <HAL_RCC_OscConfig+0x334>
 80014e6:	4b6a      	ldr	r3, [pc, #424]	; (8001690 <HAL_RCC_OscConfig+0x4c4>)
 80014e8:	6a1b      	ldr	r3, [r3, #32]
 80014ea:	4a69      	ldr	r2, [pc, #420]	; (8001690 <HAL_RCC_OscConfig+0x4c4>)
 80014ec:	f023 0301 	bic.w	r3, r3, #1
 80014f0:	6213      	str	r3, [r2, #32]
 80014f2:	4b67      	ldr	r3, [pc, #412]	; (8001690 <HAL_RCC_OscConfig+0x4c4>)
 80014f4:	6a1b      	ldr	r3, [r3, #32]
 80014f6:	4a66      	ldr	r2, [pc, #408]	; (8001690 <HAL_RCC_OscConfig+0x4c4>)
 80014f8:	f023 0304 	bic.w	r3, r3, #4
 80014fc:	6213      	str	r3, [r2, #32]
 80014fe:	e01c      	b.n	800153a <HAL_RCC_OscConfig+0x36e>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	2b05      	cmp	r3, #5
 8001506:	d10c      	bne.n	8001522 <HAL_RCC_OscConfig+0x356>
 8001508:	4b61      	ldr	r3, [pc, #388]	; (8001690 <HAL_RCC_OscConfig+0x4c4>)
 800150a:	6a1b      	ldr	r3, [r3, #32]
 800150c:	4a60      	ldr	r2, [pc, #384]	; (8001690 <HAL_RCC_OscConfig+0x4c4>)
 800150e:	f043 0304 	orr.w	r3, r3, #4
 8001512:	6213      	str	r3, [r2, #32]
 8001514:	4b5e      	ldr	r3, [pc, #376]	; (8001690 <HAL_RCC_OscConfig+0x4c4>)
 8001516:	6a1b      	ldr	r3, [r3, #32]
 8001518:	4a5d      	ldr	r2, [pc, #372]	; (8001690 <HAL_RCC_OscConfig+0x4c4>)
 800151a:	f043 0301 	orr.w	r3, r3, #1
 800151e:	6213      	str	r3, [r2, #32]
 8001520:	e00b      	b.n	800153a <HAL_RCC_OscConfig+0x36e>
 8001522:	4b5b      	ldr	r3, [pc, #364]	; (8001690 <HAL_RCC_OscConfig+0x4c4>)
 8001524:	6a1b      	ldr	r3, [r3, #32]
 8001526:	4a5a      	ldr	r2, [pc, #360]	; (8001690 <HAL_RCC_OscConfig+0x4c4>)
 8001528:	f023 0301 	bic.w	r3, r3, #1
 800152c:	6213      	str	r3, [r2, #32]
 800152e:	4b58      	ldr	r3, [pc, #352]	; (8001690 <HAL_RCC_OscConfig+0x4c4>)
 8001530:	6a1b      	ldr	r3, [r3, #32]
 8001532:	4a57      	ldr	r2, [pc, #348]	; (8001690 <HAL_RCC_OscConfig+0x4c4>)
 8001534:	f023 0304 	bic.w	r3, r3, #4
 8001538:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	68db      	ldr	r3, [r3, #12]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d015      	beq.n	800156e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001542:	f7ff f897 	bl	8000674 <HAL_GetTick>
 8001546:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001548:	e00a      	b.n	8001560 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800154a:	f7ff f893 	bl	8000674 <HAL_GetTick>
 800154e:	4602      	mov	r2, r0
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	1ad3      	subs	r3, r2, r3
 8001554:	f241 3288 	movw	r2, #5000	; 0x1388
 8001558:	4293      	cmp	r3, r2
 800155a:	d901      	bls.n	8001560 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800155c:	2303      	movs	r3, #3
 800155e:	e0b1      	b.n	80016c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001560:	4b4b      	ldr	r3, [pc, #300]	; (8001690 <HAL_RCC_OscConfig+0x4c4>)
 8001562:	6a1b      	ldr	r3, [r3, #32]
 8001564:	f003 0302 	and.w	r3, r3, #2
 8001568:	2b00      	cmp	r3, #0
 800156a:	d0ee      	beq.n	800154a <HAL_RCC_OscConfig+0x37e>
 800156c:	e014      	b.n	8001598 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800156e:	f7ff f881 	bl	8000674 <HAL_GetTick>
 8001572:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001574:	e00a      	b.n	800158c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001576:	f7ff f87d 	bl	8000674 <HAL_GetTick>
 800157a:	4602      	mov	r2, r0
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	1ad3      	subs	r3, r2, r3
 8001580:	f241 3288 	movw	r2, #5000	; 0x1388
 8001584:	4293      	cmp	r3, r2
 8001586:	d901      	bls.n	800158c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001588:	2303      	movs	r3, #3
 800158a:	e09b      	b.n	80016c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800158c:	4b40      	ldr	r3, [pc, #256]	; (8001690 <HAL_RCC_OscConfig+0x4c4>)
 800158e:	6a1b      	ldr	r3, [r3, #32]
 8001590:	f003 0302 	and.w	r3, r3, #2
 8001594:	2b00      	cmp	r3, #0
 8001596:	d1ee      	bne.n	8001576 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001598:	7dfb      	ldrb	r3, [r7, #23]
 800159a:	2b01      	cmp	r3, #1
 800159c:	d105      	bne.n	80015aa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800159e:	4b3c      	ldr	r3, [pc, #240]	; (8001690 <HAL_RCC_OscConfig+0x4c4>)
 80015a0:	69db      	ldr	r3, [r3, #28]
 80015a2:	4a3b      	ldr	r2, [pc, #236]	; (8001690 <HAL_RCC_OscConfig+0x4c4>)
 80015a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015a8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	69db      	ldr	r3, [r3, #28]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	f000 8087 	beq.w	80016c2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015b4:	4b36      	ldr	r3, [pc, #216]	; (8001690 <HAL_RCC_OscConfig+0x4c4>)
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f003 030c 	and.w	r3, r3, #12
 80015bc:	2b08      	cmp	r3, #8
 80015be:	d061      	beq.n	8001684 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	69db      	ldr	r3, [r3, #28]
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	d146      	bne.n	8001656 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015c8:	4b33      	ldr	r3, [pc, #204]	; (8001698 <HAL_RCC_OscConfig+0x4cc>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ce:	f7ff f851 	bl	8000674 <HAL_GetTick>
 80015d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015d4:	e008      	b.n	80015e8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015d6:	f7ff f84d 	bl	8000674 <HAL_GetTick>
 80015da:	4602      	mov	r2, r0
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	d901      	bls.n	80015e8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80015e4:	2303      	movs	r3, #3
 80015e6:	e06d      	b.n	80016c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015e8:	4b29      	ldr	r3, [pc, #164]	; (8001690 <HAL_RCC_OscConfig+0x4c4>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d1f0      	bne.n	80015d6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6a1b      	ldr	r3, [r3, #32]
 80015f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015fc:	d108      	bne.n	8001610 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80015fe:	4b24      	ldr	r3, [pc, #144]	; (8001690 <HAL_RCC_OscConfig+0x4c4>)
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	4921      	ldr	r1, [pc, #132]	; (8001690 <HAL_RCC_OscConfig+0x4c4>)
 800160c:	4313      	orrs	r3, r2
 800160e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001610:	4b1f      	ldr	r3, [pc, #124]	; (8001690 <HAL_RCC_OscConfig+0x4c4>)
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6a19      	ldr	r1, [r3, #32]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001620:	430b      	orrs	r3, r1
 8001622:	491b      	ldr	r1, [pc, #108]	; (8001690 <HAL_RCC_OscConfig+0x4c4>)
 8001624:	4313      	orrs	r3, r2
 8001626:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001628:	4b1b      	ldr	r3, [pc, #108]	; (8001698 <HAL_RCC_OscConfig+0x4cc>)
 800162a:	2201      	movs	r2, #1
 800162c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800162e:	f7ff f821 	bl	8000674 <HAL_GetTick>
 8001632:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001634:	e008      	b.n	8001648 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001636:	f7ff f81d 	bl	8000674 <HAL_GetTick>
 800163a:	4602      	mov	r2, r0
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	1ad3      	subs	r3, r2, r3
 8001640:	2b02      	cmp	r3, #2
 8001642:	d901      	bls.n	8001648 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001644:	2303      	movs	r3, #3
 8001646:	e03d      	b.n	80016c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001648:	4b11      	ldr	r3, [pc, #68]	; (8001690 <HAL_RCC_OscConfig+0x4c4>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001650:	2b00      	cmp	r3, #0
 8001652:	d0f0      	beq.n	8001636 <HAL_RCC_OscConfig+0x46a>
 8001654:	e035      	b.n	80016c2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001656:	4b10      	ldr	r3, [pc, #64]	; (8001698 <HAL_RCC_OscConfig+0x4cc>)
 8001658:	2200      	movs	r2, #0
 800165a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800165c:	f7ff f80a 	bl	8000674 <HAL_GetTick>
 8001660:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001662:	e008      	b.n	8001676 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001664:	f7ff f806 	bl	8000674 <HAL_GetTick>
 8001668:	4602      	mov	r2, r0
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	2b02      	cmp	r3, #2
 8001670:	d901      	bls.n	8001676 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001672:	2303      	movs	r3, #3
 8001674:	e026      	b.n	80016c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001676:	4b06      	ldr	r3, [pc, #24]	; (8001690 <HAL_RCC_OscConfig+0x4c4>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d1f0      	bne.n	8001664 <HAL_RCC_OscConfig+0x498>
 8001682:	e01e      	b.n	80016c2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	69db      	ldr	r3, [r3, #28]
 8001688:	2b01      	cmp	r3, #1
 800168a:	d107      	bne.n	800169c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800168c:	2301      	movs	r3, #1
 800168e:	e019      	b.n	80016c4 <HAL_RCC_OscConfig+0x4f8>
 8001690:	40021000 	.word	0x40021000
 8001694:	40007000 	.word	0x40007000
 8001698:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800169c:	4b0b      	ldr	r3, [pc, #44]	; (80016cc <HAL_RCC_OscConfig+0x500>)
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6a1b      	ldr	r3, [r3, #32]
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d106      	bne.n	80016be <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016ba:	429a      	cmp	r2, r3
 80016bc:	d001      	beq.n	80016c2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e000      	b.n	80016c4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80016c2:	2300      	movs	r3, #0
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3718      	adds	r7, #24
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	40021000 	.word	0x40021000

080016d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d101      	bne.n	80016e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	e0d0      	b.n	8001886 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80016e4:	4b6a      	ldr	r3, [pc, #424]	; (8001890 <HAL_RCC_ClockConfig+0x1c0>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f003 0307 	and.w	r3, r3, #7
 80016ec:	683a      	ldr	r2, [r7, #0]
 80016ee:	429a      	cmp	r2, r3
 80016f0:	d910      	bls.n	8001714 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016f2:	4b67      	ldr	r3, [pc, #412]	; (8001890 <HAL_RCC_ClockConfig+0x1c0>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f023 0207 	bic.w	r2, r3, #7
 80016fa:	4965      	ldr	r1, [pc, #404]	; (8001890 <HAL_RCC_ClockConfig+0x1c0>)
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	4313      	orrs	r3, r2
 8001700:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001702:	4b63      	ldr	r3, [pc, #396]	; (8001890 <HAL_RCC_ClockConfig+0x1c0>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 0307 	and.w	r3, r3, #7
 800170a:	683a      	ldr	r2, [r7, #0]
 800170c:	429a      	cmp	r2, r3
 800170e:	d001      	beq.n	8001714 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	e0b8      	b.n	8001886 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 0302 	and.w	r3, r3, #2
 800171c:	2b00      	cmp	r3, #0
 800171e:	d020      	beq.n	8001762 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f003 0304 	and.w	r3, r3, #4
 8001728:	2b00      	cmp	r3, #0
 800172a:	d005      	beq.n	8001738 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800172c:	4b59      	ldr	r3, [pc, #356]	; (8001894 <HAL_RCC_ClockConfig+0x1c4>)
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	4a58      	ldr	r2, [pc, #352]	; (8001894 <HAL_RCC_ClockConfig+0x1c4>)
 8001732:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001736:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 0308 	and.w	r3, r3, #8
 8001740:	2b00      	cmp	r3, #0
 8001742:	d005      	beq.n	8001750 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001744:	4b53      	ldr	r3, [pc, #332]	; (8001894 <HAL_RCC_ClockConfig+0x1c4>)
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	4a52      	ldr	r2, [pc, #328]	; (8001894 <HAL_RCC_ClockConfig+0x1c4>)
 800174a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800174e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001750:	4b50      	ldr	r3, [pc, #320]	; (8001894 <HAL_RCC_ClockConfig+0x1c4>)
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	494d      	ldr	r1, [pc, #308]	; (8001894 <HAL_RCC_ClockConfig+0x1c4>)
 800175e:	4313      	orrs	r3, r2
 8001760:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 0301 	and.w	r3, r3, #1
 800176a:	2b00      	cmp	r3, #0
 800176c:	d040      	beq.n	80017f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	2b01      	cmp	r3, #1
 8001774:	d107      	bne.n	8001786 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001776:	4b47      	ldr	r3, [pc, #284]	; (8001894 <HAL_RCC_ClockConfig+0x1c4>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d115      	bne.n	80017ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e07f      	b.n	8001886 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	2b02      	cmp	r3, #2
 800178c:	d107      	bne.n	800179e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800178e:	4b41      	ldr	r3, [pc, #260]	; (8001894 <HAL_RCC_ClockConfig+0x1c4>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d109      	bne.n	80017ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e073      	b.n	8001886 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800179e:	4b3d      	ldr	r3, [pc, #244]	; (8001894 <HAL_RCC_ClockConfig+0x1c4>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 0302 	and.w	r3, r3, #2
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d101      	bne.n	80017ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e06b      	b.n	8001886 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017ae:	4b39      	ldr	r3, [pc, #228]	; (8001894 <HAL_RCC_ClockConfig+0x1c4>)
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f023 0203 	bic.w	r2, r3, #3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	4936      	ldr	r1, [pc, #216]	; (8001894 <HAL_RCC_ClockConfig+0x1c4>)
 80017bc:	4313      	orrs	r3, r2
 80017be:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017c0:	f7fe ff58 	bl	8000674 <HAL_GetTick>
 80017c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017c6:	e00a      	b.n	80017de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017c8:	f7fe ff54 	bl	8000674 <HAL_GetTick>
 80017cc:	4602      	mov	r2, r0
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d901      	bls.n	80017de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e053      	b.n	8001886 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017de:	4b2d      	ldr	r3, [pc, #180]	; (8001894 <HAL_RCC_ClockConfig+0x1c4>)
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	f003 020c 	and.w	r2, r3, #12
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d1eb      	bne.n	80017c8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80017f0:	4b27      	ldr	r3, [pc, #156]	; (8001890 <HAL_RCC_ClockConfig+0x1c0>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 0307 	and.w	r3, r3, #7
 80017f8:	683a      	ldr	r2, [r7, #0]
 80017fa:	429a      	cmp	r2, r3
 80017fc:	d210      	bcs.n	8001820 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017fe:	4b24      	ldr	r3, [pc, #144]	; (8001890 <HAL_RCC_ClockConfig+0x1c0>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f023 0207 	bic.w	r2, r3, #7
 8001806:	4922      	ldr	r1, [pc, #136]	; (8001890 <HAL_RCC_ClockConfig+0x1c0>)
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	4313      	orrs	r3, r2
 800180c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800180e:	4b20      	ldr	r3, [pc, #128]	; (8001890 <HAL_RCC_ClockConfig+0x1c0>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0307 	and.w	r3, r3, #7
 8001816:	683a      	ldr	r2, [r7, #0]
 8001818:	429a      	cmp	r2, r3
 800181a:	d001      	beq.n	8001820 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e032      	b.n	8001886 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 0304 	and.w	r3, r3, #4
 8001828:	2b00      	cmp	r3, #0
 800182a:	d008      	beq.n	800183e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800182c:	4b19      	ldr	r3, [pc, #100]	; (8001894 <HAL_RCC_ClockConfig+0x1c4>)
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	4916      	ldr	r1, [pc, #88]	; (8001894 <HAL_RCC_ClockConfig+0x1c4>)
 800183a:	4313      	orrs	r3, r2
 800183c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0308 	and.w	r3, r3, #8
 8001846:	2b00      	cmp	r3, #0
 8001848:	d009      	beq.n	800185e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800184a:	4b12      	ldr	r3, [pc, #72]	; (8001894 <HAL_RCC_ClockConfig+0x1c4>)
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	691b      	ldr	r3, [r3, #16]
 8001856:	00db      	lsls	r3, r3, #3
 8001858:	490e      	ldr	r1, [pc, #56]	; (8001894 <HAL_RCC_ClockConfig+0x1c4>)
 800185a:	4313      	orrs	r3, r2
 800185c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800185e:	f000 f821 	bl	80018a4 <HAL_RCC_GetSysClockFreq>
 8001862:	4602      	mov	r2, r0
 8001864:	4b0b      	ldr	r3, [pc, #44]	; (8001894 <HAL_RCC_ClockConfig+0x1c4>)
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	091b      	lsrs	r3, r3, #4
 800186a:	f003 030f 	and.w	r3, r3, #15
 800186e:	490a      	ldr	r1, [pc, #40]	; (8001898 <HAL_RCC_ClockConfig+0x1c8>)
 8001870:	5ccb      	ldrb	r3, [r1, r3]
 8001872:	fa22 f303 	lsr.w	r3, r2, r3
 8001876:	4a09      	ldr	r2, [pc, #36]	; (800189c <HAL_RCC_ClockConfig+0x1cc>)
 8001878:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800187a:	4b09      	ldr	r3, [pc, #36]	; (80018a0 <HAL_RCC_ClockConfig+0x1d0>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4618      	mov	r0, r3
 8001880:	f7fe feb6 	bl	80005f0 <HAL_InitTick>

  return HAL_OK;
 8001884:	2300      	movs	r3, #0
}
 8001886:	4618      	mov	r0, r3
 8001888:	3710      	adds	r7, #16
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	40022000 	.word	0x40022000
 8001894:	40021000 	.word	0x40021000
 8001898:	0800265c 	.word	0x0800265c
 800189c:	20000000 	.word	0x20000000
 80018a0:	20000004 	.word	0x20000004

080018a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018a4:	b490      	push	{r4, r7}
 80018a6:	b08a      	sub	sp, #40	; 0x28
 80018a8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80018aa:	4b29      	ldr	r3, [pc, #164]	; (8001950 <HAL_RCC_GetSysClockFreq+0xac>)
 80018ac:	1d3c      	adds	r4, r7, #4
 80018ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80018b4:	f240 2301 	movw	r3, #513	; 0x201
 80018b8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80018ba:	2300      	movs	r3, #0
 80018bc:	61fb      	str	r3, [r7, #28]
 80018be:	2300      	movs	r3, #0
 80018c0:	61bb      	str	r3, [r7, #24]
 80018c2:	2300      	movs	r3, #0
 80018c4:	627b      	str	r3, [r7, #36]	; 0x24
 80018c6:	2300      	movs	r3, #0
 80018c8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80018ca:	2300      	movs	r3, #0
 80018cc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80018ce:	4b21      	ldr	r3, [pc, #132]	; (8001954 <HAL_RCC_GetSysClockFreq+0xb0>)
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	f003 030c 	and.w	r3, r3, #12
 80018da:	2b04      	cmp	r3, #4
 80018dc:	d002      	beq.n	80018e4 <HAL_RCC_GetSysClockFreq+0x40>
 80018de:	2b08      	cmp	r3, #8
 80018e0:	d003      	beq.n	80018ea <HAL_RCC_GetSysClockFreq+0x46>
 80018e2:	e02b      	b.n	800193c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80018e4:	4b1c      	ldr	r3, [pc, #112]	; (8001958 <HAL_RCC_GetSysClockFreq+0xb4>)
 80018e6:	623b      	str	r3, [r7, #32]
      break;
 80018e8:	e02b      	b.n	8001942 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	0c9b      	lsrs	r3, r3, #18
 80018ee:	f003 030f 	and.w	r3, r3, #15
 80018f2:	3328      	adds	r3, #40	; 0x28
 80018f4:	443b      	add	r3, r7
 80018f6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80018fa:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d012      	beq.n	800192c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001906:	4b13      	ldr	r3, [pc, #76]	; (8001954 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	0c5b      	lsrs	r3, r3, #17
 800190c:	f003 0301 	and.w	r3, r3, #1
 8001910:	3328      	adds	r3, #40	; 0x28
 8001912:	443b      	add	r3, r7
 8001914:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001918:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	4a0e      	ldr	r2, [pc, #56]	; (8001958 <HAL_RCC_GetSysClockFreq+0xb4>)
 800191e:	fb03 f202 	mul.w	r2, r3, r2
 8001922:	69bb      	ldr	r3, [r7, #24]
 8001924:	fbb2 f3f3 	udiv	r3, r2, r3
 8001928:	627b      	str	r3, [r7, #36]	; 0x24
 800192a:	e004      	b.n	8001936 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	4a0b      	ldr	r2, [pc, #44]	; (800195c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001930:	fb02 f303 	mul.w	r3, r2, r3
 8001934:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001938:	623b      	str	r3, [r7, #32]
      break;
 800193a:	e002      	b.n	8001942 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800193c:	4b06      	ldr	r3, [pc, #24]	; (8001958 <HAL_RCC_GetSysClockFreq+0xb4>)
 800193e:	623b      	str	r3, [r7, #32]
      break;
 8001940:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001942:	6a3b      	ldr	r3, [r7, #32]
}
 8001944:	4618      	mov	r0, r3
 8001946:	3728      	adds	r7, #40	; 0x28
 8001948:	46bd      	mov	sp, r7
 800194a:	bc90      	pop	{r4, r7}
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	0800264c 	.word	0x0800264c
 8001954:	40021000 	.word	0x40021000
 8001958:	007a1200 	.word	0x007a1200
 800195c:	003d0900 	.word	0x003d0900

08001960 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001964:	4b02      	ldr	r3, [pc, #8]	; (8001970 <HAL_RCC_GetHCLKFreq+0x10>)
 8001966:	681b      	ldr	r3, [r3, #0]
}
 8001968:	4618      	mov	r0, r3
 800196a:	46bd      	mov	sp, r7
 800196c:	bc80      	pop	{r7}
 800196e:	4770      	bx	lr
 8001970:	20000000 	.word	0x20000000

08001974 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001978:	f7ff fff2 	bl	8001960 <HAL_RCC_GetHCLKFreq>
 800197c:	4602      	mov	r2, r0
 800197e:	4b05      	ldr	r3, [pc, #20]	; (8001994 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	0a1b      	lsrs	r3, r3, #8
 8001984:	f003 0307 	and.w	r3, r3, #7
 8001988:	4903      	ldr	r1, [pc, #12]	; (8001998 <HAL_RCC_GetPCLK1Freq+0x24>)
 800198a:	5ccb      	ldrb	r3, [r1, r3]
 800198c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001990:	4618      	mov	r0, r3
 8001992:	bd80      	pop	{r7, pc}
 8001994:	40021000 	.word	0x40021000
 8001998:	0800266c 	.word	0x0800266c

0800199c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80019a0:	f7ff ffde 	bl	8001960 <HAL_RCC_GetHCLKFreq>
 80019a4:	4602      	mov	r2, r0
 80019a6:	4b05      	ldr	r3, [pc, #20]	; (80019bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	0adb      	lsrs	r3, r3, #11
 80019ac:	f003 0307 	and.w	r3, r3, #7
 80019b0:	4903      	ldr	r1, [pc, #12]	; (80019c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80019b2:	5ccb      	ldrb	r3, [r1, r3]
 80019b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	40021000 	.word	0x40021000
 80019c0:	0800266c 	.word	0x0800266c

080019c4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b085      	sub	sp, #20
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80019cc:	4b0a      	ldr	r3, [pc, #40]	; (80019f8 <RCC_Delay+0x34>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a0a      	ldr	r2, [pc, #40]	; (80019fc <RCC_Delay+0x38>)
 80019d2:	fba2 2303 	umull	r2, r3, r2, r3
 80019d6:	0a5b      	lsrs	r3, r3, #9
 80019d8:	687a      	ldr	r2, [r7, #4]
 80019da:	fb02 f303 	mul.w	r3, r2, r3
 80019de:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80019e0:	bf00      	nop
  }
  while (Delay --);
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	1e5a      	subs	r2, r3, #1
 80019e6:	60fa      	str	r2, [r7, #12]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d1f9      	bne.n	80019e0 <RCC_Delay+0x1c>
}
 80019ec:	bf00      	nop
 80019ee:	bf00      	nop
 80019f0:	3714      	adds	r7, #20
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bc80      	pop	{r7}
 80019f6:	4770      	bx	lr
 80019f8:	20000000 	.word	0x20000000
 80019fc:	10624dd3 	.word	0x10624dd3

08001a00 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b086      	sub	sp, #24
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	613b      	str	r3, [r7, #16]
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 0301 	and.w	r3, r3, #1
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d07d      	beq.n	8001b18 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a20:	4b4f      	ldr	r3, [pc, #316]	; (8001b60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a22:	69db      	ldr	r3, [r3, #28]
 8001a24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d10d      	bne.n	8001a48 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a2c:	4b4c      	ldr	r3, [pc, #304]	; (8001b60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a2e:	69db      	ldr	r3, [r3, #28]
 8001a30:	4a4b      	ldr	r2, [pc, #300]	; (8001b60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a36:	61d3      	str	r3, [r2, #28]
 8001a38:	4b49      	ldr	r3, [pc, #292]	; (8001b60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a3a:	69db      	ldr	r3, [r3, #28]
 8001a3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a40:	60bb      	str	r3, [r7, #8]
 8001a42:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a44:	2301      	movs	r3, #1
 8001a46:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a48:	4b46      	ldr	r3, [pc, #280]	; (8001b64 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d118      	bne.n	8001a86 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a54:	4b43      	ldr	r3, [pc, #268]	; (8001b64 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a42      	ldr	r2, [pc, #264]	; (8001b64 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001a5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a5e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a60:	f7fe fe08 	bl	8000674 <HAL_GetTick>
 8001a64:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a66:	e008      	b.n	8001a7a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a68:	f7fe fe04 	bl	8000674 <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	2b64      	cmp	r3, #100	; 0x64
 8001a74:	d901      	bls.n	8001a7a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e06d      	b.n	8001b56 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a7a:	4b3a      	ldr	r3, [pc, #232]	; (8001b64 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d0f0      	beq.n	8001a68 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001a86:	4b36      	ldr	r3, [pc, #216]	; (8001b60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a88:	6a1b      	ldr	r3, [r3, #32]
 8001a8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a8e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d02e      	beq.n	8001af4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a9e:	68fa      	ldr	r2, [r7, #12]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d027      	beq.n	8001af4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001aa4:	4b2e      	ldr	r3, [pc, #184]	; (8001b60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001aa6:	6a1b      	ldr	r3, [r3, #32]
 8001aa8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001aac:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001aae:	4b2e      	ldr	r3, [pc, #184]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001ab4:	4b2c      	ldr	r3, [pc, #176]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001aba:	4a29      	ldr	r2, [pc, #164]	; (8001b60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	f003 0301 	and.w	r3, r3, #1
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d014      	beq.n	8001af4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aca:	f7fe fdd3 	bl	8000674 <HAL_GetTick>
 8001ace:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ad0:	e00a      	b.n	8001ae8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ad2:	f7fe fdcf 	bl	8000674 <HAL_GetTick>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d901      	bls.n	8001ae8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	e036      	b.n	8001b56 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ae8:	4b1d      	ldr	r3, [pc, #116]	; (8001b60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001aea:	6a1b      	ldr	r3, [r3, #32]
 8001aec:	f003 0302 	and.w	r3, r3, #2
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d0ee      	beq.n	8001ad2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001af4:	4b1a      	ldr	r3, [pc, #104]	; (8001b60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001af6:	6a1b      	ldr	r3, [r3, #32]
 8001af8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	4917      	ldr	r1, [pc, #92]	; (8001b60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b02:	4313      	orrs	r3, r2
 8001b04:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001b06:	7dfb      	ldrb	r3, [r7, #23]
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d105      	bne.n	8001b18 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b0c:	4b14      	ldr	r3, [pc, #80]	; (8001b60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b0e:	69db      	ldr	r3, [r3, #28]
 8001b10:	4a13      	ldr	r2, [pc, #76]	; (8001b60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b16:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 0302 	and.w	r3, r3, #2
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d008      	beq.n	8001b36 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001b24:	4b0e      	ldr	r3, [pc, #56]	; (8001b60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	490b      	ldr	r1, [pc, #44]	; (8001b60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b32:	4313      	orrs	r3, r2
 8001b34:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 0310 	and.w	r3, r3, #16
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d008      	beq.n	8001b54 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001b42:	4b07      	ldr	r3, [pc, #28]	; (8001b60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	68db      	ldr	r3, [r3, #12]
 8001b4e:	4904      	ldr	r1, [pc, #16]	; (8001b60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b50:	4313      	orrs	r3, r2
 8001b52:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001b54:	2300      	movs	r3, #0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3718      	adds	r7, #24
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	40021000 	.word	0x40021000
 8001b64:	40007000 	.word	0x40007000
 8001b68:	42420440 	.word	0x42420440

08001b6c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d101      	bne.n	8001b7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e03f      	b.n	8001bfe <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d106      	bne.n	8001b98 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f7fe fc66 	bl	8000464 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2224      	movs	r2, #36	; 0x24
 8001b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	68da      	ldr	r2, [r3, #12]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001bae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	f000 fc85 	bl	80024c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	691a      	ldr	r2, [r3, #16]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001bc4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	695a      	ldr	r2, [r3, #20]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001bd4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	68da      	ldr	r2, [r3, #12]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001be4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2200      	movs	r2, #0
 8001bea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2220      	movs	r2, #32
 8001bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2220      	movs	r2, #32
 8001bf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001bfc:	2300      	movs	r3, #0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3708      	adds	r7, #8
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b08a      	sub	sp, #40	; 0x28
 8001c0a:	af02      	add	r7, sp, #8
 8001c0c:	60f8      	str	r0, [r7, #12]
 8001c0e:	60b9      	str	r1, [r7, #8]
 8001c10:	603b      	str	r3, [r7, #0]
 8001c12:	4613      	mov	r3, r2
 8001c14:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001c16:	2300      	movs	r3, #0
 8001c18:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	2b20      	cmp	r3, #32
 8001c24:	d17c      	bne.n	8001d20 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d002      	beq.n	8001c32 <HAL_UART_Transmit+0x2c>
 8001c2c:	88fb      	ldrh	r3, [r7, #6]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d101      	bne.n	8001c36 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e075      	b.n	8001d22 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d101      	bne.n	8001c44 <HAL_UART_Transmit+0x3e>
 8001c40:	2302      	movs	r3, #2
 8001c42:	e06e      	b.n	8001d22 <HAL_UART_Transmit+0x11c>
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2201      	movs	r2, #1
 8001c48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	2221      	movs	r2, #33	; 0x21
 8001c56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001c5a:	f7fe fd0b 	bl	8000674 <HAL_GetTick>
 8001c5e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	88fa      	ldrh	r2, [r7, #6]
 8001c64:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	88fa      	ldrh	r2, [r7, #6]
 8001c6a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c74:	d108      	bne.n	8001c88 <HAL_UART_Transmit+0x82>
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	691b      	ldr	r3, [r3, #16]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d104      	bne.n	8001c88 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	61bb      	str	r3, [r7, #24]
 8001c86:	e003      	b.n	8001c90 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	2200      	movs	r2, #0
 8001c94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001c98:	e02a      	b.n	8001cf0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	9300      	str	r3, [sp, #0]
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	2180      	movs	r1, #128	; 0x80
 8001ca4:	68f8      	ldr	r0, [r7, #12]
 8001ca6:	f000 fa38 	bl	800211a <UART_WaitOnFlagUntilTimeout>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	e036      	b.n	8001d22 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001cb4:	69fb      	ldr	r3, [r7, #28]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d10b      	bne.n	8001cd2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001cba:	69bb      	ldr	r3, [r7, #24]
 8001cbc:	881b      	ldrh	r3, [r3, #0]
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001cc8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001cca:	69bb      	ldr	r3, [r7, #24]
 8001ccc:	3302      	adds	r3, #2
 8001cce:	61bb      	str	r3, [r7, #24]
 8001cd0:	e007      	b.n	8001ce2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	781a      	ldrb	r2, [r3, #0]
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	3301      	adds	r3, #1
 8001ce0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	3b01      	subs	r3, #1
 8001cea:	b29a      	uxth	r2, r3
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001cf4:	b29b      	uxth	r3, r3
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d1cf      	bne.n	8001c9a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	9300      	str	r3, [sp, #0]
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	2200      	movs	r2, #0
 8001d02:	2140      	movs	r1, #64	; 0x40
 8001d04:	68f8      	ldr	r0, [r7, #12]
 8001d06:	f000 fa08 	bl	800211a <UART_WaitOnFlagUntilTimeout>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d001      	beq.n	8001d14 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001d10:	2303      	movs	r3, #3
 8001d12:	e006      	b.n	8001d22 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2220      	movs	r2, #32
 8001d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	e000      	b.n	8001d22 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001d20:	2302      	movs	r3, #2
  }
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3720      	adds	r7, #32
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}

08001d2a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001d2a:	b580      	push	{r7, lr}
 8001d2c:	b084      	sub	sp, #16
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	60f8      	str	r0, [r7, #12]
 8001d32:	60b9      	str	r1, [r7, #8]
 8001d34:	4613      	mov	r3, r2
 8001d36:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	2b20      	cmp	r3, #32
 8001d42:	d11d      	bne.n	8001d80 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d002      	beq.n	8001d50 <HAL_UART_Receive_IT+0x26>
 8001d4a:	88fb      	ldrh	r3, [r7, #6]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d101      	bne.n	8001d54 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e016      	b.n	8001d82 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d101      	bne.n	8001d62 <HAL_UART_Receive_IT+0x38>
 8001d5e:	2302      	movs	r3, #2
 8001d60:	e00f      	b.n	8001d82 <HAL_UART_Receive_IT+0x58>
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	2201      	movs	r2, #1
 8001d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8001d70:	88fb      	ldrh	r3, [r7, #6]
 8001d72:	461a      	mov	r2, r3
 8001d74:	68b9      	ldr	r1, [r7, #8]
 8001d76:	68f8      	ldr	r0, [r7, #12]
 8001d78:	f000 fa19 	bl	80021ae <UART_Start_Receive_IT>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	e000      	b.n	8001d82 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8001d80:	2302      	movs	r3, #2
  }
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3710      	adds	r7, #16
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
	...

08001d8c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b08a      	sub	sp, #40	; 0x28
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	68db      	ldr	r3, [r3, #12]
 8001da2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	695b      	ldr	r3, [r3, #20]
 8001daa:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8001dac:	2300      	movs	r3, #0
 8001dae:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8001db0:	2300      	movs	r3, #0
 8001db2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db6:	f003 030f 	and.w	r3, r3, #15
 8001dba:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8001dbc:	69bb      	ldr	r3, [r7, #24]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d10d      	bne.n	8001dde <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc4:	f003 0320 	and.w	r3, r3, #32
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d008      	beq.n	8001dde <HAL_UART_IRQHandler+0x52>
 8001dcc:	6a3b      	ldr	r3, [r7, #32]
 8001dce:	f003 0320 	and.w	r3, r3, #32
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d003      	beq.n	8001dde <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f000 fac9 	bl	800236e <UART_Receive_IT>
      return;
 8001ddc:	e17b      	b.n	80020d6 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001dde:	69bb      	ldr	r3, [r7, #24]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	f000 80b1 	beq.w	8001f48 <HAL_UART_IRQHandler+0x1bc>
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	f003 0301 	and.w	r3, r3, #1
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d105      	bne.n	8001dfc <HAL_UART_IRQHandler+0x70>
 8001df0:	6a3b      	ldr	r3, [r7, #32]
 8001df2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	f000 80a6 	beq.w	8001f48 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfe:	f003 0301 	and.w	r3, r3, #1
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d00a      	beq.n	8001e1c <HAL_UART_IRQHandler+0x90>
 8001e06:	6a3b      	ldr	r3, [r7, #32]
 8001e08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d005      	beq.n	8001e1c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e14:	f043 0201 	orr.w	r2, r3, #1
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1e:	f003 0304 	and.w	r3, r3, #4
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d00a      	beq.n	8001e3c <HAL_UART_IRQHandler+0xb0>
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	f003 0301 	and.w	r3, r3, #1
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d005      	beq.n	8001e3c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e34:	f043 0202 	orr.w	r2, r3, #2
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3e:	f003 0302 	and.w	r3, r3, #2
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d00a      	beq.n	8001e5c <HAL_UART_IRQHandler+0xd0>
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	f003 0301 	and.w	r3, r3, #1
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d005      	beq.n	8001e5c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e54:	f043 0204 	orr.w	r2, r3, #4
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5e:	f003 0308 	and.w	r3, r3, #8
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d00f      	beq.n	8001e86 <HAL_UART_IRQHandler+0xfa>
 8001e66:	6a3b      	ldr	r3, [r7, #32]
 8001e68:	f003 0320 	and.w	r3, r3, #32
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d104      	bne.n	8001e7a <HAL_UART_IRQHandler+0xee>
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	f003 0301 	and.w	r3, r3, #1
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d005      	beq.n	8001e86 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7e:	f043 0208 	orr.w	r2, r3, #8
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	f000 811e 	beq.w	80020cc <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e92:	f003 0320 	and.w	r3, r3, #32
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d007      	beq.n	8001eaa <HAL_UART_IRQHandler+0x11e>
 8001e9a:	6a3b      	ldr	r3, [r7, #32]
 8001e9c:	f003 0320 	and.w	r3, r3, #32
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d002      	beq.n	8001eaa <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f000 fa62 	bl	800236e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	695b      	ldr	r3, [r3, #20]
 8001eb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	bf14      	ite	ne
 8001eb8:	2301      	movne	r3, #1
 8001eba:	2300      	moveq	r3, #0
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec4:	f003 0308 	and.w	r3, r3, #8
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d102      	bne.n	8001ed2 <HAL_UART_IRQHandler+0x146>
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d031      	beq.n	8001f36 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f000 f9a4 	bl	8002220 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	695b      	ldr	r3, [r3, #20]
 8001ede:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d023      	beq.n	8001f2e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	695a      	ldr	r2, [r3, #20]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ef4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d013      	beq.n	8001f26 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f02:	4a76      	ldr	r2, [pc, #472]	; (80020dc <HAL_UART_IRQHandler+0x350>)
 8001f04:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f7fe ff3a 	bl	8000d84 <HAL_DMA_Abort_IT>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d016      	beq.n	8001f44 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001f20:	4610      	mov	r0, r2
 8001f22:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f24:	e00e      	b.n	8001f44 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f000 f8e3 	bl	80020f2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f2c:	e00a      	b.n	8001f44 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f000 f8df 	bl	80020f2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f34:	e006      	b.n	8001f44 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f000 f8db 	bl	80020f2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8001f42:	e0c3      	b.n	80020cc <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f44:	bf00      	nop
    return;
 8001f46:	e0c1      	b.n	80020cc <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	f040 80a1 	bne.w	8002094 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8001f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f54:	f003 0310 	and.w	r3, r3, #16
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	f000 809b 	beq.w	8002094 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8001f5e:	6a3b      	ldr	r3, [r7, #32]
 8001f60:	f003 0310 	and.w	r3, r3, #16
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	f000 8095 	beq.w	8002094 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	60fb      	str	r3, [r7, #12]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	60fb      	str	r3, [r7, #12]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	60fb      	str	r3, [r7, #12]
 8001f7e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	695b      	ldr	r3, [r3, #20]
 8001f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d04e      	beq.n	800202c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8001f98:	8a3b      	ldrh	r3, [r7, #16]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	f000 8098 	beq.w	80020d0 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001fa4:	8a3a      	ldrh	r2, [r7, #16]
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	f080 8092 	bcs.w	80020d0 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	8a3a      	ldrh	r2, [r7, #16]
 8001fb0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fb6:	699b      	ldr	r3, [r3, #24]
 8001fb8:	2b20      	cmp	r3, #32
 8001fba:	d02b      	beq.n	8002014 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	68da      	ldr	r2, [r3, #12]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001fca:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	695a      	ldr	r2, [r3, #20]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f022 0201 	bic.w	r2, r2, #1
 8001fda:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	695a      	ldr	r2, [r3, #20]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001fea:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2220      	movs	r2, #32
 8001ff0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	68da      	ldr	r2, [r3, #12]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f022 0210 	bic.w	r2, r2, #16
 8002008:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800200e:	4618      	mov	r0, r3
 8002010:	f7fe fe7d 	bl	8000d0e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800201c:	b29b      	uxth	r3, r3
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	b29b      	uxth	r3, r3
 8002022:	4619      	mov	r1, r3
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f000 f86d 	bl	8002104 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800202a:	e051      	b.n	80020d0 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002034:	b29b      	uxth	r3, r3
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800203e:	b29b      	uxth	r3, r3
 8002040:	2b00      	cmp	r3, #0
 8002042:	d047      	beq.n	80020d4 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8002044:	8a7b      	ldrh	r3, [r7, #18]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d044      	beq.n	80020d4 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	68da      	ldr	r2, [r3, #12]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002058:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	695a      	ldr	r2, [r3, #20]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f022 0201 	bic.w	r2, r2, #1
 8002068:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2220      	movs	r2, #32
 800206e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2200      	movs	r2, #0
 8002076:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	68da      	ldr	r2, [r3, #12]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f022 0210 	bic.w	r2, r2, #16
 8002086:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002088:	8a7b      	ldrh	r3, [r7, #18]
 800208a:	4619      	mov	r1, r3
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f000 f839 	bl	8002104 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002092:	e01f      	b.n	80020d4 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002096:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800209a:	2b00      	cmp	r3, #0
 800209c:	d008      	beq.n	80020b0 <HAL_UART_IRQHandler+0x324>
 800209e:	6a3b      	ldr	r3, [r7, #32]
 80020a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d003      	beq.n	80020b0 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	f000 f8f9 	bl	80022a0 <UART_Transmit_IT>
    return;
 80020ae:	e012      	b.n	80020d6 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80020b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d00d      	beq.n	80020d6 <HAL_UART_IRQHandler+0x34a>
 80020ba:	6a3b      	ldr	r3, [r7, #32]
 80020bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d008      	beq.n	80020d6 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f000 f93a 	bl	800233e <UART_EndTransmit_IT>
    return;
 80020ca:	e004      	b.n	80020d6 <HAL_UART_IRQHandler+0x34a>
    return;
 80020cc:	bf00      	nop
 80020ce:	e002      	b.n	80020d6 <HAL_UART_IRQHandler+0x34a>
      return;
 80020d0:	bf00      	nop
 80020d2:	e000      	b.n	80020d6 <HAL_UART_IRQHandler+0x34a>
      return;
 80020d4:	bf00      	nop
  }
}
 80020d6:	3728      	adds	r7, #40	; 0x28
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	08002279 	.word	0x08002279

080020e0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80020e8:	bf00      	nop
 80020ea:	370c      	adds	r7, #12
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bc80      	pop	{r7}
 80020f0:	4770      	bx	lr

080020f2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80020f2:	b480      	push	{r7}
 80020f4:	b083      	sub	sp, #12
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80020fa:	bf00      	nop
 80020fc:	370c      	adds	r7, #12
 80020fe:	46bd      	mov	sp, r7
 8002100:	bc80      	pop	{r7}
 8002102:	4770      	bx	lr

08002104 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	460b      	mov	r3, r1
 800210e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002110:	bf00      	nop
 8002112:	370c      	adds	r7, #12
 8002114:	46bd      	mov	sp, r7
 8002116:	bc80      	pop	{r7}
 8002118:	4770      	bx	lr

0800211a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800211a:	b580      	push	{r7, lr}
 800211c:	b084      	sub	sp, #16
 800211e:	af00      	add	r7, sp, #0
 8002120:	60f8      	str	r0, [r7, #12]
 8002122:	60b9      	str	r1, [r7, #8]
 8002124:	603b      	str	r3, [r7, #0]
 8002126:	4613      	mov	r3, r2
 8002128:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800212a:	e02c      	b.n	8002186 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002132:	d028      	beq.n	8002186 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d007      	beq.n	800214a <UART_WaitOnFlagUntilTimeout+0x30>
 800213a:	f7fe fa9b 	bl	8000674 <HAL_GetTick>
 800213e:	4602      	mov	r2, r0
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	69ba      	ldr	r2, [r7, #24]
 8002146:	429a      	cmp	r2, r3
 8002148:	d21d      	bcs.n	8002186 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	68da      	ldr	r2, [r3, #12]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002158:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	695a      	ldr	r2, [r3, #20]
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f022 0201 	bic.w	r2, r2, #1
 8002168:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	2220      	movs	r2, #32
 800216e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2220      	movs	r2, #32
 8002176:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2200      	movs	r2, #0
 800217e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e00f      	b.n	80021a6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	4013      	ands	r3, r2
 8002190:	68ba      	ldr	r2, [r7, #8]
 8002192:	429a      	cmp	r2, r3
 8002194:	bf0c      	ite	eq
 8002196:	2301      	moveq	r3, #1
 8002198:	2300      	movne	r3, #0
 800219a:	b2db      	uxtb	r3, r3
 800219c:	461a      	mov	r2, r3
 800219e:	79fb      	ldrb	r3, [r7, #7]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d0c3      	beq.n	800212c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80021a4:	2300      	movs	r3, #0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3710      	adds	r7, #16
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}

080021ae <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80021ae:	b480      	push	{r7}
 80021b0:	b085      	sub	sp, #20
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	60f8      	str	r0, [r7, #12]
 80021b6:	60b9      	str	r1, [r7, #8]
 80021b8:	4613      	mov	r3, r2
 80021ba:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	68ba      	ldr	r2, [r7, #8]
 80021c0:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	88fa      	ldrh	r2, [r7, #6]
 80021c6:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	88fa      	ldrh	r2, [r7, #6]
 80021cc:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2200      	movs	r2, #0
 80021d2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2222      	movs	r2, #34	; 0x22
 80021d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2200      	movs	r2, #0
 80021e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	68da      	ldr	r2, [r3, #12]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80021f2:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	695a      	ldr	r2, [r3, #20]
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f042 0201 	orr.w	r2, r2, #1
 8002202:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	68da      	ldr	r2, [r3, #12]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f042 0220 	orr.w	r2, r2, #32
 8002212:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002214:	2300      	movs	r3, #0
}
 8002216:	4618      	mov	r0, r3
 8002218:	3714      	adds	r7, #20
 800221a:	46bd      	mov	sp, r7
 800221c:	bc80      	pop	{r7}
 800221e:	4770      	bx	lr

08002220 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	68da      	ldr	r2, [r3, #12]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002236:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	695a      	ldr	r2, [r3, #20]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f022 0201 	bic.w	r2, r2, #1
 8002246:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224c:	2b01      	cmp	r3, #1
 800224e:	d107      	bne.n	8002260 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	68da      	ldr	r2, [r3, #12]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f022 0210 	bic.w	r2, r2, #16
 800225e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2220      	movs	r2, #32
 8002264:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2200      	movs	r2, #0
 800226c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800226e:	bf00      	nop
 8002270:	370c      	adds	r7, #12
 8002272:	46bd      	mov	sp, r7
 8002274:	bc80      	pop	{r7}
 8002276:	4770      	bx	lr

08002278 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002284:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2200      	movs	r2, #0
 800228a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2200      	movs	r2, #0
 8002290:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002292:	68f8      	ldr	r0, [r7, #12]
 8002294:	f7ff ff2d 	bl	80020f2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002298:	bf00      	nop
 800229a:	3710      	adds	r7, #16
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}

080022a0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b085      	sub	sp, #20
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	2b21      	cmp	r3, #33	; 0x21
 80022b2:	d13e      	bne.n	8002332 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022bc:	d114      	bne.n	80022e8 <UART_Transmit_IT+0x48>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	691b      	ldr	r3, [r3, #16]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d110      	bne.n	80022e8 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6a1b      	ldr	r3, [r3, #32]
 80022ca:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	881b      	ldrh	r3, [r3, #0]
 80022d0:	461a      	mov	r2, r3
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80022da:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6a1b      	ldr	r3, [r3, #32]
 80022e0:	1c9a      	adds	r2, r3, #2
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	621a      	str	r2, [r3, #32]
 80022e6:	e008      	b.n	80022fa <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6a1b      	ldr	r3, [r3, #32]
 80022ec:	1c59      	adds	r1, r3, #1
 80022ee:	687a      	ldr	r2, [r7, #4]
 80022f0:	6211      	str	r1, [r2, #32]
 80022f2:	781a      	ldrb	r2, [r3, #0]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80022fe:	b29b      	uxth	r3, r3
 8002300:	3b01      	subs	r3, #1
 8002302:	b29b      	uxth	r3, r3
 8002304:	687a      	ldr	r2, [r7, #4]
 8002306:	4619      	mov	r1, r3
 8002308:	84d1      	strh	r1, [r2, #38]	; 0x26
 800230a:	2b00      	cmp	r3, #0
 800230c:	d10f      	bne.n	800232e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	68da      	ldr	r2, [r3, #12]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800231c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	68da      	ldr	r2, [r3, #12]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800232c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800232e:	2300      	movs	r3, #0
 8002330:	e000      	b.n	8002334 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002332:	2302      	movs	r3, #2
  }
}
 8002334:	4618      	mov	r0, r3
 8002336:	3714      	adds	r7, #20
 8002338:	46bd      	mov	sp, r7
 800233a:	bc80      	pop	{r7}
 800233c:	4770      	bx	lr

0800233e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800233e:	b580      	push	{r7, lr}
 8002340:	b082      	sub	sp, #8
 8002342:	af00      	add	r7, sp, #0
 8002344:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	68da      	ldr	r2, [r3, #12]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002354:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2220      	movs	r2, #32
 800235a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f7ff febe 	bl	80020e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002364:	2300      	movs	r3, #0
}
 8002366:	4618      	mov	r0, r3
 8002368:	3708      	adds	r7, #8
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}

0800236e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800236e:	b580      	push	{r7, lr}
 8002370:	b086      	sub	sp, #24
 8002372:	af00      	add	r7, sp, #0
 8002374:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800237c:	b2db      	uxtb	r3, r3
 800237e:	2b22      	cmp	r3, #34	; 0x22
 8002380:	f040 8099 	bne.w	80024b6 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800238c:	d117      	bne.n	80023be <UART_Receive_IT+0x50>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	691b      	ldr	r3, [r3, #16]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d113      	bne.n	80023be <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002396:	2300      	movs	r3, #0
 8002398:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800239e:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023ac:	b29a      	uxth	r2, r3
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b6:	1c9a      	adds	r2, r3, #2
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	629a      	str	r2, [r3, #40]	; 0x28
 80023bc:	e026      	b.n	800240c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023c2:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80023c4:	2300      	movs	r3, #0
 80023c6:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023d0:	d007      	beq.n	80023e2 <UART_Receive_IT+0x74>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d10a      	bne.n	80023f0 <UART_Receive_IT+0x82>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	691b      	ldr	r3, [r3, #16]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d106      	bne.n	80023f0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	b2da      	uxtb	r2, r3
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	701a      	strb	r2, [r3, #0]
 80023ee:	e008      	b.n	8002402 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80023fc:	b2da      	uxtb	r2, r3
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002406:	1c5a      	adds	r2, r3, #1
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002410:	b29b      	uxth	r3, r3
 8002412:	3b01      	subs	r3, #1
 8002414:	b29b      	uxth	r3, r3
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	4619      	mov	r1, r3
 800241a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800241c:	2b00      	cmp	r3, #0
 800241e:	d148      	bne.n	80024b2 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	68da      	ldr	r2, [r3, #12]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f022 0220 	bic.w	r2, r2, #32
 800242e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	68da      	ldr	r2, [r3, #12]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800243e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	695a      	ldr	r2, [r3, #20]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f022 0201 	bic.w	r2, r2, #1
 800244e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2220      	movs	r2, #32
 8002454:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245c:	2b01      	cmp	r3, #1
 800245e:	d123      	bne.n	80024a8 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2200      	movs	r2, #0
 8002464:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	68da      	ldr	r2, [r3, #12]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f022 0210 	bic.w	r2, r2, #16
 8002474:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0310 	and.w	r3, r3, #16
 8002480:	2b10      	cmp	r3, #16
 8002482:	d10a      	bne.n	800249a <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002484:	2300      	movs	r3, #0
 8002486:	60fb      	str	r3, [r7, #12]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	60fb      	str	r3, [r7, #12]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	60fb      	str	r3, [r7, #12]
 8002498:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800249e:	4619      	mov	r1, r3
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f7ff fe2f 	bl	8002104 <HAL_UARTEx_RxEventCallback>
 80024a6:	e002      	b.n	80024ae <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	f7fd ff59 	bl	8000360 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80024ae:	2300      	movs	r3, #0
 80024b0:	e002      	b.n	80024b8 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80024b2:	2300      	movs	r3, #0
 80024b4:	e000      	b.n	80024b8 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80024b6:	2302      	movs	r3, #2
  }
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3718      	adds	r7, #24
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}

080024c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b084      	sub	sp, #16
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	691b      	ldr	r3, [r3, #16]
 80024ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	68da      	ldr	r2, [r3, #12]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	430a      	orrs	r2, r1
 80024dc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	689a      	ldr	r2, [r3, #8]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	691b      	ldr	r3, [r3, #16]
 80024e6:	431a      	orrs	r2, r3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	695b      	ldr	r3, [r3, #20]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	68db      	ldr	r3, [r3, #12]
 80024f6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80024fa:	f023 030c 	bic.w	r3, r3, #12
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	6812      	ldr	r2, [r2, #0]
 8002502:	68b9      	ldr	r1, [r7, #8]
 8002504:	430b      	orrs	r3, r1
 8002506:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	695b      	ldr	r3, [r3, #20]
 800250e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	699a      	ldr	r2, [r3, #24]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	430a      	orrs	r2, r1
 800251c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a2c      	ldr	r2, [pc, #176]	; (80025d4 <UART_SetConfig+0x114>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d103      	bne.n	8002530 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002528:	f7ff fa38 	bl	800199c <HAL_RCC_GetPCLK2Freq>
 800252c:	60f8      	str	r0, [r7, #12]
 800252e:	e002      	b.n	8002536 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002530:	f7ff fa20 	bl	8001974 <HAL_RCC_GetPCLK1Freq>
 8002534:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002536:	68fa      	ldr	r2, [r7, #12]
 8002538:	4613      	mov	r3, r2
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	4413      	add	r3, r2
 800253e:	009a      	lsls	r2, r3, #2
 8002540:	441a      	add	r2, r3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	fbb2 f3f3 	udiv	r3, r2, r3
 800254c:	4a22      	ldr	r2, [pc, #136]	; (80025d8 <UART_SetConfig+0x118>)
 800254e:	fba2 2303 	umull	r2, r3, r2, r3
 8002552:	095b      	lsrs	r3, r3, #5
 8002554:	0119      	lsls	r1, r3, #4
 8002556:	68fa      	ldr	r2, [r7, #12]
 8002558:	4613      	mov	r3, r2
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	4413      	add	r3, r2
 800255e:	009a      	lsls	r2, r3, #2
 8002560:	441a      	add	r2, r3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	fbb2 f2f3 	udiv	r2, r2, r3
 800256c:	4b1a      	ldr	r3, [pc, #104]	; (80025d8 <UART_SetConfig+0x118>)
 800256e:	fba3 0302 	umull	r0, r3, r3, r2
 8002572:	095b      	lsrs	r3, r3, #5
 8002574:	2064      	movs	r0, #100	; 0x64
 8002576:	fb00 f303 	mul.w	r3, r0, r3
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	011b      	lsls	r3, r3, #4
 800257e:	3332      	adds	r3, #50	; 0x32
 8002580:	4a15      	ldr	r2, [pc, #84]	; (80025d8 <UART_SetConfig+0x118>)
 8002582:	fba2 2303 	umull	r2, r3, r2, r3
 8002586:	095b      	lsrs	r3, r3, #5
 8002588:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800258c:	4419      	add	r1, r3
 800258e:	68fa      	ldr	r2, [r7, #12]
 8002590:	4613      	mov	r3, r2
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	4413      	add	r3, r2
 8002596:	009a      	lsls	r2, r3, #2
 8002598:	441a      	add	r2, r3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80025a4:	4b0c      	ldr	r3, [pc, #48]	; (80025d8 <UART_SetConfig+0x118>)
 80025a6:	fba3 0302 	umull	r0, r3, r3, r2
 80025aa:	095b      	lsrs	r3, r3, #5
 80025ac:	2064      	movs	r0, #100	; 0x64
 80025ae:	fb00 f303 	mul.w	r3, r0, r3
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	011b      	lsls	r3, r3, #4
 80025b6:	3332      	adds	r3, #50	; 0x32
 80025b8:	4a07      	ldr	r2, [pc, #28]	; (80025d8 <UART_SetConfig+0x118>)
 80025ba:	fba2 2303 	umull	r2, r3, r2, r3
 80025be:	095b      	lsrs	r3, r3, #5
 80025c0:	f003 020f 	and.w	r2, r3, #15
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	440a      	add	r2, r1
 80025ca:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80025cc:	bf00      	nop
 80025ce:	3710      	adds	r7, #16
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	40013800 	.word	0x40013800
 80025d8:	51eb851f 	.word	0x51eb851f

080025dc <__libc_init_array>:
 80025dc:	b570      	push	{r4, r5, r6, lr}
 80025de:	2600      	movs	r6, #0
 80025e0:	4d0c      	ldr	r5, [pc, #48]	; (8002614 <__libc_init_array+0x38>)
 80025e2:	4c0d      	ldr	r4, [pc, #52]	; (8002618 <__libc_init_array+0x3c>)
 80025e4:	1b64      	subs	r4, r4, r5
 80025e6:	10a4      	asrs	r4, r4, #2
 80025e8:	42a6      	cmp	r6, r4
 80025ea:	d109      	bne.n	8002600 <__libc_init_array+0x24>
 80025ec:	f000 f822 	bl	8002634 <_init>
 80025f0:	2600      	movs	r6, #0
 80025f2:	4d0a      	ldr	r5, [pc, #40]	; (800261c <__libc_init_array+0x40>)
 80025f4:	4c0a      	ldr	r4, [pc, #40]	; (8002620 <__libc_init_array+0x44>)
 80025f6:	1b64      	subs	r4, r4, r5
 80025f8:	10a4      	asrs	r4, r4, #2
 80025fa:	42a6      	cmp	r6, r4
 80025fc:	d105      	bne.n	800260a <__libc_init_array+0x2e>
 80025fe:	bd70      	pop	{r4, r5, r6, pc}
 8002600:	f855 3b04 	ldr.w	r3, [r5], #4
 8002604:	4798      	blx	r3
 8002606:	3601      	adds	r6, #1
 8002608:	e7ee      	b.n	80025e8 <__libc_init_array+0xc>
 800260a:	f855 3b04 	ldr.w	r3, [r5], #4
 800260e:	4798      	blx	r3
 8002610:	3601      	adds	r6, #1
 8002612:	e7f2      	b.n	80025fa <__libc_init_array+0x1e>
 8002614:	08002674 	.word	0x08002674
 8002618:	08002674 	.word	0x08002674
 800261c:	08002674 	.word	0x08002674
 8002620:	08002678 	.word	0x08002678

08002624 <memset>:
 8002624:	4603      	mov	r3, r0
 8002626:	4402      	add	r2, r0
 8002628:	4293      	cmp	r3, r2
 800262a:	d100      	bne.n	800262e <memset+0xa>
 800262c:	4770      	bx	lr
 800262e:	f803 1b01 	strb.w	r1, [r3], #1
 8002632:	e7f9      	b.n	8002628 <memset+0x4>

08002634 <_init>:
 8002634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002636:	bf00      	nop
 8002638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800263a:	bc08      	pop	{r3}
 800263c:	469e      	mov	lr, r3
 800263e:	4770      	bx	lr

08002640 <_fini>:
 8002640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002642:	bf00      	nop
 8002644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002646:	bc08      	pop	{r3}
 8002648:	469e      	mov	lr, r3
 800264a:	4770      	bx	lr
