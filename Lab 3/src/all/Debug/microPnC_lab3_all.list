
microPnC_lab3_all.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000311c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08003228  08003228  00013228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003248  08003248  000200fc  2**0
                  CONTENTS
  4 .ARM          00000000  08003248  08003248  000200fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003248  08003248  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003248  08003248  00013248  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800324c  0800324c  0001324c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  08003250  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d4  200000fc  0800334c  000200fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d0  0800334c  000201d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ae20  00000000  00000000  00020125  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002189  00000000  00000000  0002af45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b98  00000000  00000000  0002d0d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a60  00000000  00000000  0002dc68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018467  00000000  00000000  0002e6c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000df2f  00000000  00000000  00046b2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000859c9  00000000  00000000  00054a5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000da427  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f58  00000000  00000000  000da478  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000fc 	.word	0x200000fc
 8000128:	00000000 	.word	0x00000000
 800012c:	08003210 	.word	0x08003210

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000100 	.word	0x20000100
 8000148:	08003210 	.word	0x08003210

0800014c <Intersection_7SEG_Init>:
static uint8_t hBuffer[NO_OF_7SEG_DEVICE];

SevenSeg_TypeDef* SevenSeg[2*NO_OF_7SEG_DEVICE];


void Intersection_7SEG_Init(void){
 800014c:	b590      	push	{r4, r7, lr}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
	vBuffer[0] = vClock->buffer[4];
 8000152:	4b20      	ldr	r3, [pc, #128]	; (80001d4 <Intersection_7SEG_Init+0x88>)
 8000154:	681b      	ldr	r3, [r3, #0]
 8000156:	f993 3007 	ldrsb.w	r3, [r3, #7]
 800015a:	b2da      	uxtb	r2, r3
 800015c:	4b1e      	ldr	r3, [pc, #120]	; (80001d8 <Intersection_7SEG_Init+0x8c>)
 800015e:	701a      	strb	r2, [r3, #0]
	vBuffer[1] = vClock->buffer[5];
 8000160:	4b1c      	ldr	r3, [pc, #112]	; (80001d4 <Intersection_7SEG_Init+0x88>)
 8000162:	681b      	ldr	r3, [r3, #0]
 8000164:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8000168:	b2da      	uxtb	r2, r3
 800016a:	4b1b      	ldr	r3, [pc, #108]	; (80001d8 <Intersection_7SEG_Init+0x8c>)
 800016c:	705a      	strb	r2, [r3, #1]
	hBuffer[0] = hClock->buffer[4];
 800016e:	4b1b      	ldr	r3, [pc, #108]	; (80001dc <Intersection_7SEG_Init+0x90>)
 8000170:	681b      	ldr	r3, [r3, #0]
 8000172:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8000176:	b2da      	uxtb	r2, r3
 8000178:	4b19      	ldr	r3, [pc, #100]	; (80001e0 <Intersection_7SEG_Init+0x94>)
 800017a:	701a      	strb	r2, [r3, #0]
	hBuffer[1] = hClock->buffer[5];
 800017c:	4b17      	ldr	r3, [pc, #92]	; (80001dc <Intersection_7SEG_Init+0x90>)
 800017e:	681b      	ldr	r3, [r3, #0]
 8000180:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8000184:	b2da      	uxtb	r2, r3
 8000186:	4b16      	ldr	r3, [pc, #88]	; (80001e0 <Intersection_7SEG_Init+0x94>)
 8000188:	705a      	strb	r2, [r3, #1]

	for (uint8_t index = 0; index < 2*NO_OF_7SEG_DEVICE; index++){
 800018a:	2300      	movs	r3, #0
 800018c:	71fb      	strb	r3, [r7, #7]
 800018e:	e019      	b.n	80001c4 <Intersection_7SEG_Init+0x78>
		SevenSeg[index] = SevenSeg_Init(segmentPort, segmentPin,
 8000190:	79fb      	ldrb	r3, [r7, #7]
 8000192:	4a14      	ldr	r2, [pc, #80]	; (80001e4 <Intersection_7SEG_Init+0x98>)
 8000194:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000198:	79fb      	ldrb	r3, [r7, #7]
 800019a:	4a13      	ldr	r2, [pc, #76]	; (80001e8 <Intersection_7SEG_Init+0x9c>)
 800019c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80001a0:	2201      	movs	r2, #1
 80001a2:	4619      	mov	r1, r3
 80001a4:	f000 fb46 	bl	8000834 <ENPin_Init>
 80001a8:	4603      	mov	r3, r0
 80001aa:	79fc      	ldrb	r4, [r7, #7]
 80001ac:	461a      	mov	r2, r3
 80001ae:	490f      	ldr	r1, [pc, #60]	; (80001ec <Intersection_7SEG_Init+0xa0>)
 80001b0:	480f      	ldr	r0, [pc, #60]	; (80001f0 <Intersection_7SEG_Init+0xa4>)
 80001b2:	f000 fb8d 	bl	80008d0 <SevenSeg_Init>
 80001b6:	4603      	mov	r3, r0
 80001b8:	4a0e      	ldr	r2, [pc, #56]	; (80001f4 <Intersection_7SEG_Init+0xa8>)
 80001ba:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	for (uint8_t index = 0; index < 2*NO_OF_7SEG_DEVICE; index++){
 80001be:	79fb      	ldrb	r3, [r7, #7]
 80001c0:	3301      	adds	r3, #1
 80001c2:	71fb      	strb	r3, [r7, #7]
 80001c4:	79fb      	ldrb	r3, [r7, #7]
 80001c6:	2b03      	cmp	r3, #3
 80001c8:	d9e2      	bls.n	8000190 <Intersection_7SEG_Init+0x44>
				ENPin_Init(enPort[index], enPin[index], DISABLE));
	}
}
 80001ca:	bf00      	nop
 80001cc:	bf00      	nop
 80001ce:	370c      	adds	r7, #12
 80001d0:	46bd      	mov	sp, r7
 80001d2:	bd90      	pop	{r4, r7, pc}
 80001d4:	200001a8 	.word	0x200001a8
 80001d8:	20000118 	.word	0x20000118
 80001dc:	200001ac 	.word	0x200001ac
 80001e0:	2000011c 	.word	0x2000011c
 80001e4:	20000008 	.word	0x20000008
 80001e8:	20000000 	.word	0x20000000
 80001ec:	20000018 	.word	0x20000018
 80001f0:	20000028 	.word	0x20000028
 80001f4:	20000120 	.word	0x20000120

080001f8 <Segment_To_Buffer>:

void Segment_To_Buffer(void){
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b082      	sub	sp, #8
 80001fc:	af00      	add	r7, sp, #0
	vBuffer[0] = vClock->buffer[4];
 80001fe:	4b24      	ldr	r3, [pc, #144]	; (8000290 <Segment_To_Buffer+0x98>)
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8000206:	b2da      	uxtb	r2, r3
 8000208:	4b22      	ldr	r3, [pc, #136]	; (8000294 <Segment_To_Buffer+0x9c>)
 800020a:	701a      	strb	r2, [r3, #0]
	vBuffer[1] = vClock->buffer[5];
 800020c:	4b20      	ldr	r3, [pc, #128]	; (8000290 <Segment_To_Buffer+0x98>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8000214:	b2da      	uxtb	r2, r3
 8000216:	4b1f      	ldr	r3, [pc, #124]	; (8000294 <Segment_To_Buffer+0x9c>)
 8000218:	705a      	strb	r2, [r3, #1]
	hBuffer[0] = hClock->buffer[4];
 800021a:	4b1f      	ldr	r3, [pc, #124]	; (8000298 <Segment_To_Buffer+0xa0>)
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8000222:	b2da      	uxtb	r2, r3
 8000224:	4b1d      	ldr	r3, [pc, #116]	; (800029c <Segment_To_Buffer+0xa4>)
 8000226:	701a      	strb	r2, [r3, #0]
	hBuffer[1] = hClock->buffer[5];
 8000228:	4b1b      	ldr	r3, [pc, #108]	; (8000298 <Segment_To_Buffer+0xa0>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8000230:	b2da      	uxtb	r2, r3
 8000232:	4b1a      	ldr	r3, [pc, #104]	; (800029c <Segment_To_Buffer+0xa4>)
 8000234:	705a      	strb	r2, [r3, #1]

	for(uint8_t index = 0; index < NO_OF_7SEG_DEVICE; index++){
 8000236:	2300      	movs	r3, #0
 8000238:	71fb      	strb	r3, [r7, #7]
 800023a:	e020      	b.n	800027e <Segment_To_Buffer+0x86>
		SevenSeg[index]->Convert(SevenSeg[index], hBuffer[index]);
 800023c:	79fb      	ldrb	r3, [r7, #7]
 800023e:	4a18      	ldr	r2, [pc, #96]	; (80002a0 <Segment_To_Buffer+0xa8>)
 8000240:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000246:	79fa      	ldrb	r2, [r7, #7]
 8000248:	4915      	ldr	r1, [pc, #84]	; (80002a0 <Segment_To_Buffer+0xa8>)
 800024a:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 800024e:	79fa      	ldrb	r2, [r7, #7]
 8000250:	4912      	ldr	r1, [pc, #72]	; (800029c <Segment_To_Buffer+0xa4>)
 8000252:	5c8a      	ldrb	r2, [r1, r2]
 8000254:	4611      	mov	r1, r2
 8000256:	4798      	blx	r3
		SevenSeg[index + NO_OF_7SEG_DEVICE]->Convert(SevenSeg[index + NO_OF_7SEG_DEVICE], vBuffer[index]);
 8000258:	79fb      	ldrb	r3, [r7, #7]
 800025a:	3302      	adds	r3, #2
 800025c:	4a10      	ldr	r2, [pc, #64]	; (80002a0 <Segment_To_Buffer+0xa8>)
 800025e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000262:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000264:	79fa      	ldrb	r2, [r7, #7]
 8000266:	3202      	adds	r2, #2
 8000268:	490d      	ldr	r1, [pc, #52]	; (80002a0 <Segment_To_Buffer+0xa8>)
 800026a:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 800026e:	79fa      	ldrb	r2, [r7, #7]
 8000270:	4908      	ldr	r1, [pc, #32]	; (8000294 <Segment_To_Buffer+0x9c>)
 8000272:	5c8a      	ldrb	r2, [r1, r2]
 8000274:	4611      	mov	r1, r2
 8000276:	4798      	blx	r3
	for(uint8_t index = 0; index < NO_OF_7SEG_DEVICE; index++){
 8000278:	79fb      	ldrb	r3, [r7, #7]
 800027a:	3301      	adds	r3, #1
 800027c:	71fb      	strb	r3, [r7, #7]
 800027e:	79fb      	ldrb	r3, [r7, #7]
 8000280:	2b01      	cmp	r3, #1
 8000282:	d9db      	bls.n	800023c <Segment_To_Buffer+0x44>
	}
}
 8000284:	bf00      	nop
 8000286:	bf00      	nop
 8000288:	3708      	adds	r7, #8
 800028a:	46bd      	mov	sp, r7
 800028c:	bd80      	pop	{r7, pc}
 800028e:	bf00      	nop
 8000290:	200001a8 	.word	0x200001a8
 8000294:	20000118 	.word	0x20000118
 8000298:	200001ac 	.word	0x200001ac
 800029c:	2000011c 	.word	0x2000011c
 80002a0:	20000120 	.word	0x20000120

080002a4 <Intersection_7SEG_Display>:
void Intersection_7SEG_Display(void){
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b082      	sub	sp, #8
 80002a8:	af00      	add	r7, sp, #0
	Segment_To_Buffer();
 80002aa:	f7ff ffa5 	bl	80001f8 <Segment_To_Buffer>
	static uint8_t counter = 0;
	SevenSeg[counter]->enPin->On(SevenSeg[counter]->enPin);
 80002ae:	4b26      	ldr	r3, [pc, #152]	; (8000348 <Intersection_7SEG_Display+0xa4>)
 80002b0:	781b      	ldrb	r3, [r3, #0]
 80002b2:	461a      	mov	r2, r3
 80002b4:	4b25      	ldr	r3, [pc, #148]	; (800034c <Intersection_7SEG_Display+0xa8>)
 80002b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80002ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80002bc:	68db      	ldr	r3, [r3, #12]
 80002be:	4a22      	ldr	r2, [pc, #136]	; (8000348 <Intersection_7SEG_Display+0xa4>)
 80002c0:	7812      	ldrb	r2, [r2, #0]
 80002c2:	4611      	mov	r1, r2
 80002c4:	4a21      	ldr	r2, [pc, #132]	; (800034c <Intersection_7SEG_Display+0xa8>)
 80002c6:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80002ca:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80002cc:	4610      	mov	r0, r2
 80002ce:	4798      	blx	r3
	for (uint8_t index = 0; index < 2*NO_OF_7SEG_DEVICE; index++){
 80002d0:	2300      	movs	r3, #0
 80002d2:	71fb      	strb	r3, [r7, #7]
 80002d4:	e014      	b.n	8000300 <Intersection_7SEG_Display+0x5c>
		if (index != counter)
 80002d6:	4b1c      	ldr	r3, [pc, #112]	; (8000348 <Intersection_7SEG_Display+0xa4>)
 80002d8:	781b      	ldrb	r3, [r3, #0]
 80002da:	79fa      	ldrb	r2, [r7, #7]
 80002dc:	429a      	cmp	r2, r3
 80002de:	d00c      	beq.n	80002fa <Intersection_7SEG_Display+0x56>
			SevenSeg[index]->enPin->Off(SevenSeg[index]->enPin);
 80002e0:	79fb      	ldrb	r3, [r7, #7]
 80002e2:	4a1a      	ldr	r2, [pc, #104]	; (800034c <Intersection_7SEG_Display+0xa8>)
 80002e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80002ea:	691b      	ldr	r3, [r3, #16]
 80002ec:	79fa      	ldrb	r2, [r7, #7]
 80002ee:	4917      	ldr	r1, [pc, #92]	; (800034c <Intersection_7SEG_Display+0xa8>)
 80002f0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80002f4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80002f6:	4610      	mov	r0, r2
 80002f8:	4798      	blx	r3
	for (uint8_t index = 0; index < 2*NO_OF_7SEG_DEVICE; index++){
 80002fa:	79fb      	ldrb	r3, [r7, #7]
 80002fc:	3301      	adds	r3, #1
 80002fe:	71fb      	strb	r3, [r7, #7]
 8000300:	79fb      	ldrb	r3, [r7, #7]
 8000302:	2b03      	cmp	r3, #3
 8000304:	d9e7      	bls.n	80002d6 <Intersection_7SEG_Display+0x32>
	}
	SevenSeg[counter]->Display(SevenSeg[counter]);
 8000306:	4b10      	ldr	r3, [pc, #64]	; (8000348 <Intersection_7SEG_Display+0xa4>)
 8000308:	781b      	ldrb	r3, [r3, #0]
 800030a:	461a      	mov	r2, r3
 800030c:	4b0f      	ldr	r3, [pc, #60]	; (800034c <Intersection_7SEG_Display+0xa8>)
 800030e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000314:	4a0c      	ldr	r2, [pc, #48]	; (8000348 <Intersection_7SEG_Display+0xa4>)
 8000316:	7812      	ldrb	r2, [r2, #0]
 8000318:	4611      	mov	r1, r2
 800031a:	4a0c      	ldr	r2, [pc, #48]	; (800034c <Intersection_7SEG_Display+0xa8>)
 800031c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8000320:	4610      	mov	r0, r2
 8000322:	4798      	blx	r3
	counter = (counter + 1) % (2* NO_OF_7SEG_DEVICE);
 8000324:	4b08      	ldr	r3, [pc, #32]	; (8000348 <Intersection_7SEG_Display+0xa4>)
 8000326:	781b      	ldrb	r3, [r3, #0]
 8000328:	3301      	adds	r3, #1
 800032a:	425a      	negs	r2, r3
 800032c:	f003 0303 	and.w	r3, r3, #3
 8000330:	f002 0203 	and.w	r2, r2, #3
 8000334:	bf58      	it	pl
 8000336:	4253      	negpl	r3, r2
 8000338:	b2da      	uxtb	r2, r3
 800033a:	4b03      	ldr	r3, [pc, #12]	; (8000348 <Intersection_7SEG_Display+0xa4>)
 800033c:	701a      	strb	r2, [r3, #0]
}
 800033e:	bf00      	nop
 8000340:	3708      	adds	r7, #8
 8000342:	46bd      	mov	sp, r7
 8000344:	bd80      	pop	{r7, pc}
 8000346:	bf00      	nop
 8000348:	20000130 	.word	0x20000130
 800034c:	20000120 	.word	0x20000120

08000350 <Traffic_Button_Init>:

Button_TypeDef* buttonMode;
Button_TypeDef* buttonTime;
Button_TypeDef* buttonSet;

void Traffic_Button_Init(void){
 8000350:	b580      	push	{r7, lr}
 8000352:	af00      	add	r7, sp, #0
	buttonMode	= Button_Init(buttonPort[0], buttonPin[0], NULL);
 8000354:	4b11      	ldr	r3, [pc, #68]	; (800039c <Traffic_Button_Init+0x4c>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	4a11      	ldr	r2, [pc, #68]	; (80003a0 <Traffic_Button_Init+0x50>)
 800035a:	8811      	ldrh	r1, [r2, #0]
 800035c:	2200      	movs	r2, #0
 800035e:	4618      	mov	r0, r3
 8000360:	f000 fb42 	bl	80009e8 <Button_Init>
 8000364:	4603      	mov	r3, r0
 8000366:	4a0f      	ldr	r2, [pc, #60]	; (80003a4 <Traffic_Button_Init+0x54>)
 8000368:	6013      	str	r3, [r2, #0]
	buttonTime	= Button_Init(buttonPort[1], buttonPin[1], NULL);
 800036a:	4b0c      	ldr	r3, [pc, #48]	; (800039c <Traffic_Button_Init+0x4c>)
 800036c:	685b      	ldr	r3, [r3, #4]
 800036e:	4a0c      	ldr	r2, [pc, #48]	; (80003a0 <Traffic_Button_Init+0x50>)
 8000370:	8851      	ldrh	r1, [r2, #2]
 8000372:	2200      	movs	r2, #0
 8000374:	4618      	mov	r0, r3
 8000376:	f000 fb37 	bl	80009e8 <Button_Init>
 800037a:	4603      	mov	r3, r0
 800037c:	4a0a      	ldr	r2, [pc, #40]	; (80003a8 <Traffic_Button_Init+0x58>)
 800037e:	6013      	str	r3, [r2, #0]
	buttonSet	= Button_Init(buttonPort[2], buttonPin[2], NULL);
 8000380:	4b06      	ldr	r3, [pc, #24]	; (800039c <Traffic_Button_Init+0x4c>)
 8000382:	689b      	ldr	r3, [r3, #8]
 8000384:	4a06      	ldr	r2, [pc, #24]	; (80003a0 <Traffic_Button_Init+0x50>)
 8000386:	8891      	ldrh	r1, [r2, #4]
 8000388:	2200      	movs	r2, #0
 800038a:	4618      	mov	r0, r3
 800038c:	f000 fb2c 	bl	80009e8 <Button_Init>
 8000390:	4603      	mov	r3, r0
 8000392:	4a06      	ldr	r2, [pc, #24]	; (80003ac <Traffic_Button_Init+0x5c>)
 8000394:	6013      	str	r3, [r2, #0]
}
 8000396:	bf00      	nop
 8000398:	bd80      	pop	{r7, pc}
 800039a:	bf00      	nop
 800039c:	2000004c 	.word	0x2000004c
 80003a0:	20000044 	.word	0x20000044
 80003a4:	20000134 	.word	0x20000134
 80003a8:	20000138 	.word	0x20000138
 80003ac:	2000013c 	.word	0x2000013c

080003b0 <Button_Scan>:

void Button_Scan(void){
 80003b0:	b580      	push	{r7, lr}
 80003b2:	af00      	add	r7, sp, #0
	buttonMode->Tap_Mode(buttonMode);
 80003b4:	4b0b      	ldr	r3, [pc, #44]	; (80003e4 <Button_Scan+0x34>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	695b      	ldr	r3, [r3, #20]
 80003ba:	4a0a      	ldr	r2, [pc, #40]	; (80003e4 <Button_Scan+0x34>)
 80003bc:	6812      	ldr	r2, [r2, #0]
 80003be:	4610      	mov	r0, r2
 80003c0:	4798      	blx	r3
	buttonTime->Tap_Mode(buttonTime);
 80003c2:	4b09      	ldr	r3, [pc, #36]	; (80003e8 <Button_Scan+0x38>)
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	695b      	ldr	r3, [r3, #20]
 80003c8:	4a07      	ldr	r2, [pc, #28]	; (80003e8 <Button_Scan+0x38>)
 80003ca:	6812      	ldr	r2, [r2, #0]
 80003cc:	4610      	mov	r0, r2
 80003ce:	4798      	blx	r3
	buttonSet->Tap_Mode(buttonSet);
 80003d0:	4b06      	ldr	r3, [pc, #24]	; (80003ec <Button_Scan+0x3c>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	695b      	ldr	r3, [r3, #20]
 80003d6:	4a05      	ldr	r2, [pc, #20]	; (80003ec <Button_Scan+0x3c>)
 80003d8:	6812      	ldr	r2, [r2, #0]
 80003da:	4610      	mov	r0, r2
 80003dc:	4798      	blx	r3
}
 80003de:	bf00      	nop
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	bf00      	nop
 80003e4:	20000134 	.word	0x20000134
 80003e8:	20000138 	.word	0x20000138
 80003ec:	2000013c 	.word	0x2000013c

080003f0 <STIM_Init>:
/*
 * SOFTWARE TIMER TYPE DEFINITION
 */
/**************************************************************************************/

STIM_TypeDef * STIM_Init(uint16_t delay, uint16_t interrupt){
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b084      	sub	sp, #16
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	4603      	mov	r3, r0
 80003f8:	460a      	mov	r2, r1
 80003fa:	80fb      	strh	r3, [r7, #6]
 80003fc:	4613      	mov	r3, r2
 80003fe:	80bb      	strh	r3, [r7, #4]
	STIM_TypeDef * stim 		= malloc(sizeof(STIM_TypeDef));
 8000400:	2014      	movs	r0, #20
 8000402:	f002 fe43 	bl	800308c <malloc>
 8000406:	4603      	mov	r3, r0
 8000408:	60fb      	str	r3, [r7, #12]
	stim->delay 				= delay;
 800040a:	68fb      	ldr	r3, [r7, #12]
 800040c:	88fa      	ldrh	r2, [r7, #6]
 800040e:	801a      	strh	r2, [r3, #0]
	stim->interrupt 			= interrupt;
 8000410:	68fb      	ldr	r3, [r7, #12]
 8000412:	88ba      	ldrh	r2, [r7, #4]
 8000414:	805a      	strh	r2, [r3, #2]
	stim->counter				= 0;
 8000416:	68fb      	ldr	r3, [r7, #12]
 8000418:	2200      	movs	r2, #0
 800041a:	809a      	strh	r2, [r3, #4]

	stim->Set_Default 			= STIM_Set_Default;
 800041c:	68fb      	ldr	r3, [r7, #12]
 800041e:	4a06      	ldr	r2, [pc, #24]	; (8000438 <STIM_Init+0x48>)
 8000420:	609a      	str	r2, [r3, #8]
	stim->Set_Manual			= STIM_Set_Manual;
 8000422:	68fb      	ldr	r3, [r7, #12]
 8000424:	4a05      	ldr	r2, [pc, #20]	; (800043c <STIM_Init+0x4c>)
 8000426:	60da      	str	r2, [r3, #12]
	stim->Timer_Run 			= STIM_Timer_Run;
 8000428:	68fb      	ldr	r3, [r7, #12]
 800042a:	4a05      	ldr	r2, [pc, #20]	; (8000440 <STIM_Init+0x50>)
 800042c:	611a      	str	r2, [r3, #16]
	return stim;
 800042e:	68fb      	ldr	r3, [r7, #12]
}
 8000430:	4618      	mov	r0, r3
 8000432:	3710      	adds	r7, #16
 8000434:	46bd      	mov	sp, r7
 8000436:	bd80      	pop	{r7, pc}
 8000438:	08000445 	.word	0x08000445
 800043c:	0800046f 	.word	0x0800046f
 8000440:	080004a3 	.word	0x080004a3

08000444 <STIM_Set_Default>:
void STIM_Set_Default(STIM_TypeDef* stim){
 8000444:	b480      	push	{r7}
 8000446:	b083      	sub	sp, #12
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
	stim->counter 			= stim->delay/stim->interrupt;
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	881a      	ldrh	r2, [r3, #0]
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	885b      	ldrh	r3, [r3, #2]
 8000454:	fbb2 f3f3 	udiv	r3, r2, r3
 8000458:	b29a      	uxth	r2, r3
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	809a      	strh	r2, [r3, #4]
	stim->flag 	 			= 0;
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	2200      	movs	r2, #0
 8000462:	719a      	strb	r2, [r3, #6]
}
 8000464:	bf00      	nop
 8000466:	370c      	adds	r7, #12
 8000468:	46bd      	mov	sp, r7
 800046a:	bc80      	pop	{r7}
 800046c:	4770      	bx	lr

0800046e <STIM_Set_Manual>:
void STIM_Set_Manual(STIM_TypeDef* stim, uint16_t delay){
 800046e:	b480      	push	{r7}
 8000470:	b083      	sub	sp, #12
 8000472:	af00      	add	r7, sp, #0
 8000474:	6078      	str	r0, [r7, #4]
 8000476:	460b      	mov	r3, r1
 8000478:	807b      	strh	r3, [r7, #2]
	stim->delay				= delay;
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	887a      	ldrh	r2, [r7, #2]
 800047e:	801a      	strh	r2, [r3, #0]
	stim->counter 			= stim->delay/stim->interrupt;
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	881a      	ldrh	r2, [r3, #0]
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	885b      	ldrh	r3, [r3, #2]
 8000488:	fbb2 f3f3 	udiv	r3, r2, r3
 800048c:	b29a      	uxth	r2, r3
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	809a      	strh	r2, [r3, #4]
	stim->flag 	 			= 0;
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	2200      	movs	r2, #0
 8000496:	719a      	strb	r2, [r3, #6]
}
 8000498:	bf00      	nop
 800049a:	370c      	adds	r7, #12
 800049c:	46bd      	mov	sp, r7
 800049e:	bc80      	pop	{r7}
 80004a0:	4770      	bx	lr

080004a2 <STIM_Timer_Run>:
void STIM_Timer_Run(STIM_TypeDef* stim){
 80004a2:	b480      	push	{r7}
 80004a4:	b083      	sub	sp, #12
 80004a6:	af00      	add	r7, sp, #0
 80004a8:	6078      	str	r0, [r7, #4]
	if(stim->counter > 0){
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	889b      	ldrh	r3, [r3, #4]
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d00c      	beq.n	80004cc <STIM_Timer_Run+0x2a>
		stim->counter--;
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	889b      	ldrh	r3, [r3, #4]
 80004b6:	3b01      	subs	r3, #1
 80004b8:	b29a      	uxth	r2, r3
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	809a      	strh	r2, [r3, #4]
		if(stim->counter <= 0){
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	889b      	ldrh	r3, [r3, #4]
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d102      	bne.n	80004cc <STIM_Timer_Run+0x2a>
			stim->flag = 1;
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	2201      	movs	r2, #1
 80004ca:	719a      	strb	r2, [r3, #6]
		}
	}
}
 80004cc:	bf00      	nop
 80004ce:	370c      	adds	r7, #12
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bc80      	pop	{r7}
 80004d4:	4770      	bx	lr
	...

080004d8 <Led_Init>:
 * LED TYPE DEFINITION
 */
/**************************************************************************************/


LED_TypeDef * Led_Init(GPIO_TypeDef* port, uint16_t pin, GPIO_PinState state){
 80004d8:	b580      	push	{r7, lr}
 80004da:	b084      	sub	sp, #16
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
 80004e0:	460b      	mov	r3, r1
 80004e2:	807b      	strh	r3, [r7, #2]
 80004e4:	4613      	mov	r3, r2
 80004e6:	707b      	strb	r3, [r7, #1]
	LED_TypeDef * led 	= malloc(sizeof(LED_TypeDef));
 80004e8:	2018      	movs	r0, #24
 80004ea:	f002 fdcf 	bl	800308c <malloc>
 80004ee:	4603      	mov	r3, r0
 80004f0:	60fb      	str	r3, [r7, #12]
	led->port 			= port;
 80004f2:	68fb      	ldr	r3, [r7, #12]
 80004f4:	687a      	ldr	r2, [r7, #4]
 80004f6:	601a      	str	r2, [r3, #0]
	led->pin 			= pin;
 80004f8:	68fb      	ldr	r3, [r7, #12]
 80004fa:	887a      	ldrh	r2, [r7, #2]
 80004fc:	809a      	strh	r2, [r3, #4]
	led->state 			= state;
 80004fe:	68fb      	ldr	r3, [r7, #12]
 8000500:	787a      	ldrb	r2, [r7, #1]
 8000502:	719a      	strb	r2, [r3, #6]
	led->Display 		= Led_Display;
 8000504:	68fb      	ldr	r3, [r7, #12]
 8000506:	4a08      	ldr	r2, [pc, #32]	; (8000528 <Led_Init+0x50>)
 8000508:	609a      	str	r2, [r3, #8]
	led->On 			= Led_On;
 800050a:	68fb      	ldr	r3, [r7, #12]
 800050c:	4a07      	ldr	r2, [pc, #28]	; (800052c <Led_Init+0x54>)
 800050e:	611a      	str	r2, [r3, #16]
	led->Off 			= Led_Off;
 8000510:	68fb      	ldr	r3, [r7, #12]
 8000512:	4a07      	ldr	r2, [pc, #28]	; (8000530 <Led_Init+0x58>)
 8000514:	615a      	str	r2, [r3, #20]
	led->Toggle 		= Led_Toggle;
 8000516:	68fb      	ldr	r3, [r7, #12]
 8000518:	4a06      	ldr	r2, [pc, #24]	; (8000534 <Led_Init+0x5c>)
 800051a:	60da      	str	r2, [r3, #12]
	return led;
 800051c:	68fb      	ldr	r3, [r7, #12]
}
 800051e:	4618      	mov	r0, r3
 8000520:	3710      	adds	r7, #16
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	08000539 	.word	0x08000539
 800052c:	0800057b 	.word	0x0800057b
 8000530:	08000597 	.word	0x08000597
 8000534:	0800055b 	.word	0x0800055b

08000538 <Led_Display>:

void Led_Display(LED_TypeDef* led){
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(led->port, led->pin, led->state);
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	6818      	ldr	r0, [r3, #0]
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	8899      	ldrh	r1, [r3, #4]
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	799b      	ldrb	r3, [r3, #6]
 800054c:	461a      	mov	r2, r3
 800054e:	f001 fd76 	bl	800203e <HAL_GPIO_WritePin>
}
 8000552:	bf00      	nop
 8000554:	3708      	adds	r7, #8
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}

0800055a <Led_Toggle>:
void Led_Toggle(LED_TypeDef* led){
 800055a:	b580      	push	{r7, lr}
 800055c:	b082      	sub	sp, #8
 800055e:	af00      	add	r7, sp, #0
 8000560:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(led->port, led->pin);
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	681a      	ldr	r2, [r3, #0]
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	889b      	ldrh	r3, [r3, #4]
 800056a:	4619      	mov	r1, r3
 800056c:	4610      	mov	r0, r2
 800056e:	f001 fd7e 	bl	800206e <HAL_GPIO_TogglePin>
}
 8000572:	bf00      	nop
 8000574:	3708      	adds	r7, #8
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}

0800057a <Led_On>:
void Led_On(LED_TypeDef* led){
 800057a:	b580      	push	{r7, lr}
 800057c:	b082      	sub	sp, #8
 800057e:	af00      	add	r7, sp, #0
 8000580:	6078      	str	r0, [r7, #4]
	led->state = ENABLE;
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	2200      	movs	r2, #0
 8000586:	719a      	strb	r2, [r3, #6]
	Led_Display(led);
 8000588:	6878      	ldr	r0, [r7, #4]
 800058a:	f7ff ffd5 	bl	8000538 <Led_Display>
}
 800058e:	bf00      	nop
 8000590:	3708      	adds	r7, #8
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}

08000596 <Led_Off>:
void Led_Off(LED_TypeDef* led){
 8000596:	b580      	push	{r7, lr}
 8000598:	b082      	sub	sp, #8
 800059a:	af00      	add	r7, sp, #0
 800059c:	6078      	str	r0, [r7, #4]
	led->state = DISABLE;
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	2201      	movs	r2, #1
 80005a2:	719a      	strb	r2, [r3, #6]
	Led_Display(led);
 80005a4:	6878      	ldr	r0, [r7, #4]
 80005a6:	f7ff ffc7 	bl	8000538 <Led_Display>
}
 80005aa:	bf00      	nop
 80005ac:	3708      	adds	r7, #8
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
	...

080005b4 <Clock_Init>:
/*
 * CLOCK TYPE DEFINTION
 */
/**************************************************************************************/

Clock_TypeDef * Clock_Init (uint8_t hour, uint8_t minute, uint8_t second){
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	4603      	mov	r3, r0
 80005bc:	71fb      	strb	r3, [r7, #7]
 80005be:	460b      	mov	r3, r1
 80005c0:	71bb      	strb	r3, [r7, #6]
 80005c2:	4613      	mov	r3, r2
 80005c4:	717b      	strb	r3, [r7, #5]
	Clock_TypeDef * clock 	= malloc(sizeof(Clock_TypeDef));
 80005c6:	201c      	movs	r0, #28
 80005c8:	f002 fd60 	bl	800308c <malloc>
 80005cc:	4603      	mov	r3, r0
 80005ce:	60fb      	str	r3, [r7, #12]

	clock->hour				= hour;
 80005d0:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	701a      	strb	r2, [r3, #0]
	clock->minute 			= minute;
 80005d8:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	705a      	strb	r2, [r3, #1]
	clock->second 			= second;
 80005e0:	f997 2005 	ldrsb.w	r2, [r7, #5]
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	709a      	strb	r2, [r3, #2]
	clock->Modify			= Time_Modify;
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	4a0a      	ldr	r2, [pc, #40]	; (8000614 <Clock_Init+0x60>)
 80005ec:	60da      	str	r2, [r3, #12]
	clock->Up				= Clock_Counter_Up;
 80005ee:	68fb      	ldr	r3, [r7, #12]
 80005f0:	4a09      	ldr	r2, [pc, #36]	; (8000618 <Clock_Init+0x64>)
 80005f2:	611a      	str	r2, [r3, #16]
	clock->Down				= Clock_Counter_Down;
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	4a09      	ldr	r2, [pc, #36]	; (800061c <Clock_Init+0x68>)
 80005f8:	615a      	str	r2, [r3, #20]
	clock->Update			= Update_Clock_Buffer;
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	4a08      	ldr	r2, [pc, #32]	; (8000620 <Clock_Init+0x6c>)
 80005fe:	619a      	str	r2, [r3, #24]

	clock->Update(clock);
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	699b      	ldr	r3, [r3, #24]
 8000604:	68f8      	ldr	r0, [r7, #12]
 8000606:	4798      	blx	r3
	return clock;
 8000608:	68fb      	ldr	r3, [r7, #12]
}
 800060a:	4618      	mov	r0, r3
 800060c:	3710      	adds	r7, #16
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	08000625 	.word	0x08000625
 8000618:	08000667 	.word	0x08000667
 800061c:	080006e5 	.word	0x080006e5
 8000620:	08000771 	.word	0x08000771

08000624 <Time_Modify>:
void Time_Modify(Clock_TypeDef* clock, uint8_t hour, uint8_t minute, uint8_t second){
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	4608      	mov	r0, r1
 800062e:	4611      	mov	r1, r2
 8000630:	461a      	mov	r2, r3
 8000632:	4603      	mov	r3, r0
 8000634:	70fb      	strb	r3, [r7, #3]
 8000636:	460b      	mov	r3, r1
 8000638:	70bb      	strb	r3, [r7, #2]
 800063a:	4613      	mov	r3, r2
 800063c:	707b      	strb	r3, [r7, #1]
	clock->hour 		= hour;
 800063e:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	701a      	strb	r2, [r3, #0]
	clock->minute		= minute;
 8000646:	f997 2002 	ldrsb.w	r2, [r7, #2]
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	705a      	strb	r2, [r3, #1]
	clock->second 		= second;
 800064e:	f997 2001 	ldrsb.w	r2, [r7, #1]
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	709a      	strb	r2, [r3, #2]
	clock->Update(clock);
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	699b      	ldr	r3, [r3, #24]
 800065a:	6878      	ldr	r0, [r7, #4]
 800065c:	4798      	blx	r3
}
 800065e:	bf00      	nop
 8000660:	3708      	adds	r7, #8
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}

08000666 <Clock_Counter_Up>:

void Clock_Counter_Up(Clock_TypeDef* clock){
 8000666:	b580      	push	{r7, lr}
 8000668:	b082      	sub	sp, #8
 800066a:	af00      	add	r7, sp, #0
 800066c:	6078      	str	r0, [r7, #4]
	clock->second++;
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000674:	b2db      	uxtb	r3, r3
 8000676:	3301      	adds	r3, #1
 8000678:	b2db      	uxtb	r3, r3
 800067a:	b25a      	sxtb	r2, r3
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	709a      	strb	r2, [r3, #2]
	if (clock->second >= SECOND_LIMIT){
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000686:	2b3b      	cmp	r3, #59	; 0x3b
 8000688:	dd0b      	ble.n	80006a2 <Clock_Counter_Up+0x3c>
		clock->second	= 0;
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	2200      	movs	r2, #0
 800068e:	709a      	strb	r2, [r3, #2]
		clock->minute++;
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000696:	b2db      	uxtb	r3, r3
 8000698:	3301      	adds	r3, #1
 800069a:	b2db      	uxtb	r3, r3
 800069c:	b25a      	sxtb	r2, r3
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	705a      	strb	r2, [r3, #1]
	}
	if (clock->minute >= MINUTE_LIMIT){
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80006a8:	2b3b      	cmp	r3, #59	; 0x3b
 80006aa:	dd0b      	ble.n	80006c4 <Clock_Counter_Up+0x5e>
		clock->minute 	= 0;
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	2200      	movs	r2, #0
 80006b0:	705a      	strb	r2, [r3, #1]
		clock->hour++;
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	f993 3000 	ldrsb.w	r3, [r3]
 80006b8:	b2db      	uxtb	r3, r3
 80006ba:	3301      	adds	r3, #1
 80006bc:	b2db      	uxtb	r3, r3
 80006be:	b25a      	sxtb	r2, r3
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	701a      	strb	r2, [r3, #0]
	}
	if (clock->hour >= HOUR_LIMIT){
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	f993 3000 	ldrsb.w	r3, [r3]
 80006ca:	2b17      	cmp	r3, #23
 80006cc:	dd02      	ble.n	80006d4 <Clock_Counter_Up+0x6e>
		clock->hour		= 0;
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	2200      	movs	r2, #0
 80006d2:	701a      	strb	r2, [r3, #0]
	}
	clock->Update(clock);
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	699b      	ldr	r3, [r3, #24]
 80006d8:	6878      	ldr	r0, [r7, #4]
 80006da:	4798      	blx	r3
}
 80006dc:	bf00      	nop
 80006de:	3708      	adds	r7, #8
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}

080006e4 <Clock_Counter_Down>:

void Clock_Counter_Down(Clock_TypeDef* clock){
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
	clock->second--;
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80006f2:	b2db      	uxtb	r3, r3
 80006f4:	3b01      	subs	r3, #1
 80006f6:	b2db      	uxtb	r3, r3
 80006f8:	b25a      	sxtb	r2, r3
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	709a      	strb	r2, [r3, #2]
	if (clock->second < 0){
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000704:	2b00      	cmp	r3, #0
 8000706:	da0b      	bge.n	8000720 <Clock_Counter_Down+0x3c>
		clock->second	= SECOND_LIMIT;
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	223c      	movs	r2, #60	; 0x3c
 800070c:	709a      	strb	r2, [r3, #2]
		clock->minute--;
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000714:	b2db      	uxtb	r3, r3
 8000716:	3b01      	subs	r3, #1
 8000718:	b2db      	uxtb	r3, r3
 800071a:	b25a      	sxtb	r2, r3
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	705a      	strb	r2, [r3, #1]
	}
	if (clock->minute < 0){
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000726:	2b00      	cmp	r3, #0
 8000728:	da0b      	bge.n	8000742 <Clock_Counter_Down+0x5e>
		clock->minute 	= MINUTE_LIMIT;
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	223c      	movs	r2, #60	; 0x3c
 800072e:	705a      	strb	r2, [r3, #1]
		clock->hour--;
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	f993 3000 	ldrsb.w	r3, [r3]
 8000736:	b2db      	uxtb	r3, r3
 8000738:	3b01      	subs	r3, #1
 800073a:	b2db      	uxtb	r3, r3
 800073c:	b25a      	sxtb	r2, r3
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	701a      	strb	r2, [r3, #0]
	}
	if (clock->hour 	< 0){
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	f993 3000 	ldrsb.w	r3, [r3]
 8000748:	2b00      	cmp	r3, #0
 800074a:	da08      	bge.n	800075e <Clock_Counter_Down+0x7a>
		clock->hour		= 0;
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	2200      	movs	r2, #0
 8000750:	701a      	strb	r2, [r3, #0]
		clock->minute 	= 0;
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	2200      	movs	r2, #0
 8000756:	705a      	strb	r2, [r3, #1]
		clock->second 	= 0;
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	2200      	movs	r2, #0
 800075c:	709a      	strb	r2, [r3, #2]
	}
	clock->Update(clock);
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	699b      	ldr	r3, [r3, #24]
 8000762:	6878      	ldr	r0, [r7, #4]
 8000764:	4798      	blx	r3
}
 8000766:	bf00      	nop
 8000768:	3708      	adds	r7, #8
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
	...

08000770 <Update_Clock_Buffer>:

void Update_Clock_Buffer(Clock_TypeDef *clock){
 8000770:	b480      	push	{r7}
 8000772:	b083      	sub	sp, #12
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
	clock->buffer[0] 	= clock->hour 		/ DECIMAL;
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	f993 3000 	ldrsb.w	r3, [r3]
 800077e:	4a2c      	ldr	r2, [pc, #176]	; (8000830 <Update_Clock_Buffer+0xc0>)
 8000780:	fb82 1203 	smull	r1, r2, r2, r3
 8000784:	1092      	asrs	r2, r2, #2
 8000786:	17db      	asrs	r3, r3, #31
 8000788:	1ad3      	subs	r3, r2, r3
 800078a:	b25a      	sxtb	r2, r3
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	70da      	strb	r2, [r3, #3]
	clock->buffer[1] 	= clock->hour 		% DECIMAL;
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	f993 2000 	ldrsb.w	r2, [r3]
 8000796:	4b26      	ldr	r3, [pc, #152]	; (8000830 <Update_Clock_Buffer+0xc0>)
 8000798:	fb83 1302 	smull	r1, r3, r3, r2
 800079c:	1099      	asrs	r1, r3, #2
 800079e:	17d3      	asrs	r3, r2, #31
 80007a0:	1ac9      	subs	r1, r1, r3
 80007a2:	460b      	mov	r3, r1
 80007a4:	009b      	lsls	r3, r3, #2
 80007a6:	440b      	add	r3, r1
 80007a8:	005b      	lsls	r3, r3, #1
 80007aa:	1ad3      	subs	r3, r2, r3
 80007ac:	b25a      	sxtb	r2, r3
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	711a      	strb	r2, [r3, #4]
	clock->buffer[2]	= clock->minute 	/ DECIMAL;
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80007b8:	4a1d      	ldr	r2, [pc, #116]	; (8000830 <Update_Clock_Buffer+0xc0>)
 80007ba:	fb82 1203 	smull	r1, r2, r2, r3
 80007be:	1092      	asrs	r2, r2, #2
 80007c0:	17db      	asrs	r3, r3, #31
 80007c2:	1ad3      	subs	r3, r2, r3
 80007c4:	b25a      	sxtb	r2, r3
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	715a      	strb	r2, [r3, #5]
	clock->buffer[3] 	= clock->minute 	% DECIMAL;
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	f993 2001 	ldrsb.w	r2, [r3, #1]
 80007d0:	4b17      	ldr	r3, [pc, #92]	; (8000830 <Update_Clock_Buffer+0xc0>)
 80007d2:	fb83 1302 	smull	r1, r3, r3, r2
 80007d6:	1099      	asrs	r1, r3, #2
 80007d8:	17d3      	asrs	r3, r2, #31
 80007da:	1ac9      	subs	r1, r1, r3
 80007dc:	460b      	mov	r3, r1
 80007de:	009b      	lsls	r3, r3, #2
 80007e0:	440b      	add	r3, r1
 80007e2:	005b      	lsls	r3, r3, #1
 80007e4:	1ad3      	subs	r3, r2, r3
 80007e6:	b25a      	sxtb	r2, r3
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	719a      	strb	r2, [r3, #6]
	clock->buffer[4]	= clock->second 	/ DECIMAL;
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80007f2:	4a0f      	ldr	r2, [pc, #60]	; (8000830 <Update_Clock_Buffer+0xc0>)
 80007f4:	fb82 1203 	smull	r1, r2, r2, r3
 80007f8:	1092      	asrs	r2, r2, #2
 80007fa:	17db      	asrs	r3, r3, #31
 80007fc:	1ad3      	subs	r3, r2, r3
 80007fe:	b25a      	sxtb	r2, r3
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	71da      	strb	r2, [r3, #7]
	clock->buffer[5] 	= clock->second 	% DECIMAL;
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800080a:	4b09      	ldr	r3, [pc, #36]	; (8000830 <Update_Clock_Buffer+0xc0>)
 800080c:	fb83 1302 	smull	r1, r3, r3, r2
 8000810:	1099      	asrs	r1, r3, #2
 8000812:	17d3      	asrs	r3, r2, #31
 8000814:	1ac9      	subs	r1, r1, r3
 8000816:	460b      	mov	r3, r1
 8000818:	009b      	lsls	r3, r3, #2
 800081a:	440b      	add	r3, r1
 800081c:	005b      	lsls	r3, r3, #1
 800081e:	1ad3      	subs	r3, r2, r3
 8000820:	b25a      	sxtb	r2, r3
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	721a      	strb	r2, [r3, #8]
}
 8000826:	bf00      	nop
 8000828:	370c      	adds	r7, #12
 800082a:	46bd      	mov	sp, r7
 800082c:	bc80      	pop	{r7}
 800082e:	4770      	bx	lr
 8000830:	66666667 	.word	0x66666667

08000834 <ENPin_Init>:
/*
 * ENABLE PIN TYPE DEFINITION
 */
/**************************************************************************************/

ENPin_TypeDef * ENPin_Init(GPIO_TypeDef* port, uint16_t pin, GPIO_PinState state){
 8000834:	b580      	push	{r7, lr}
 8000836:	b084      	sub	sp, #16
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
 800083c:	460b      	mov	r3, r1
 800083e:	807b      	strh	r3, [r7, #2]
 8000840:	4613      	mov	r3, r2
 8000842:	707b      	strb	r3, [r7, #1]
	ENPin_TypeDef * enPin = malloc(sizeof(ENPin_TypeDef));
 8000844:	2014      	movs	r0, #20
 8000846:	f002 fc21 	bl	800308c <malloc>
 800084a:	4603      	mov	r3, r0
 800084c:	60fb      	str	r3, [r7, #12]
	enPin->pin = pin;
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	887a      	ldrh	r2, [r7, #2]
 8000852:	801a      	strh	r2, [r3, #0]
	enPin->port = port;
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	687a      	ldr	r2, [r7, #4]
 8000858:	605a      	str	r2, [r3, #4]
	enPin->state = state;
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	787a      	ldrb	r2, [r7, #1]
 800085e:	721a      	strb	r2, [r3, #8]

	enPin->On = ENPin_On;
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	4a05      	ldr	r2, [pc, #20]	; (8000878 <ENPin_Init+0x44>)
 8000864:	60da      	str	r2, [r3, #12]
	enPin->Off = ENPin_Off;
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	4a04      	ldr	r2, [pc, #16]	; (800087c <ENPin_Init+0x48>)
 800086a:	611a      	str	r2, [r3, #16]
	return enPin;
 800086c:	68fb      	ldr	r3, [r7, #12]
}
 800086e:	4618      	mov	r0, r3
 8000870:	3710      	adds	r7, #16
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	08000881 	.word	0x08000881
 800087c:	080008a9 	.word	0x080008a9

08000880 <ENPin_On>:
void ENPin_On(ENPin_TypeDef* enPin){
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
	enPin->state = ENABLE;
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	2200      	movs	r2, #0
 800088c:	721a      	strb	r2, [r3, #8]
	HAL_GPIO_WritePin(enPin->port, enPin->pin, enPin->state);
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	6858      	ldr	r0, [r3, #4]
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	8819      	ldrh	r1, [r3, #0]
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	7a1b      	ldrb	r3, [r3, #8]
 800089a:	461a      	mov	r2, r3
 800089c:	f001 fbcf 	bl	800203e <HAL_GPIO_WritePin>
}
 80008a0:	bf00      	nop
 80008a2:	3708      	adds	r7, #8
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}

080008a8 <ENPin_Off>:
void ENPin_Off(ENPin_TypeDef* enPin){
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
	enPin->state = DISABLE;
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	2201      	movs	r2, #1
 80008b4:	721a      	strb	r2, [r3, #8]
	HAL_GPIO_WritePin(enPin->port, enPin->pin, enPin->state);
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	6858      	ldr	r0, [r3, #4]
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	8819      	ldrh	r1, [r3, #0]
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	7a1b      	ldrb	r3, [r3, #8]
 80008c2:	461a      	mov	r2, r3
 80008c4:	f001 fbbb 	bl	800203e <HAL_GPIO_WritePin>
}
 80008c8:	bf00      	nop
 80008ca:	3708      	adds	r7, #8
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}

080008d0 <SevenSeg_Init>:
 */
/**************************************************************************************/

static unsigned char referCode[10] = {0x40, 0x79, 0x24, 0x30, 0x19, 0x12, 0x02, 0x78, 0x00, 0x10};

SevenSeg_TypeDef * SevenSeg_Init(GPIO_TypeDef* port[], uint16_t pin[], ENPin_TypeDef * enPin){
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b086      	sub	sp, #24
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	60f8      	str	r0, [r7, #12]
 80008d8:	60b9      	str	r1, [r7, #8]
 80008da:	607a      	str	r2, [r7, #4]
	SevenSeg_TypeDef * sevenSeg = malloc(sizeof(SevenSeg_TypeDef));
 80008dc:	2040      	movs	r0, #64	; 0x40
 80008de:	f002 fbd5 	bl	800308c <malloc>
 80008e2:	4603      	mov	r3, r0
 80008e4:	613b      	str	r3, [r7, #16]
	for (uint8_t index = 0; index < NO_OF_SEGMENT; index++){
 80008e6:	2300      	movs	r3, #0
 80008e8:	75fb      	strb	r3, [r7, #23]
 80008ea:	e01b      	b.n	8000924 <SevenSeg_Init+0x54>
		sevenSeg->pin[index] 	= pin[index];
 80008ec:	7dfb      	ldrb	r3, [r7, #23]
 80008ee:	005b      	lsls	r3, r3, #1
 80008f0:	68ba      	ldr	r2, [r7, #8]
 80008f2:	4413      	add	r3, r2
 80008f4:	7dfa      	ldrb	r2, [r7, #23]
 80008f6:	8819      	ldrh	r1, [r3, #0]
 80008f8:	693b      	ldr	r3, [r7, #16]
 80008fa:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		sevenSeg->port[index] 	= port[index];
 80008fe:	7dfb      	ldrb	r3, [r7, #23]
 8000900:	009b      	lsls	r3, r3, #2
 8000902:	68fa      	ldr	r2, [r7, #12]
 8000904:	4413      	add	r3, r2
 8000906:	7dfa      	ldrb	r2, [r7, #23]
 8000908:	6819      	ldr	r1, [r3, #0]
 800090a:	693b      	ldr	r3, [r7, #16]
 800090c:	3204      	adds	r2, #4
 800090e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		sevenSeg->state[index] 	= DISABLE;
 8000912:	7dfb      	ldrb	r3, [r7, #23]
 8000914:	693a      	ldr	r2, [r7, #16]
 8000916:	4413      	add	r3, r2
 8000918:	2201      	movs	r2, #1
 800091a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	for (uint8_t index = 0; index < NO_OF_SEGMENT; index++){
 800091e:	7dfb      	ldrb	r3, [r7, #23]
 8000920:	3301      	adds	r3, #1
 8000922:	75fb      	strb	r3, [r7, #23]
 8000924:	7dfb      	ldrb	r3, [r7, #23]
 8000926:	2b06      	cmp	r3, #6
 8000928:	d9e0      	bls.n	80008ec <SevenSeg_Init+0x1c>
	}
	sevenSeg->enPin 			= enPin;
 800092a:	693b      	ldr	r3, [r7, #16]
 800092c:	687a      	ldr	r2, [r7, #4]
 800092e:	635a      	str	r2, [r3, #52]	; 0x34
	sevenSeg->Display 			= Seg_Display;
 8000930:	693b      	ldr	r3, [r7, #16]
 8000932:	4a05      	ldr	r2, [pc, #20]	; (8000948 <SevenSeg_Init+0x78>)
 8000934:	639a      	str	r2, [r3, #56]	; 0x38
	sevenSeg->Convert 			= Number_Conversion;
 8000936:	693b      	ldr	r3, [r7, #16]
 8000938:	4a04      	ldr	r2, [pc, #16]	; (800094c <SevenSeg_Init+0x7c>)
 800093a:	63da      	str	r2, [r3, #60]	; 0x3c
	return sevenSeg;
 800093c:	693b      	ldr	r3, [r7, #16]
}
 800093e:	4618      	mov	r0, r3
 8000940:	3718      	adds	r7, #24
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	08000951 	.word	0x08000951
 800094c:	08000999 	.word	0x08000999

08000950 <Seg_Display>:

void Seg_Display(SevenSeg_TypeDef * sevenSeg){
 8000950:	b580      	push	{r7, lr}
 8000952:	b084      	sub	sp, #16
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
	for (uint8_t index = 0; index < NO_OF_SEGMENT; index++){
 8000958:	2300      	movs	r3, #0
 800095a:	73fb      	strb	r3, [r7, #15]
 800095c:	e013      	b.n	8000986 <Seg_Display+0x36>
		HAL_GPIO_WritePin(sevenSeg->port[index], sevenSeg->pin[index], sevenSeg->state[index]);
 800095e:	7bfa      	ldrb	r2, [r7, #15]
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	3204      	adds	r2, #4
 8000964:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8000968:	7bfa      	ldrb	r2, [r7, #15]
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8000970:	7bfb      	ldrb	r3, [r7, #15]
 8000972:	687a      	ldr	r2, [r7, #4]
 8000974:	4413      	add	r3, r2
 8000976:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800097a:	461a      	mov	r2, r3
 800097c:	f001 fb5f 	bl	800203e <HAL_GPIO_WritePin>
	for (uint8_t index = 0; index < NO_OF_SEGMENT; index++){
 8000980:	7bfb      	ldrb	r3, [r7, #15]
 8000982:	3301      	adds	r3, #1
 8000984:	73fb      	strb	r3, [r7, #15]
 8000986:	7bfb      	ldrb	r3, [r7, #15]
 8000988:	2b06      	cmp	r3, #6
 800098a:	d9e8      	bls.n	800095e <Seg_Display+0xe>
	}
}
 800098c:	bf00      	nop
 800098e:	bf00      	nop
 8000990:	3710      	adds	r7, #16
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
	...

08000998 <Number_Conversion>:

void Number_Conversion(SevenSeg_TypeDef* sevenSeg, uint8_t number){
 8000998:	b480      	push	{r7}
 800099a:	b085      	sub	sp, #20
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
 80009a0:	460b      	mov	r3, r1
 80009a2:	70fb      	strb	r3, [r7, #3]
	for (uint8_t index = 0; index < NO_OF_SEGMENT; index++){
 80009a4:	2300      	movs	r3, #0
 80009a6:	73fb      	strb	r3, [r7, #15]
 80009a8:	e013      	b.n	80009d2 <Number_Conversion+0x3a>
		sevenSeg->state[index] = (referCode[number] >> index) & 0x01;
 80009aa:	78fb      	ldrb	r3, [r7, #3]
 80009ac:	4a0d      	ldr	r2, [pc, #52]	; (80009e4 <Number_Conversion+0x4c>)
 80009ae:	5cd3      	ldrb	r3, [r2, r3]
 80009b0:	461a      	mov	r2, r3
 80009b2:	7bfb      	ldrb	r3, [r7, #15]
 80009b4:	fa42 f303 	asr.w	r3, r2, r3
 80009b8:	b2da      	uxtb	r2, r3
 80009ba:	7bfb      	ldrb	r3, [r7, #15]
 80009bc:	f002 0201 	and.w	r2, r2, #1
 80009c0:	b2d1      	uxtb	r1, r2
 80009c2:	687a      	ldr	r2, [r7, #4]
 80009c4:	4413      	add	r3, r2
 80009c6:	460a      	mov	r2, r1
 80009c8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	for (uint8_t index = 0; index < NO_OF_SEGMENT; index++){
 80009cc:	7bfb      	ldrb	r3, [r7, #15]
 80009ce:	3301      	adds	r3, #1
 80009d0:	73fb      	strb	r3, [r7, #15]
 80009d2:	7bfb      	ldrb	r3, [r7, #15]
 80009d4:	2b06      	cmp	r3, #6
 80009d6:	d9e8      	bls.n	80009aa <Number_Conversion+0x12>
	}
}
 80009d8:	bf00      	nop
 80009da:	bf00      	nop
 80009dc:	3714      	adds	r7, #20
 80009de:	46bd      	mov	sp, r7
 80009e0:	bc80      	pop	{r7}
 80009e2:	4770      	bx	lr
 80009e4:	20000058 	.word	0x20000058

080009e8 <Button_Init>:
 *
 *
 */
/**************************************************************************************/

Button_TypeDef* Button_Init(GPIO_TypeDef* port, uint16_t pin, STIM_TypeDef* stim){
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b086      	sub	sp, #24
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	60f8      	str	r0, [r7, #12]
 80009f0:	460b      	mov	r3, r1
 80009f2:	607a      	str	r2, [r7, #4]
 80009f4:	817b      	strh	r3, [r7, #10]
	Button_TypeDef* button 	= malloc(sizeof(Button_TypeDef));
 80009f6:	201c      	movs	r0, #28
 80009f8:	f002 fb48 	bl	800308c <malloc>
 80009fc:	4603      	mov	r3, r0
 80009fe:	613b      	str	r3, [r7, #16]
	button->port 				= port;
 8000a00:	693b      	ldr	r3, [r7, #16]
 8000a02:	68fa      	ldr	r2, [r7, #12]
 8000a04:	605a      	str	r2, [r3, #4]
	button->pin 				= pin;
 8000a06:	693b      	ldr	r3, [r7, #16]
 8000a08:	897a      	ldrh	r2, [r7, #10]
 8000a0a:	801a      	strh	r2, [r3, #0]
	button->bStim				= stim;
 8000a0c:	693b      	ldr	r3, [r7, #16]
 8000a0e:	687a      	ldr	r2, [r7, #4]
 8000a10:	609a      	str	r2, [r3, #8]

	for (uint8_t index = 0; index < FILTER_LEVEL; index++){
 8000a12:	2300      	movs	r3, #0
 8000a14:	75fb      	strb	r3, [r7, #23]
 8000a16:	e007      	b.n	8000a28 <Button_Init+0x40>
		button->input[index] = RELEASED;
 8000a18:	7dfb      	ldrb	r3, [r7, #23]
 8000a1a:	693a      	ldr	r2, [r7, #16]
 8000a1c:	4413      	add	r3, r2
 8000a1e:	2201      	movs	r2, #1
 8000a20:	731a      	strb	r2, [r3, #12]
	for (uint8_t index = 0; index < FILTER_LEVEL; index++){
 8000a22:	7dfb      	ldrb	r3, [r7, #23]
 8000a24:	3301      	adds	r3, #1
 8000a26:	75fb      	strb	r3, [r7, #23]
 8000a28:	7dfb      	ldrb	r3, [r7, #23]
 8000a2a:	2b03      	cmp	r3, #3
 8000a2c:	d9f4      	bls.n	8000a18 <Button_Init+0x30>
	}
	button->flag				= 0;
 8000a2e:	693b      	ldr	r3, [r7, #16]
 8000a30:	2200      	movs	r2, #0
 8000a32:	741a      	strb	r2, [r3, #16]
	button->Tap_Mode			= Tap_Mode;
 8000a34:	693b      	ldr	r3, [r7, #16]
 8000a36:	4a05      	ldr	r2, [pc, #20]	; (8000a4c <Button_Init+0x64>)
 8000a38:	615a      	str	r2, [r3, #20]
	button->Hold_Mode			= Hold_Mode;
 8000a3a:	693b      	ldr	r3, [r7, #16]
 8000a3c:	4a04      	ldr	r2, [pc, #16]	; (8000a50 <Button_Init+0x68>)
 8000a3e:	619a      	str	r2, [r3, #24]
	return button;
 8000a40:	693b      	ldr	r3, [r7, #16]
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	3718      	adds	r7, #24
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	08000ad1 	.word	0x08000ad1
 8000a50:	08000b0f 	.word	0x08000b0f

08000a54 <Stability_Check>:

uint8_t Stability_Check(Button_TypeDef* button){
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b084      	sub	sp, #16
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
	for(uint8_t index = 0; index < FILTER_LEVEL - 2; index++)
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	73fb      	strb	r3, [r7, #15]
 8000a60:	e00c      	b.n	8000a7c <Stability_Check+0x28>
		button->input[index] = button->input[index + 1];
 8000a62:	7bfb      	ldrb	r3, [r7, #15]
 8000a64:	1c5a      	adds	r2, r3, #1
 8000a66:	7bfb      	ldrb	r3, [r7, #15]
 8000a68:	6879      	ldr	r1, [r7, #4]
 8000a6a:	440a      	add	r2, r1
 8000a6c:	7b11      	ldrb	r1, [r2, #12]
 8000a6e:	687a      	ldr	r2, [r7, #4]
 8000a70:	4413      	add	r3, r2
 8000a72:	460a      	mov	r2, r1
 8000a74:	731a      	strb	r2, [r3, #12]
	for(uint8_t index = 0; index < FILTER_LEVEL - 2; index++)
 8000a76:	7bfb      	ldrb	r3, [r7, #15]
 8000a78:	3301      	adds	r3, #1
 8000a7a:	73fb      	strb	r3, [r7, #15]
 8000a7c:	7bfb      	ldrb	r3, [r7, #15]
 8000a7e:	2b01      	cmp	r3, #1
 8000a80:	d9ef      	bls.n	8000a62 <Stability_Check+0xe>
	button->input[FILTER_LEVEL - 2]		= 	HAL_GPIO_ReadPin(button->port, button->pin);
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	685a      	ldr	r2, [r3, #4]
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	881b      	ldrh	r3, [r3, #0]
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	4610      	mov	r0, r2
 8000a8e:	f001 fabf 	bl	8002010 <HAL_GPIO_ReadPin>
 8000a92:	4603      	mov	r3, r0
 8000a94:	461a      	mov	r2, r3
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	739a      	strb	r2, [r3, #14]
	for (uint8_t index = 0; index < FILTER_LEVEL - 2; index++){
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	73bb      	strb	r3, [r7, #14]
 8000a9e:	e00f      	b.n	8000ac0 <Stability_Check+0x6c>
		if (button->input[index] != button->input[index + 1])
 8000aa0:	7bbb      	ldrb	r3, [r7, #14]
 8000aa2:	687a      	ldr	r2, [r7, #4]
 8000aa4:	4413      	add	r3, r2
 8000aa6:	7b1a      	ldrb	r2, [r3, #12]
 8000aa8:	7bbb      	ldrb	r3, [r7, #14]
 8000aaa:	3301      	adds	r3, #1
 8000aac:	6879      	ldr	r1, [r7, #4]
 8000aae:	440b      	add	r3, r1
 8000ab0:	7b1b      	ldrb	r3, [r3, #12]
 8000ab2:	429a      	cmp	r2, r3
 8000ab4:	d001      	beq.n	8000aba <Stability_Check+0x66>
			return 0;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	e006      	b.n	8000ac8 <Stability_Check+0x74>
	for (uint8_t index = 0; index < FILTER_LEVEL - 2; index++){
 8000aba:	7bbb      	ldrb	r3, [r7, #14]
 8000abc:	3301      	adds	r3, #1
 8000abe:	73bb      	strb	r3, [r7, #14]
 8000ac0:	7bbb      	ldrb	r3, [r7, #14]
 8000ac2:	2b01      	cmp	r3, #1
 8000ac4:	d9ec      	bls.n	8000aa0 <Stability_Check+0x4c>
	}
	return 1;
 8000ac6:	2301      	movs	r3, #1
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	3710      	adds	r7, #16
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}

08000ad0 <Tap_Mode>:


void Tap_Mode(Button_TypeDef* button){
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
	if (Stability_Check(button) == 1){
 8000ad8:	6878      	ldr	r0, [r7, #4]
 8000ada:	f7ff ffbb 	bl	8000a54 <Stability_Check>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b01      	cmp	r3, #1
 8000ae2:	d110      	bne.n	8000b06 <Tap_Mode+0x36>
		if (button->input[FILTER_LEVEL - 1] != button->input[FILTER_LEVEL - 2]){
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	7bda      	ldrb	r2, [r3, #15]
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	7b9b      	ldrb	r3, [r3, #14]
 8000aec:	429a      	cmp	r2, r3
 8000aee:	d00a      	beq.n	8000b06 <Tap_Mode+0x36>
			button->input[FILTER_LEVEL - 1] = button->input[FILTER_LEVEL - 2];
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	7b9a      	ldrb	r2, [r3, #14]
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	73da      	strb	r2, [r3, #15]
			if (button->input[FILTER_LEVEL - 2] == PRESSED)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	7b9b      	ldrb	r3, [r3, #14]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d102      	bne.n	8000b06 <Tap_Mode+0x36>
				button->flag = 1;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	2201      	movs	r2, #1
 8000b04:	741a      	strb	r2, [r3, #16]
		}
	}
}
 8000b06:	bf00      	nop
 8000b08:	3708      	adds	r7, #8
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}

08000b0e <Hold_Mode>:
//			}
//		}
//	}
//}

void Hold_Mode(Button_TypeDef* button, uint16_t consecHold){
 8000b0e:	b580      	push	{r7, lr}
 8000b10:	b082      	sub	sp, #8
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	6078      	str	r0, [r7, #4]
 8000b16:	460b      	mov	r3, r1
 8000b18:	807b      	strh	r3, [r7, #2]
	if (Stability_Check(button) == 1){
 8000b1a:	6878      	ldr	r0, [r7, #4]
 8000b1c:	f7ff ff9a 	bl	8000a54 <Stability_Check>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b01      	cmp	r3, #1
 8000b24:	d127      	bne.n	8000b76 <Hold_Mode+0x68>
		if (button->input[FILTER_LEVEL - 1] != button->input[FILTER_LEVEL - 2]){
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	7bda      	ldrb	r2, [r3, #15]
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	7b9b      	ldrb	r3, [r3, #14]
 8000b2e:	429a      	cmp	r2, r3
 8000b30:	d012      	beq.n	8000b58 <Hold_Mode+0x4a>
			button->input[FILTER_LEVEL - 1] = button->input[FILTER_LEVEL - 2];
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	7b9a      	ldrb	r2, [r3, #14]
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	73da      	strb	r2, [r3, #15]
			if (button->input[FILTER_LEVEL - 2] == PRESSED){
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	7b9b      	ldrb	r3, [r3, #14]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d119      	bne.n	8000b76 <Hold_Mode+0x68>
				button->flag = 1;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	2201      	movs	r2, #1
 8000b46:	741a      	strb	r2, [r3, #16]
				button->bStim->Set_Default(button->bStim);
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	689b      	ldr	r3, [r3, #8]
 8000b4c:	689b      	ldr	r3, [r3, #8]
 8000b4e:	687a      	ldr	r2, [r7, #4]
 8000b50:	6892      	ldr	r2, [r2, #8]
 8000b52:	4610      	mov	r0, r2
 8000b54:	4798      	blx	r3
			if (button->bStim->flag  == 1){
				button->input[FILTER_LEVEL - 1] = RELEASED;
			}
		}
	}
}
 8000b56:	e00e      	b.n	8000b76 <Hold_Mode+0x68>
			button->bStim->Timer_Run(button->bStim);
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	689b      	ldr	r3, [r3, #8]
 8000b5c:	691b      	ldr	r3, [r3, #16]
 8000b5e:	687a      	ldr	r2, [r7, #4]
 8000b60:	6892      	ldr	r2, [r2, #8]
 8000b62:	4610      	mov	r0, r2
 8000b64:	4798      	blx	r3
			if (button->bStim->flag  == 1){
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	689b      	ldr	r3, [r3, #8]
 8000b6a:	799b      	ldrb	r3, [r3, #6]
 8000b6c:	2b01      	cmp	r3, #1
 8000b6e:	d102      	bne.n	8000b76 <Hold_Mode+0x68>
				button->input[FILTER_LEVEL - 1] = RELEASED;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	2201      	movs	r2, #1
 8000b74:	73da      	strb	r2, [r3, #15]
}
 8000b76:	bf00      	nop
 8000b78:	3708      	adds	r7, #8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
	...

08000b80 <Traffic_Init>:
/*
 * TRAFFIC LIGHT TYPE DEFINITION
 */
/**************************************************************************************/

Traffic_TypeDef* Traffic_Init(GPIO_TypeDef* port[], uint16_t pin[], STIM_TypeDef* stim){
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b086      	sub	sp, #24
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	60f8      	str	r0, [r7, #12]
 8000b88:	60b9      	str	r1, [r7, #8]
 8000b8a:	607a      	str	r2, [r7, #4]
	Traffic_TypeDef* traffic 	= malloc(sizeof(Traffic_TypeDef));
 8000b8c:	2034      	movs	r0, #52	; 0x34
 8000b8e:	f002 fa7d 	bl	800308c <malloc>
 8000b92:	4603      	mov	r3, r0
 8000b94:	617b      	str	r3, [r7, #20]
	traffic->red 				= Led_Init(port[0], pin[0], DISABLE);
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	6818      	ldr	r0, [r3, #0]
 8000b9a:	68bb      	ldr	r3, [r7, #8]
 8000b9c:	881b      	ldrh	r3, [r3, #0]
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	f7ff fc99 	bl	80004d8 <Led_Init>
 8000ba6:	4602      	mov	r2, r0
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	601a      	str	r2, [r3, #0]
	traffic->yellow 			= Led_Init(port[1], pin[1], DISABLE);
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	3304      	adds	r3, #4
 8000bb0:	6818      	ldr	r0, [r3, #0]
 8000bb2:	68bb      	ldr	r3, [r7, #8]
 8000bb4:	3302      	adds	r3, #2
 8000bb6:	881b      	ldrh	r3, [r3, #0]
 8000bb8:	2201      	movs	r2, #1
 8000bba:	4619      	mov	r1, r3
 8000bbc:	f7ff fc8c 	bl	80004d8 <Led_Init>
 8000bc0:	4602      	mov	r2, r0
 8000bc2:	697b      	ldr	r3, [r7, #20]
 8000bc4:	605a      	str	r2, [r3, #4]
	traffic->green 				= Led_Init(port[2], pin[2], DISABLE);
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	3308      	adds	r3, #8
 8000bca:	6818      	ldr	r0, [r3, #0]
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	3304      	adds	r3, #4
 8000bd0:	881b      	ldrh	r3, [r3, #0]
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	f7ff fc7f 	bl	80004d8 <Led_Init>
 8000bda:	4602      	mov	r2, r0
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	609a      	str	r2, [r3, #8]
	traffic->state				= INIT;
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	2200      	movs	r2, #0
 8000be4:	741a      	strb	r2, [r3, #16]
	traffic->stim 				= stim;
 8000be6:	697b      	ldr	r3, [r7, #20]
 8000be8:	687a      	ldr	r2, [r7, #4]
 8000bea:	60da      	str	r2, [r3, #12]

	traffic->Shut_down			= All_Off;
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	4a0e      	ldr	r2, [pc, #56]	; (8000c28 <Traffic_Init+0xa8>)
 8000bf0:	619a      	str	r2, [r3, #24]
	traffic->Freeze_Green		= Only_Green;
 8000bf2:	697b      	ldr	r3, [r7, #20]
 8000bf4:	4a0d      	ldr	r2, [pc, #52]	; (8000c2c <Traffic_Init+0xac>)
 8000bf6:	625a      	str	r2, [r3, #36]	; 0x24
	traffic->Freeze_Red			= Only_Red;
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	4a0d      	ldr	r2, [pc, #52]	; (8000c30 <Traffic_Init+0xb0>)
 8000bfc:	61da      	str	r2, [r3, #28]
	traffic->Freeze_Yellow		= Only_Yellow;
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	4a0c      	ldr	r2, [pc, #48]	; (8000c34 <Traffic_Init+0xb4>)
 8000c02:	621a      	str	r2, [r3, #32]
	traffic->Toggle_Green		= Toggle_Green;
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	4a0c      	ldr	r2, [pc, #48]	; (8000c38 <Traffic_Init+0xb8>)
 8000c08:	631a      	str	r2, [r3, #48]	; 0x30
	traffic->Toggle_Red			= Toggle_Red;
 8000c0a:	697b      	ldr	r3, [r7, #20]
 8000c0c:	4a0b      	ldr	r2, [pc, #44]	; (8000c3c <Traffic_Init+0xbc>)
 8000c0e:	629a      	str	r2, [r3, #40]	; 0x28
	traffic->Toggle_Yellow		= Toggle_Yellow;
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	4a0b      	ldr	r2, [pc, #44]	; (8000c40 <Traffic_Init+0xc0>)
 8000c14:	62da      	str	r2, [r3, #44]	; 0x2c
	traffic->Normal_Run 		= Traffic_FSM;
 8000c16:	697b      	ldr	r3, [r7, #20]
 8000c18:	4a0a      	ldr	r2, [pc, #40]	; (8000c44 <Traffic_Init+0xc4>)
 8000c1a:	615a      	str	r2, [r3, #20]
	return traffic;
 8000c1c:	697b      	ldr	r3, [r7, #20]
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3718      	adds	r7, #24
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	08000dad 	.word	0x08000dad
 8000c2c:	08000e5b 	.word	0x08000e5b
 8000c30:	08000de7 	.word	0x08000de7
 8000c34:	08000e21 	.word	0x08000e21
 8000c38:	08000f09 	.word	0x08000f09
 8000c3c:	08000e95 	.word	0x08000e95
 8000c40:	08000ecf 	.word	0x08000ecf
 8000c44:	08000c49 	.word	0x08000c49

08000c48 <Traffic_FSM>:

void Traffic_FSM(Traffic_TypeDef* traffic, Clock_TypeDef* clock, uint16_t r_Delay, uint16_t y_Delay, uint16_t g_Delay){
 8000c48:	b590      	push	{r4, r7, lr}
 8000c4a:	b085      	sub	sp, #20
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	60f8      	str	r0, [r7, #12]
 8000c50:	60b9      	str	r1, [r7, #8]
 8000c52:	4611      	mov	r1, r2
 8000c54:	461a      	mov	r2, r3
 8000c56:	460b      	mov	r3, r1
 8000c58:	80fb      	strh	r3, [r7, #6]
 8000c5a:	4613      	mov	r3, r2
 8000c5c:	80bb      	strh	r3, [r7, #4]
	switch(traffic->state){
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	7c1b      	ldrb	r3, [r3, #16]
 8000c62:	2b04      	cmp	r3, #4
 8000c64:	f200 8094 	bhi.w	8000d90 <Traffic_FSM+0x148>
 8000c68:	a201      	add	r2, pc, #4	; (adr r2, 8000c70 <Traffic_FSM+0x28>)
 8000c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c6e:	bf00      	nop
 8000c70:	08000c85 	.word	0x08000c85
 8000c74:	08000ca5 	.word	0x08000ca5
 8000c78:	08000ce9 	.word	0x08000ce9
 8000c7c:	08000d2d 	.word	0x08000d2d
 8000c80:	08000d71 	.word	0x08000d71
		case INIT:
			traffic->Shut_down(traffic);
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	699b      	ldr	r3, [r3, #24]
 8000c88:	68f8      	ldr	r0, [r7, #12]
 8000c8a:	4798      	blx	r3

			traffic->state = AUTO_RED;
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	2201      	movs	r2, #1
 8000c90:	741a      	strb	r2, [r3, #16]
			traffic->stim->Set_Manual(traffic->stim, r_Delay);
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	68db      	ldr	r3, [r3, #12]
 8000c96:	68db      	ldr	r3, [r3, #12]
 8000c98:	68fa      	ldr	r2, [r7, #12]
 8000c9a:	68d2      	ldr	r2, [r2, #12]
 8000c9c:	88f9      	ldrh	r1, [r7, #6]
 8000c9e:	4610      	mov	r0, r2
 8000ca0:	4798      	blx	r3
			break;
 8000ca2:	e07c      	b.n	8000d9e <Traffic_FSM+0x156>
		case AUTO_RED:
			traffic->Freeze_Red(traffic);
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	69db      	ldr	r3, [r3, #28]
 8000ca8:	68f8      	ldr	r0, [r7, #12]
 8000caa:	4798      	blx	r3

			if (traffic->stim->flag == 1){
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	68db      	ldr	r3, [r3, #12]
 8000cb0:	799b      	ldrb	r3, [r3, #6]
 8000cb2:	2b01      	cmp	r3, #1
 8000cb4:	d16e      	bne.n	8000d94 <Traffic_FSM+0x14c>
				traffic->state = AUTO_GREEN;
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	2203      	movs	r2, #3
 8000cba:	741a      	strb	r2, [r3, #16]
				traffic->stim->Set_Manual(traffic->stim, g_Delay);
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	68db      	ldr	r3, [r3, #12]
 8000cc0:	68db      	ldr	r3, [r3, #12]
 8000cc2:	68fa      	ldr	r2, [r7, #12]
 8000cc4:	68d2      	ldr	r2, [r2, #12]
 8000cc6:	8c39      	ldrh	r1, [r7, #32]
 8000cc8:	4610      	mov	r0, r2
 8000cca:	4798      	blx	r3
				clock->Modify(clock, 0, 0, g_Delay/1000);
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	68dc      	ldr	r4, [r3, #12]
 8000cd0:	8c3b      	ldrh	r3, [r7, #32]
 8000cd2:	4a35      	ldr	r2, [pc, #212]	; (8000da8 <Traffic_FSM+0x160>)
 8000cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8000cd8:	099b      	lsrs	r3, r3, #6
 8000cda:	b29b      	uxth	r3, r3
 8000cdc:	b2db      	uxtb	r3, r3
 8000cde:	2200      	movs	r2, #0
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	68b8      	ldr	r0, [r7, #8]
 8000ce4:	47a0      	blx	r4
			}
			break;
 8000ce6:	e055      	b.n	8000d94 <Traffic_FSM+0x14c>
		case AUTO_YELLOW:
			traffic->Freeze_Yellow(traffic);
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	6a1b      	ldr	r3, [r3, #32]
 8000cec:	68f8      	ldr	r0, [r7, #12]
 8000cee:	4798      	blx	r3

			if (traffic->stim->flag == 1){
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	68db      	ldr	r3, [r3, #12]
 8000cf4:	799b      	ldrb	r3, [r3, #6]
 8000cf6:	2b01      	cmp	r3, #1
 8000cf8:	d14e      	bne.n	8000d98 <Traffic_FSM+0x150>
				traffic->state = AUTO_RED;
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	741a      	strb	r2, [r3, #16]
				traffic->stim->Set_Manual(traffic->stim, r_Delay);
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	68db      	ldr	r3, [r3, #12]
 8000d04:	68db      	ldr	r3, [r3, #12]
 8000d06:	68fa      	ldr	r2, [r7, #12]
 8000d08:	68d2      	ldr	r2, [r2, #12]
 8000d0a:	88f9      	ldrh	r1, [r7, #6]
 8000d0c:	4610      	mov	r0, r2
 8000d0e:	4798      	blx	r3
				clock->Modify(clock, 0, 0, r_Delay/1000);
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	68dc      	ldr	r4, [r3, #12]
 8000d14:	88fb      	ldrh	r3, [r7, #6]
 8000d16:	4a24      	ldr	r2, [pc, #144]	; (8000da8 <Traffic_FSM+0x160>)
 8000d18:	fba2 2303 	umull	r2, r3, r2, r3
 8000d1c:	099b      	lsrs	r3, r3, #6
 8000d1e:	b29b      	uxth	r3, r3
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	2200      	movs	r2, #0
 8000d24:	2100      	movs	r1, #0
 8000d26:	68b8      	ldr	r0, [r7, #8]
 8000d28:	47a0      	blx	r4
			}
			break;
 8000d2a:	e035      	b.n	8000d98 <Traffic_FSM+0x150>
		case AUTO_GREEN:
			traffic->Freeze_Green(traffic);
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d30:	68f8      	ldr	r0, [r7, #12]
 8000d32:	4798      	blx	r3

			if (traffic->stim->flag == 1){
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	68db      	ldr	r3, [r3, #12]
 8000d38:	799b      	ldrb	r3, [r3, #6]
 8000d3a:	2b01      	cmp	r3, #1
 8000d3c:	d12e      	bne.n	8000d9c <Traffic_FSM+0x154>
				traffic->state = AUTO_YELLOW;
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	2202      	movs	r2, #2
 8000d42:	741a      	strb	r2, [r3, #16]
				traffic->stim->Set_Manual(traffic->stim, y_Delay);
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	68db      	ldr	r3, [r3, #12]
 8000d48:	68db      	ldr	r3, [r3, #12]
 8000d4a:	68fa      	ldr	r2, [r7, #12]
 8000d4c:	68d2      	ldr	r2, [r2, #12]
 8000d4e:	88b9      	ldrh	r1, [r7, #4]
 8000d50:	4610      	mov	r0, r2
 8000d52:	4798      	blx	r3
				clock->Modify(clock, 0, 0, y_Delay/1000);
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	68dc      	ldr	r4, [r3, #12]
 8000d58:	88bb      	ldrh	r3, [r7, #4]
 8000d5a:	4a13      	ldr	r2, [pc, #76]	; (8000da8 <Traffic_FSM+0x160>)
 8000d5c:	fba2 2303 	umull	r2, r3, r2, r3
 8000d60:	099b      	lsrs	r3, r3, #6
 8000d62:	b29b      	uxth	r3, r3
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	2200      	movs	r2, #0
 8000d68:	2100      	movs	r1, #0
 8000d6a:	68b8      	ldr	r0, [r7, #8]
 8000d6c:	47a0      	blx	r4
			}
			break;
 8000d6e:	e015      	b.n	8000d9c <Traffic_FSM+0x154>
		case EXIT:
			traffic->Shut_down(traffic);
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	699b      	ldr	r3, [r3, #24]
 8000d74:	68f8      	ldr	r0, [r7, #12]
 8000d76:	4798      	blx	r3

			traffic->state = AUTO_GREEN;
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	2203      	movs	r2, #3
 8000d7c:	741a      	strb	r2, [r3, #16]
			traffic->stim->Set_Manual(traffic->stim, g_Delay);
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	68db      	ldr	r3, [r3, #12]
 8000d82:	68db      	ldr	r3, [r3, #12]
 8000d84:	68fa      	ldr	r2, [r7, #12]
 8000d86:	68d2      	ldr	r2, [r2, #12]
 8000d88:	8c39      	ldrh	r1, [r7, #32]
 8000d8a:	4610      	mov	r0, r2
 8000d8c:	4798      	blx	r3
			break;
 8000d8e:	e006      	b.n	8000d9e <Traffic_FSM+0x156>
		default:
			break;
 8000d90:	bf00      	nop
 8000d92:	e004      	b.n	8000d9e <Traffic_FSM+0x156>
			break;
 8000d94:	bf00      	nop
 8000d96:	e002      	b.n	8000d9e <Traffic_FSM+0x156>
			break;
 8000d98:	bf00      	nop
 8000d9a:	e000      	b.n	8000d9e <Traffic_FSM+0x156>
			break;
 8000d9c:	bf00      	nop
	}
}
 8000d9e:	bf00      	nop
 8000da0:	3714      	adds	r7, #20
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd90      	pop	{r4, r7, pc}
 8000da6:	bf00      	nop
 8000da8:	10624dd3 	.word	0x10624dd3

08000dac <All_Off>:

void All_Off(Traffic_TypeDef* traffic) {
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
	traffic->red->Off(traffic->red);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	695b      	ldr	r3, [r3, #20]
 8000dba:	687a      	ldr	r2, [r7, #4]
 8000dbc:	6812      	ldr	r2, [r2, #0]
 8000dbe:	4610      	mov	r0, r2
 8000dc0:	4798      	blx	r3
	traffic->yellow->Off(traffic->yellow);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	695b      	ldr	r3, [r3, #20]
 8000dc8:	687a      	ldr	r2, [r7, #4]
 8000dca:	6852      	ldr	r2, [r2, #4]
 8000dcc:	4610      	mov	r0, r2
 8000dce:	4798      	blx	r3
	traffic->green->Off(traffic->green);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	689b      	ldr	r3, [r3, #8]
 8000dd4:	695b      	ldr	r3, [r3, #20]
 8000dd6:	687a      	ldr	r2, [r7, #4]
 8000dd8:	6892      	ldr	r2, [r2, #8]
 8000dda:	4610      	mov	r0, r2
 8000ddc:	4798      	blx	r3
}
 8000dde:	bf00      	nop
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}

08000de6 <Only_Red>:
void Only_Red(Traffic_TypeDef* traffic) {
 8000de6:	b580      	push	{r7, lr}
 8000de8:	b082      	sub	sp, #8
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	6078      	str	r0, [r7, #4]
	traffic->red->On(traffic->red);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	691b      	ldr	r3, [r3, #16]
 8000df4:	687a      	ldr	r2, [r7, #4]
 8000df6:	6812      	ldr	r2, [r2, #0]
 8000df8:	4610      	mov	r0, r2
 8000dfa:	4798      	blx	r3
	traffic->yellow->Off(traffic->yellow);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	695b      	ldr	r3, [r3, #20]
 8000e02:	687a      	ldr	r2, [r7, #4]
 8000e04:	6852      	ldr	r2, [r2, #4]
 8000e06:	4610      	mov	r0, r2
 8000e08:	4798      	blx	r3
	traffic->green->Off(traffic->green);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	689b      	ldr	r3, [r3, #8]
 8000e0e:	695b      	ldr	r3, [r3, #20]
 8000e10:	687a      	ldr	r2, [r7, #4]
 8000e12:	6892      	ldr	r2, [r2, #8]
 8000e14:	4610      	mov	r0, r2
 8000e16:	4798      	blx	r3
}
 8000e18:	bf00      	nop
 8000e1a:	3708      	adds	r7, #8
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <Only_Yellow>:
void Only_Yellow(Traffic_TypeDef* traffic) {
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
	traffic->red->Off(traffic->red);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	695b      	ldr	r3, [r3, #20]
 8000e2e:	687a      	ldr	r2, [r7, #4]
 8000e30:	6812      	ldr	r2, [r2, #0]
 8000e32:	4610      	mov	r0, r2
 8000e34:	4798      	blx	r3
	traffic->yellow->On(traffic->yellow);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	691b      	ldr	r3, [r3, #16]
 8000e3c:	687a      	ldr	r2, [r7, #4]
 8000e3e:	6852      	ldr	r2, [r2, #4]
 8000e40:	4610      	mov	r0, r2
 8000e42:	4798      	blx	r3
	traffic->green->Off(traffic->green);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	689b      	ldr	r3, [r3, #8]
 8000e48:	695b      	ldr	r3, [r3, #20]
 8000e4a:	687a      	ldr	r2, [r7, #4]
 8000e4c:	6892      	ldr	r2, [r2, #8]
 8000e4e:	4610      	mov	r0, r2
 8000e50:	4798      	blx	r3
}
 8000e52:	bf00      	nop
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}

08000e5a <Only_Green>:
void Only_Green(Traffic_TypeDef* traffic) {
 8000e5a:	b580      	push	{r7, lr}
 8000e5c:	b082      	sub	sp, #8
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	6078      	str	r0, [r7, #4]
	traffic->red->Off(traffic->red);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	695b      	ldr	r3, [r3, #20]
 8000e68:	687a      	ldr	r2, [r7, #4]
 8000e6a:	6812      	ldr	r2, [r2, #0]
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	4798      	blx	r3
	traffic->yellow->Off(traffic->yellow);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	695b      	ldr	r3, [r3, #20]
 8000e76:	687a      	ldr	r2, [r7, #4]
 8000e78:	6852      	ldr	r2, [r2, #4]
 8000e7a:	4610      	mov	r0, r2
 8000e7c:	4798      	blx	r3
	traffic->green->On(traffic->green);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	689b      	ldr	r3, [r3, #8]
 8000e82:	691b      	ldr	r3, [r3, #16]
 8000e84:	687a      	ldr	r2, [r7, #4]
 8000e86:	6892      	ldr	r2, [r2, #8]
 8000e88:	4610      	mov	r0, r2
 8000e8a:	4798      	blx	r3
}
 8000e8c:	bf00      	nop
 8000e8e:	3708      	adds	r7, #8
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}

08000e94 <Toggle_Red>:
void Toggle_Red(Traffic_TypeDef* traffic){
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
	traffic->red->Toggle(traffic->red);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	68db      	ldr	r3, [r3, #12]
 8000ea2:	687a      	ldr	r2, [r7, #4]
 8000ea4:	6812      	ldr	r2, [r2, #0]
 8000ea6:	4610      	mov	r0, r2
 8000ea8:	4798      	blx	r3
	traffic->yellow->Off(traffic->yellow);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	695b      	ldr	r3, [r3, #20]
 8000eb0:	687a      	ldr	r2, [r7, #4]
 8000eb2:	6852      	ldr	r2, [r2, #4]
 8000eb4:	4610      	mov	r0, r2
 8000eb6:	4798      	blx	r3
	traffic->green->Off(traffic->green);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	689b      	ldr	r3, [r3, #8]
 8000ebc:	695b      	ldr	r3, [r3, #20]
 8000ebe:	687a      	ldr	r2, [r7, #4]
 8000ec0:	6892      	ldr	r2, [r2, #8]
 8000ec2:	4610      	mov	r0, r2
 8000ec4:	4798      	blx	r3
}
 8000ec6:	bf00      	nop
 8000ec8:	3708      	adds	r7, #8
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}

08000ece <Toggle_Yellow>:
void Toggle_Yellow(Traffic_TypeDef* traffic){
 8000ece:	b580      	push	{r7, lr}
 8000ed0:	b082      	sub	sp, #8
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	6078      	str	r0, [r7, #4]
	traffic->red->Off(traffic->red);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	695b      	ldr	r3, [r3, #20]
 8000edc:	687a      	ldr	r2, [r7, #4]
 8000ede:	6812      	ldr	r2, [r2, #0]
 8000ee0:	4610      	mov	r0, r2
 8000ee2:	4798      	blx	r3
	traffic->yellow->Toggle(traffic->yellow);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	68db      	ldr	r3, [r3, #12]
 8000eea:	687a      	ldr	r2, [r7, #4]
 8000eec:	6852      	ldr	r2, [r2, #4]
 8000eee:	4610      	mov	r0, r2
 8000ef0:	4798      	blx	r3
	traffic->green->Off(traffic->green);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	689b      	ldr	r3, [r3, #8]
 8000ef6:	695b      	ldr	r3, [r3, #20]
 8000ef8:	687a      	ldr	r2, [r7, #4]
 8000efa:	6892      	ldr	r2, [r2, #8]
 8000efc:	4610      	mov	r0, r2
 8000efe:	4798      	blx	r3
}
 8000f00:	bf00      	nop
 8000f02:	3708      	adds	r7, #8
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}

08000f08 <Toggle_Green>:
void Toggle_Green(Traffic_TypeDef* traffic){
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
	traffic->red->Off(traffic->red);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	695b      	ldr	r3, [r3, #20]
 8000f16:	687a      	ldr	r2, [r7, #4]
 8000f18:	6812      	ldr	r2, [r2, #0]
 8000f1a:	4610      	mov	r0, r2
 8000f1c:	4798      	blx	r3
	traffic->yellow->Off(traffic->yellow);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	695b      	ldr	r3, [r3, #20]
 8000f24:	687a      	ldr	r2, [r7, #4]
 8000f26:	6852      	ldr	r2, [r2, #4]
 8000f28:	4610      	mov	r0, r2
 8000f2a:	4798      	blx	r3
	traffic->green->Toggle(traffic->green);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	689b      	ldr	r3, [r3, #8]
 8000f30:	68db      	ldr	r3, [r3, #12]
 8000f32:	687a      	ldr	r2, [r7, #4]
 8000f34:	6892      	ldr	r2, [r2, #8]
 8000f36:	4610      	mov	r0, r2
 8000f38:	4798      	blx	r3
}
 8000f3a:	bf00      	nop
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
	...

08000f44 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b086      	sub	sp, #24
 8000f48:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f4a:	f107 0308 	add.w	r3, r7, #8
 8000f4e:	2200      	movs	r2, #0
 8000f50:	601a      	str	r2, [r3, #0]
 8000f52:	605a      	str	r2, [r3, #4]
 8000f54:	609a      	str	r2, [r3, #8]
 8000f56:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f58:	4b29      	ldr	r3, [pc, #164]	; (8001000 <MX_GPIO_Init+0xbc>)
 8000f5a:	699b      	ldr	r3, [r3, #24]
 8000f5c:	4a28      	ldr	r2, [pc, #160]	; (8001000 <MX_GPIO_Init+0xbc>)
 8000f5e:	f043 0304 	orr.w	r3, r3, #4
 8000f62:	6193      	str	r3, [r2, #24]
 8000f64:	4b26      	ldr	r3, [pc, #152]	; (8001000 <MX_GPIO_Init+0xbc>)
 8000f66:	699b      	ldr	r3, [r3, #24]
 8000f68:	f003 0304 	and.w	r3, r3, #4
 8000f6c:	607b      	str	r3, [r7, #4]
 8000f6e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f70:	4b23      	ldr	r3, [pc, #140]	; (8001000 <MX_GPIO_Init+0xbc>)
 8000f72:	699b      	ldr	r3, [r3, #24]
 8000f74:	4a22      	ldr	r2, [pc, #136]	; (8001000 <MX_GPIO_Init+0xbc>)
 8000f76:	f043 0308 	orr.w	r3, r3, #8
 8000f7a:	6193      	str	r3, [r2, #24]
 8000f7c:	4b20      	ldr	r3, [pc, #128]	; (8001000 <MX_GPIO_Init+0xbc>)
 8000f7e:	699b      	ldr	r3, [r3, #24]
 8000f80:	f003 0308 	and.w	r3, r3, #8
 8000f84:	603b      	str	r3, [r7, #0]
 8000f86:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin, GPIO_PIN_RESET);
 8000f88:	2200      	movs	r2, #0
 8000f8a:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8000f8e:	481d      	ldr	r0, [pc, #116]	; (8001004 <MX_GPIO_Init+0xc0>)
 8000f90:	f001 f855 	bl	800203e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG0_Pin|SEG1_Pin|SEG2_Pin|V_RED_Pin
 8000f94:	2200      	movs	r2, #0
 8000f96:	f64f 417f 	movw	r1, #64639	; 0xfc7f
 8000f9a:	481b      	ldr	r0, [pc, #108]	; (8001008 <MX_GPIO_Init+0xc4>)
 8000f9c:	f001 f84f 	bl	800203e <HAL_GPIO_WritePin>
                          |V_YEL_Pin|V_GRE_Pin|H_RED_Pin|H_YEL_Pin
                          |H_GRE_Pin|SEG3_Pin|SEG4_Pin|SEG5_Pin
                          |SEG6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin;
 8000fa0:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000fa4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000faa:	2300      	movs	r3, #0
 8000fac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fae:	2302      	movs	r3, #2
 8000fb0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb2:	f107 0308 	add.w	r3, r7, #8
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4812      	ldr	r0, [pc, #72]	; (8001004 <MX_GPIO_Init+0xc0>)
 8000fba:	f000 fead 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin|V_RED_Pin
 8000fbe:	f64f 437f 	movw	r3, #64639	; 0xfc7f
 8000fc2:	60bb      	str	r3, [r7, #8]
                          |V_YEL_Pin|V_GRE_Pin|H_RED_Pin|H_YEL_Pin
                          |H_GRE_Pin|SEG3_Pin|SEG4_Pin|SEG5_Pin
                          |SEG6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fcc:	2302      	movs	r3, #2
 8000fce:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd0:	f107 0308 	add.w	r3, r7, #8
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	480c      	ldr	r0, [pc, #48]	; (8001008 <MX_GPIO_Init+0xc4>)
 8000fd8:	f000 fe9e 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = MODE_Pin|TIME_Pin|SET_Pin;
 8000fdc:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000fe0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fea:	f107 0308 	add.w	r3, r7, #8
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4804      	ldr	r0, [pc, #16]	; (8001004 <MX_GPIO_Init+0xc0>)
 8000ff2:	f000 fe91 	bl	8001d18 <HAL_GPIO_Init>

}
 8000ff6:	bf00      	nop
 8000ff8:	3718      	adds	r7, #24
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	40021000 	.word	0x40021000
 8001004:	40010800 	.word	0x40010800
 8001008:	40010c00 	.word	0x40010c00

0800100c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001010:	f000 fd12 	bl	8001a38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001014:	f000 f816 	bl	8001044 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001018:	f7ff ff94 	bl	8000f44 <MX_GPIO_Init>
  MX_TIM2_Init();
 800101c:	f000 fb78 	bl	8001710 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001020:	4807      	ldr	r0, [pc, #28]	; (8001040 <main+0x34>)
 8001022:	f001 fc75 	bl	8002910 <HAL_TIM_Base_Start_IT>

  Software_Timer_Init();
 8001026:	f000 fa8d 	bl	8001544 <Software_Timer_Init>
  Intersection_Init();
 800102a:	f000 fc2d 	bl	8001888 <Intersection_Init>
  Intersection_7SEG_Init();
 800102e:	f7ff f88d 	bl	800014c <Intersection_7SEG_Init>
  Traffic_Button_Init();
 8001032:	f7ff f98d 	bl	8000350 <Traffic_Button_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//	  Intersection_Normal_Mode();
	  Mode_Processing();
 8001036:	f000 f8e9 	bl	800120c <Mode_Processing>
	  Display_7SEG();
 800103a:	f000 f83f 	bl	80010bc <Display_7SEG>
	  Mode_Processing();
 800103e:	e7fa      	b.n	8001036 <main+0x2a>
 8001040:	20000158 	.word	0x20000158

08001044 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b090      	sub	sp, #64	; 0x40
 8001048:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800104a:	f107 0318 	add.w	r3, r7, #24
 800104e:	2228      	movs	r2, #40	; 0x28
 8001050:	2100      	movs	r1, #0
 8001052:	4618      	mov	r0, r3
 8001054:	f002 f822 	bl	800309c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001058:	1d3b      	adds	r3, r7, #4
 800105a:	2200      	movs	r2, #0
 800105c:	601a      	str	r2, [r3, #0]
 800105e:	605a      	str	r2, [r3, #4]
 8001060:	609a      	str	r2, [r3, #8]
 8001062:	60da      	str	r2, [r3, #12]
 8001064:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001066:	2302      	movs	r3, #2
 8001068:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800106a:	2301      	movs	r3, #1
 800106c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800106e:	2310      	movs	r3, #16
 8001070:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001072:	2300      	movs	r3, #0
 8001074:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001076:	f107 0318 	add.w	r3, r7, #24
 800107a:	4618      	mov	r0, r3
 800107c:	f001 f810 	bl	80020a0 <HAL_RCC_OscConfig>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001086:	f000 f855 	bl	8001134 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800108a:	230f      	movs	r3, #15
 800108c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800108e:	2300      	movs	r3, #0
 8001090:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001092:	2300      	movs	r3, #0
 8001094:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001096:	2300      	movs	r3, #0
 8001098:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800109a:	2300      	movs	r3, #0
 800109c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800109e:	1d3b      	adds	r3, r7, #4
 80010a0:	2100      	movs	r1, #0
 80010a2:	4618      	mov	r0, r3
 80010a4:	f001 fa7e 	bl	80025a4 <HAL_RCC_ClockConfig>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80010ae:	f000 f841 	bl	8001134 <Error_Handler>
  }
}
 80010b2:	bf00      	nop
 80010b4:	3740      	adds	r7, #64	; 0x40
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
	...

080010bc <Display_7SEG>:

/* USER CODE BEGIN 4 */
void Display_7SEG(void){
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
	if (stim3->flag == 1){
 80010c0:	4b07      	ldr	r3, [pc, #28]	; (80010e0 <Display_7SEG+0x24>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	799b      	ldrb	r3, [r3, #6]
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	d108      	bne.n	80010dc <Display_7SEG+0x20>
		 stim3->Set_Default(stim3);
 80010ca:	4b05      	ldr	r3, [pc, #20]	; (80010e0 <Display_7SEG+0x24>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	689b      	ldr	r3, [r3, #8]
 80010d0:	4a03      	ldr	r2, [pc, #12]	; (80010e0 <Display_7SEG+0x24>)
 80010d2:	6812      	ldr	r2, [r2, #0]
 80010d4:	4610      	mov	r0, r2
 80010d6:	4798      	blx	r3
		 Intersection_7SEG_Display();
 80010d8:	f7ff f8e4 	bl	80002a4 <Intersection_7SEG_Display>
	}
}
 80010dc:	bf00      	nop
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	2000014c 	.word	0x2000014c

080010e4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2){
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010f4:	d115      	bne.n	8001122 <HAL_TIM_PeriodElapsedCallback+0x3e>
		hTrafficLight->stim->Timer_Run(hTrafficLight->stim);
 80010f6:	4b0d      	ldr	r3, [pc, #52]	; (800112c <HAL_TIM_PeriodElapsedCallback+0x48>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	68db      	ldr	r3, [r3, #12]
 80010fc:	691b      	ldr	r3, [r3, #16]
 80010fe:	4a0b      	ldr	r2, [pc, #44]	; (800112c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001100:	6812      	ldr	r2, [r2, #0]
 8001102:	68d2      	ldr	r2, [r2, #12]
 8001104:	4610      	mov	r0, r2
 8001106:	4798      	blx	r3
		vTrafficLight->stim->Timer_Run(vTrafficLight->stim);
 8001108:	4b09      	ldr	r3, [pc, #36]	; (8001130 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	68db      	ldr	r3, [r3, #12]
 800110e:	691b      	ldr	r3, [r3, #16]
 8001110:	4a07      	ldr	r2, [pc, #28]	; (8001130 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001112:	6812      	ldr	r2, [r2, #0]
 8001114:	68d2      	ldr	r2, [r2, #12]
 8001116:	4610      	mov	r0, r2
 8001118:	4798      	blx	r3
		Button_Scan();
 800111a:	f7ff f949 	bl	80003b0 <Button_Scan>
		Software_Timer_Run();
 800111e:	f000 fa47 	bl	80015b0 <Software_Timer_Run>
	}
}
 8001122:	bf00      	nop
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	200001a0 	.word	0x200001a0
 8001130:	200001a4 	.word	0x200001a4

08001134 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001138:	b672      	cpsid	i
}
 800113a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800113c:	e7fe      	b.n	800113c <Error_Handler+0x8>
	...

08001140 <ModeButton_Pressed>:

#include "mode.h"

MODE_STATE trafficMode = NORMAL;

void ModeButton_Pressed(void){
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
	if (buttonMode->flag == 1){
 8001144:	4b0e      	ldr	r3, [pc, #56]	; (8001180 <ModeButton_Pressed+0x40>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	7c1b      	ldrb	r3, [r3, #16]
 800114a:	2b01      	cmp	r3, #1
 800114c:	d113      	bne.n	8001176 <ModeButton_Pressed+0x36>
		buttonMode->flag = 0;
 800114e:	4b0c      	ldr	r3, [pc, #48]	; (8001180 <ModeButton_Pressed+0x40>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	2200      	movs	r2, #0
 8001154:	741a      	strb	r2, [r3, #16]
		trafficMode = (trafficMode + 1) % NO_OF_MODE;
 8001156:	4b0b      	ldr	r3, [pc, #44]	; (8001184 <ModeButton_Pressed+0x44>)
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	1c5a      	adds	r2, r3, #1
 800115c:	4b0a      	ldr	r3, [pc, #40]	; (8001188 <ModeButton_Pressed+0x48>)
 800115e:	fb83 1302 	smull	r1, r3, r3, r2
 8001162:	1059      	asrs	r1, r3, #1
 8001164:	17d3      	asrs	r3, r2, #31
 8001166:	1ac9      	subs	r1, r1, r3
 8001168:	460b      	mov	r3, r1
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	440b      	add	r3, r1
 800116e:	1ad1      	subs	r1, r2, r3
 8001170:	b2ca      	uxtb	r2, r1
 8001172:	4b04      	ldr	r3, [pc, #16]	; (8001184 <ModeButton_Pressed+0x44>)
 8001174:	701a      	strb	r2, [r3, #0]
	}
}
 8001176:	bf00      	nop
 8001178:	46bd      	mov	sp, r7
 800117a:	bc80      	pop	{r7}
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	20000134 	.word	0x20000134
 8001184:	20000140 	.word	0x20000140
 8001188:	66666667 	.word	0x66666667

0800118c <Delay_Flush>:

static uint16_t newRedTime 		= 0;
static uint16_t newYellowTime 	= 0;
static uint16_t newGreenTime 	= 0;

void Delay_Flush(void){
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
	newRedTime 		= 0;
 8001190:	4b06      	ldr	r3, [pc, #24]	; (80011ac <Delay_Flush+0x20>)
 8001192:	2200      	movs	r2, #0
 8001194:	801a      	strh	r2, [r3, #0]
	newYellowTime 	= 0;
 8001196:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <Delay_Flush+0x24>)
 8001198:	2200      	movs	r2, #0
 800119a:	801a      	strh	r2, [r3, #0]
	newGreenTime 	= 0;
 800119c:	4b05      	ldr	r3, [pc, #20]	; (80011b4 <Delay_Flush+0x28>)
 800119e:	2200      	movs	r2, #0
 80011a0:	801a      	strh	r2, [r3, #0]
}
 80011a2:	bf00      	nop
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bc80      	pop	{r7}
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	20000142 	.word	0x20000142
 80011b0:	20000144 	.word	0x20000144
 80011b4:	20000146 	.word	0x20000146

080011b8 <LightTime_Modify>:

uint16_t LightTime_Modify(uint16_t* newDelay){
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
	if (buttonTime->flag == 1){
 80011c0:	4b0f      	ldr	r3, [pc, #60]	; (8001200 <LightTime_Modify+0x48>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	7c1b      	ldrb	r3, [r3, #16]
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d113      	bne.n	80011f2 <LightTime_Modify+0x3a>
		buttonTime->flag = 0;
 80011ca:	4b0d      	ldr	r3, [pc, #52]	; (8001200 <LightTime_Modify+0x48>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	2200      	movs	r2, #0
 80011d0:	741a      	strb	r2, [r3, #16]
		*newDelay = (*newDelay + 1) % UPPERBOUND;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	881b      	ldrh	r3, [r3, #0]
 80011d6:	3301      	adds	r3, #1
 80011d8:	4a0a      	ldr	r2, [pc, #40]	; (8001204 <LightTime_Modify+0x4c>)
 80011da:	fb82 1203 	smull	r1, r2, r2, r3
 80011de:	1351      	asrs	r1, r2, #13
 80011e0:	17da      	asrs	r2, r3, #31
 80011e2:	1a8a      	subs	r2, r1, r2
 80011e4:	4908      	ldr	r1, [pc, #32]	; (8001208 <LightTime_Modify+0x50>)
 80011e6:	fb01 f202 	mul.w	r2, r1, r2
 80011ea:	1a9a      	subs	r2, r3, r2
 80011ec:	b292      	uxth	r2, r2
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	801a      	strh	r2, [r3, #0]
	}
	return *newDelay;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	881b      	ldrh	r3, [r3, #0]
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	370c      	adds	r7, #12
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bc80      	pop	{r7}
 80011fe:	4770      	bx	lr
 8001200:	20000138 	.word	0x20000138
 8001204:	14f8b589 	.word	0x14f8b589
 8001208:	000186a0 	.word	0x000186a0

0800120c <Mode_Processing>:

void Mode_Processing(void){
 800120c:	b5b0      	push	{r4, r5, r7, lr}
 800120e:	af00      	add	r7, sp, #0
	ModeButton_Pressed();
 8001210:	f7ff ff96 	bl	8001140 <ModeButton_Pressed>
	switch(trafficMode){
 8001214:	4b81      	ldr	r3, [pc, #516]	; (800141c <Mode_Processing+0x210>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	2b04      	cmp	r3, #4
 800121a:	f200 8171 	bhi.w	8001500 <Mode_Processing+0x2f4>
 800121e:	a201      	add	r2, pc, #4	; (adr r2, 8001224 <Mode_Processing+0x18>)
 8001220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001224:	08001239 	.word	0x08001239
 8001228:	08001273 	.word	0x08001273
 800122c:	08001301 	.word	0x08001301
 8001230:	0800138f 	.word	0x0800138f
 8001234:	08001455 	.word	0x08001455
		case NORMAL:
			if (standardTime->flag == 1){
 8001238:	4b79      	ldr	r3, [pc, #484]	; (8001420 <Mode_Processing+0x214>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	799b      	ldrb	r3, [r3, #6]
 800123e:	2b01      	cmp	r3, #1
 8001240:	d114      	bne.n	800126c <Mode_Processing+0x60>
				  standardTime->Set_Default(standardTime);
 8001242:	4b77      	ldr	r3, [pc, #476]	; (8001420 <Mode_Processing+0x214>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	4a75      	ldr	r2, [pc, #468]	; (8001420 <Mode_Processing+0x214>)
 800124a:	6812      	ldr	r2, [r2, #0]
 800124c:	4610      	mov	r0, r2
 800124e:	4798      	blx	r3
				  vClock->Down(vClock);
 8001250:	4b74      	ldr	r3, [pc, #464]	; (8001424 <Mode_Processing+0x218>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	695b      	ldr	r3, [r3, #20]
 8001256:	4a73      	ldr	r2, [pc, #460]	; (8001424 <Mode_Processing+0x218>)
 8001258:	6812      	ldr	r2, [r2, #0]
 800125a:	4610      	mov	r0, r2
 800125c:	4798      	blx	r3
				  hClock->Down(hClock);
 800125e:	4b72      	ldr	r3, [pc, #456]	; (8001428 <Mode_Processing+0x21c>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	695b      	ldr	r3, [r3, #20]
 8001264:	4a70      	ldr	r2, [pc, #448]	; (8001428 <Mode_Processing+0x21c>)
 8001266:	6812      	ldr	r2, [r2, #0]
 8001268:	4610      	mov	r0, r2
 800126a:	4798      	blx	r3
			}
			Intersection_Normal_Mode();
 800126c:	f000 fb84 	bl	8001978 <Intersection_Normal_Mode>
//			vTrafficLight->Normal_Run(vTrafficLight, vClock, V_RED_TIME, V_YELLOW_TIME, V_GREEN_TIME);
//			hTrafficLight->Normal_Run(hTrafficLight, hClock, H_RED_TIME, H_YELLOW_TIME, H_GREEN_TIME);
			break;
 8001270:	e14d      	b.n	800150e <Mode_Processing+0x302>
		case RED_MOD:
			if (stim2->flag == 1){
 8001272:	4b6e      	ldr	r3, [pc, #440]	; (800142c <Mode_Processing+0x220>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	799b      	ldrb	r3, [r3, #6]
 8001278:	2b01      	cmp	r3, #1
 800127a:	d114      	bne.n	80012a6 <Mode_Processing+0x9a>
				stim2->Set_Default(stim2);
 800127c:	4b6b      	ldr	r3, [pc, #428]	; (800142c <Mode_Processing+0x220>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	689b      	ldr	r3, [r3, #8]
 8001282:	4a6a      	ldr	r2, [pc, #424]	; (800142c <Mode_Processing+0x220>)
 8001284:	6812      	ldr	r2, [r2, #0]
 8001286:	4610      	mov	r0, r2
 8001288:	4798      	blx	r3
				vTrafficLight->Toggle_Red(vTrafficLight);
 800128a:	4b69      	ldr	r3, [pc, #420]	; (8001430 <Mode_Processing+0x224>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001290:	4a67      	ldr	r2, [pc, #412]	; (8001430 <Mode_Processing+0x224>)
 8001292:	6812      	ldr	r2, [r2, #0]
 8001294:	4610      	mov	r0, r2
 8001296:	4798      	blx	r3
				hTrafficLight->Toggle_Red(hTrafficLight);
 8001298:	4b66      	ldr	r3, [pc, #408]	; (8001434 <Mode_Processing+0x228>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800129e:	4a65      	ldr	r2, [pc, #404]	; (8001434 <Mode_Processing+0x228>)
 80012a0:	6812      	ldr	r2, [r2, #0]
 80012a2:	4610      	mov	r0, r2
 80012a4:	4798      	blx	r3
			}

			hClock->Modify(hClock, 0, 0, RED_MOD);
 80012a6:	4b60      	ldr	r3, [pc, #384]	; (8001428 <Mode_Processing+0x21c>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	68dc      	ldr	r4, [r3, #12]
 80012ac:	4b5e      	ldr	r3, [pc, #376]	; (8001428 <Mode_Processing+0x21c>)
 80012ae:	6818      	ldr	r0, [r3, #0]
 80012b0:	2301      	movs	r3, #1
 80012b2:	2200      	movs	r2, #0
 80012b4:	2100      	movs	r1, #0
 80012b6:	47a0      	blx	r4
			vClock->Modify(vClock, 0, 0, LightTime_Modify(&newRedTime));
 80012b8:	4b5a      	ldr	r3, [pc, #360]	; (8001424 <Mode_Processing+0x218>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	68dc      	ldr	r4, [r3, #12]
 80012be:	4b59      	ldr	r3, [pc, #356]	; (8001424 <Mode_Processing+0x218>)
 80012c0:	681d      	ldr	r5, [r3, #0]
 80012c2:	485d      	ldr	r0, [pc, #372]	; (8001438 <Mode_Processing+0x22c>)
 80012c4:	f7ff ff78 	bl	80011b8 <LightTime_Modify>
 80012c8:	4603      	mov	r3, r0
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	2200      	movs	r2, #0
 80012ce:	2100      	movs	r1, #0
 80012d0:	4628      	mov	r0, r5
 80012d2:	47a0      	blx	r4

			if (buttonSet->flag == 1){
 80012d4:	4b59      	ldr	r3, [pc, #356]	; (800143c <Mode_Processing+0x230>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	7c1b      	ldrb	r3, [r3, #16]
 80012da:	2b01      	cmp	r3, #1
 80012dc:	f040 8112 	bne.w	8001504 <Mode_Processing+0x2f8>
				buttonSet->flag = 0;
 80012e0:	4b56      	ldr	r3, [pc, #344]	; (800143c <Mode_Processing+0x230>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2200      	movs	r2, #0
 80012e6:	741a      	strb	r2, [r3, #16]
				H_RED_TIME = newRedTime*1000;
 80012e8:	4b53      	ldr	r3, [pc, #332]	; (8001438 <Mode_Processing+0x22c>)
 80012ea:	881b      	ldrh	r3, [r3, #0]
 80012ec:	461a      	mov	r2, r3
 80012ee:	0152      	lsls	r2, r2, #5
 80012f0:	1ad2      	subs	r2, r2, r3
 80012f2:	0092      	lsls	r2, r2, #2
 80012f4:	4413      	add	r3, r2
 80012f6:	00db      	lsls	r3, r3, #3
 80012f8:	b29a      	uxth	r2, r3
 80012fa:	4b51      	ldr	r3, [pc, #324]	; (8001440 <Mode_Processing+0x234>)
 80012fc:	801a      	strh	r2, [r3, #0]
			}
			break;
 80012fe:	e101      	b.n	8001504 <Mode_Processing+0x2f8>
		case YELLOW_MOD:
			if (stim2->flag == 1){
 8001300:	4b4a      	ldr	r3, [pc, #296]	; (800142c <Mode_Processing+0x220>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	799b      	ldrb	r3, [r3, #6]
 8001306:	2b01      	cmp	r3, #1
 8001308:	d114      	bne.n	8001334 <Mode_Processing+0x128>
				stim2->Set_Default(stim2);
 800130a:	4b48      	ldr	r3, [pc, #288]	; (800142c <Mode_Processing+0x220>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	4a46      	ldr	r2, [pc, #280]	; (800142c <Mode_Processing+0x220>)
 8001312:	6812      	ldr	r2, [r2, #0]
 8001314:	4610      	mov	r0, r2
 8001316:	4798      	blx	r3
				vTrafficLight->Toggle_Yellow(vTrafficLight);
 8001318:	4b45      	ldr	r3, [pc, #276]	; (8001430 <Mode_Processing+0x224>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800131e:	4a44      	ldr	r2, [pc, #272]	; (8001430 <Mode_Processing+0x224>)
 8001320:	6812      	ldr	r2, [r2, #0]
 8001322:	4610      	mov	r0, r2
 8001324:	4798      	blx	r3
				hTrafficLight->Toggle_Yellow(hTrafficLight);
 8001326:	4b43      	ldr	r3, [pc, #268]	; (8001434 <Mode_Processing+0x228>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800132c:	4a41      	ldr	r2, [pc, #260]	; (8001434 <Mode_Processing+0x228>)
 800132e:	6812      	ldr	r2, [r2, #0]
 8001330:	4610      	mov	r0, r2
 8001332:	4798      	blx	r3
			}

			hClock->Modify(hClock, 0, 0, YELLOW_MOD);
 8001334:	4b3c      	ldr	r3, [pc, #240]	; (8001428 <Mode_Processing+0x21c>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	68dc      	ldr	r4, [r3, #12]
 800133a:	4b3b      	ldr	r3, [pc, #236]	; (8001428 <Mode_Processing+0x21c>)
 800133c:	6818      	ldr	r0, [r3, #0]
 800133e:	2302      	movs	r3, #2
 8001340:	2200      	movs	r2, #0
 8001342:	2100      	movs	r1, #0
 8001344:	47a0      	blx	r4
			vClock->Modify(vClock, 0, 0, LightTime_Modify(&newYellowTime));
 8001346:	4b37      	ldr	r3, [pc, #220]	; (8001424 <Mode_Processing+0x218>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	68dc      	ldr	r4, [r3, #12]
 800134c:	4b35      	ldr	r3, [pc, #212]	; (8001424 <Mode_Processing+0x218>)
 800134e:	681d      	ldr	r5, [r3, #0]
 8001350:	483c      	ldr	r0, [pc, #240]	; (8001444 <Mode_Processing+0x238>)
 8001352:	f7ff ff31 	bl	80011b8 <LightTime_Modify>
 8001356:	4603      	mov	r3, r0
 8001358:	b2db      	uxtb	r3, r3
 800135a:	2200      	movs	r2, #0
 800135c:	2100      	movs	r1, #0
 800135e:	4628      	mov	r0, r5
 8001360:	47a0      	blx	r4

			if (buttonSet->flag == 1){
 8001362:	4b36      	ldr	r3, [pc, #216]	; (800143c <Mode_Processing+0x230>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	7c1b      	ldrb	r3, [r3, #16]
 8001368:	2b01      	cmp	r3, #1
 800136a:	f040 80cd 	bne.w	8001508 <Mode_Processing+0x2fc>
				buttonSet->flag = 0;
 800136e:	4b33      	ldr	r3, [pc, #204]	; (800143c <Mode_Processing+0x230>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	2200      	movs	r2, #0
 8001374:	741a      	strb	r2, [r3, #16]
				H_YELLOW_TIME = newYellowTime*1000;
 8001376:	4b33      	ldr	r3, [pc, #204]	; (8001444 <Mode_Processing+0x238>)
 8001378:	881b      	ldrh	r3, [r3, #0]
 800137a:	461a      	mov	r2, r3
 800137c:	0152      	lsls	r2, r2, #5
 800137e:	1ad2      	subs	r2, r2, r3
 8001380:	0092      	lsls	r2, r2, #2
 8001382:	4413      	add	r3, r2
 8001384:	00db      	lsls	r3, r3, #3
 8001386:	b29a      	uxth	r2, r3
 8001388:	4b2f      	ldr	r3, [pc, #188]	; (8001448 <Mode_Processing+0x23c>)
 800138a:	801a      	strh	r2, [r3, #0]
			}
			break;
 800138c:	e0bc      	b.n	8001508 <Mode_Processing+0x2fc>
		case GREEN_MOD:
			if (stim2->flag == 1){
 800138e:	4b27      	ldr	r3, [pc, #156]	; (800142c <Mode_Processing+0x220>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	799b      	ldrb	r3, [r3, #6]
 8001394:	2b01      	cmp	r3, #1
 8001396:	d114      	bne.n	80013c2 <Mode_Processing+0x1b6>
				stim2->Set_Default(stim2);
 8001398:	4b24      	ldr	r3, [pc, #144]	; (800142c <Mode_Processing+0x220>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	689b      	ldr	r3, [r3, #8]
 800139e:	4a23      	ldr	r2, [pc, #140]	; (800142c <Mode_Processing+0x220>)
 80013a0:	6812      	ldr	r2, [r2, #0]
 80013a2:	4610      	mov	r0, r2
 80013a4:	4798      	blx	r3
				vTrafficLight->Toggle_Green(vTrafficLight);
 80013a6:	4b22      	ldr	r3, [pc, #136]	; (8001430 <Mode_Processing+0x224>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ac:	4a20      	ldr	r2, [pc, #128]	; (8001430 <Mode_Processing+0x224>)
 80013ae:	6812      	ldr	r2, [r2, #0]
 80013b0:	4610      	mov	r0, r2
 80013b2:	4798      	blx	r3
				hTrafficLight->Toggle_Green(hTrafficLight);
 80013b4:	4b1f      	ldr	r3, [pc, #124]	; (8001434 <Mode_Processing+0x228>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ba:	4a1e      	ldr	r2, [pc, #120]	; (8001434 <Mode_Processing+0x228>)
 80013bc:	6812      	ldr	r2, [r2, #0]
 80013be:	4610      	mov	r0, r2
 80013c0:	4798      	blx	r3
			}

			hClock->Modify(hClock, 0, 0, GREEN_MOD);
 80013c2:	4b19      	ldr	r3, [pc, #100]	; (8001428 <Mode_Processing+0x21c>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	68dc      	ldr	r4, [r3, #12]
 80013c8:	4b17      	ldr	r3, [pc, #92]	; (8001428 <Mode_Processing+0x21c>)
 80013ca:	6818      	ldr	r0, [r3, #0]
 80013cc:	2303      	movs	r3, #3
 80013ce:	2200      	movs	r2, #0
 80013d0:	2100      	movs	r1, #0
 80013d2:	47a0      	blx	r4
			vClock->Modify(vClock, 0, 0, LightTime_Modify(&newGreenTime));
 80013d4:	4b13      	ldr	r3, [pc, #76]	; (8001424 <Mode_Processing+0x218>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	68dc      	ldr	r4, [r3, #12]
 80013da:	4b12      	ldr	r3, [pc, #72]	; (8001424 <Mode_Processing+0x218>)
 80013dc:	681d      	ldr	r5, [r3, #0]
 80013de:	481b      	ldr	r0, [pc, #108]	; (800144c <Mode_Processing+0x240>)
 80013e0:	f7ff feea 	bl	80011b8 <LightTime_Modify>
 80013e4:	4603      	mov	r3, r0
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	2200      	movs	r2, #0
 80013ea:	2100      	movs	r1, #0
 80013ec:	4628      	mov	r0, r5
 80013ee:	47a0      	blx	r4

			if (buttonSet->flag == 1){
 80013f0:	4b12      	ldr	r3, [pc, #72]	; (800143c <Mode_Processing+0x230>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	7c1b      	ldrb	r3, [r3, #16]
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	f040 8088 	bne.w	800150c <Mode_Processing+0x300>
				buttonSet->flag = 0;
 80013fc:	4b0f      	ldr	r3, [pc, #60]	; (800143c <Mode_Processing+0x230>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	2200      	movs	r2, #0
 8001402:	741a      	strb	r2, [r3, #16]
				H_GREEN_TIME = newGreenTime*1000;
 8001404:	4b11      	ldr	r3, [pc, #68]	; (800144c <Mode_Processing+0x240>)
 8001406:	881b      	ldrh	r3, [r3, #0]
 8001408:	461a      	mov	r2, r3
 800140a:	0152      	lsls	r2, r2, #5
 800140c:	1ad2      	subs	r2, r2, r3
 800140e:	0092      	lsls	r2, r2, #2
 8001410:	4413      	add	r3, r2
 8001412:	00db      	lsls	r3, r3, #3
 8001414:	b29a      	uxth	r2, r3
 8001416:	4b0e      	ldr	r3, [pc, #56]	; (8001450 <Mode_Processing+0x244>)
 8001418:	801a      	strh	r2, [r3, #0]
			}
			break;
 800141a:	e077      	b.n	800150c <Mode_Processing+0x300>
 800141c:	20000140 	.word	0x20000140
 8001420:	20000150 	.word	0x20000150
 8001424:	200001a8 	.word	0x200001a8
 8001428:	200001ac 	.word	0x200001ac
 800142c:	20000148 	.word	0x20000148
 8001430:	200001a4 	.word	0x200001a4
 8001434:	200001a0 	.word	0x200001a0
 8001438:	20000142 	.word	0x20000142
 800143c:	2000013c 	.word	0x2000013c
 8001440:	200001b8 	.word	0x200001b8
 8001444:	20000144 	.word	0x20000144
 8001448:	200001b6 	.word	0x200001b6
 800144c:	20000146 	.word	0x20000146
 8001450:	200001ba 	.word	0x200001ba
		case EXIT_MOD:
			Delay_Flush();
 8001454:	f7ff fe9a 	bl	800118c <Delay_Flush>
			Sub_Road(H_RED_TIME, H_YELLOW_TIME, H_GREEN_TIME);
 8001458:	4b2e      	ldr	r3, [pc, #184]	; (8001514 <Mode_Processing+0x308>)
 800145a:	881b      	ldrh	r3, [r3, #0]
 800145c:	4a2e      	ldr	r2, [pc, #184]	; (8001518 <Mode_Processing+0x30c>)
 800145e:	8811      	ldrh	r1, [r2, #0]
 8001460:	4a2e      	ldr	r2, [pc, #184]	; (800151c <Mode_Processing+0x310>)
 8001462:	8812      	ldrh	r2, [r2, #0]
 8001464:	4618      	mov	r0, r3
 8001466:	f000 f9c3 	bl	80017f0 <Sub_Road>
			Main_Road(V_RED_TIME, V_YELLOW_TIME, V_GREEN_TIME);
 800146a:	4b2d      	ldr	r3, [pc, #180]	; (8001520 <Mode_Processing+0x314>)
 800146c:	881b      	ldrh	r3, [r3, #0]
 800146e:	4a2d      	ldr	r2, [pc, #180]	; (8001524 <Mode_Processing+0x318>)
 8001470:	8811      	ldrh	r1, [r2, #0]
 8001472:	4a2d      	ldr	r2, [pc, #180]	; (8001528 <Mode_Processing+0x31c>)
 8001474:	8812      	ldrh	r2, [r2, #0]
 8001476:	4618      	mov	r0, r3
 8001478:	f000 f9e0 	bl	800183c <Main_Road>

			hTrafficLight->stim->Set_Manual(hTrafficLight->stim, H_YELLOW_TIME);
 800147c:	4b2b      	ldr	r3, [pc, #172]	; (800152c <Mode_Processing+0x320>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	68db      	ldr	r3, [r3, #12]
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	4a29      	ldr	r2, [pc, #164]	; (800152c <Mode_Processing+0x320>)
 8001486:	6812      	ldr	r2, [r2, #0]
 8001488:	68d2      	ldr	r2, [r2, #12]
 800148a:	4923      	ldr	r1, [pc, #140]	; (8001518 <Mode_Processing+0x30c>)
 800148c:	8809      	ldrh	r1, [r1, #0]
 800148e:	4610      	mov	r0, r2
 8001490:	4798      	blx	r3
			vTrafficLight->stim->Set_Manual(vTrafficLight->stim, V_YELLOW_TIME);
 8001492:	4b27      	ldr	r3, [pc, #156]	; (8001530 <Mode_Processing+0x324>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	68db      	ldr	r3, [r3, #12]
 800149a:	4a25      	ldr	r2, [pc, #148]	; (8001530 <Mode_Processing+0x324>)
 800149c:	6812      	ldr	r2, [r2, #0]
 800149e:	68d2      	ldr	r2, [r2, #12]
 80014a0:	4920      	ldr	r1, [pc, #128]	; (8001524 <Mode_Processing+0x318>)
 80014a2:	8809      	ldrh	r1, [r1, #0]
 80014a4:	4610      	mov	r0, r2
 80014a6:	4798      	blx	r3

			hTrafficLight->state = INIT;
 80014a8:	4b20      	ldr	r3, [pc, #128]	; (800152c <Mode_Processing+0x320>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	2200      	movs	r2, #0
 80014ae:	741a      	strb	r2, [r3, #16]
			vTrafficLight->state = EXIT;
 80014b0:	4b1f      	ldr	r3, [pc, #124]	; (8001530 <Mode_Processing+0x324>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	2204      	movs	r2, #4
 80014b6:	741a      	strb	r2, [r3, #16]

			vClock->Modify(vClock, 0, 0, V_GREEN_TIME/1000);
 80014b8:	4b1e      	ldr	r3, [pc, #120]	; (8001534 <Mode_Processing+0x328>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	68dc      	ldr	r4, [r3, #12]
 80014be:	4b1d      	ldr	r3, [pc, #116]	; (8001534 <Mode_Processing+0x328>)
 80014c0:	6818      	ldr	r0, [r3, #0]
 80014c2:	4b19      	ldr	r3, [pc, #100]	; (8001528 <Mode_Processing+0x31c>)
 80014c4:	881b      	ldrh	r3, [r3, #0]
 80014c6:	4a1c      	ldr	r2, [pc, #112]	; (8001538 <Mode_Processing+0x32c>)
 80014c8:	fba2 2303 	umull	r2, r3, r2, r3
 80014cc:	099b      	lsrs	r3, r3, #6
 80014ce:	b29b      	uxth	r3, r3
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	2200      	movs	r2, #0
 80014d4:	2100      	movs	r1, #0
 80014d6:	47a0      	blx	r4
			hClock->Modify(hClock, 0, 0, H_RED_TIME/1000);
 80014d8:	4b18      	ldr	r3, [pc, #96]	; (800153c <Mode_Processing+0x330>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	68dc      	ldr	r4, [r3, #12]
 80014de:	4b17      	ldr	r3, [pc, #92]	; (800153c <Mode_Processing+0x330>)
 80014e0:	6818      	ldr	r0, [r3, #0]
 80014e2:	4b0c      	ldr	r3, [pc, #48]	; (8001514 <Mode_Processing+0x308>)
 80014e4:	881b      	ldrh	r3, [r3, #0]
 80014e6:	4a14      	ldr	r2, [pc, #80]	; (8001538 <Mode_Processing+0x32c>)
 80014e8:	fba2 2303 	umull	r2, r3, r2, r3
 80014ec:	099b      	lsrs	r3, r3, #6
 80014ee:	b29b      	uxth	r3, r3
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	2200      	movs	r2, #0
 80014f4:	2100      	movs	r1, #0
 80014f6:	47a0      	blx	r4

			trafficMode = NORMAL;
 80014f8:	4b11      	ldr	r3, [pc, #68]	; (8001540 <Mode_Processing+0x334>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	701a      	strb	r2, [r3, #0]
			break;
 80014fe:	e006      	b.n	800150e <Mode_Processing+0x302>
		default:
			break;
 8001500:	bf00      	nop
 8001502:	e004      	b.n	800150e <Mode_Processing+0x302>
			break;
 8001504:	bf00      	nop
 8001506:	e002      	b.n	800150e <Mode_Processing+0x302>
			break;
 8001508:	bf00      	nop
 800150a:	e000      	b.n	800150e <Mode_Processing+0x302>
			break;
 800150c:	bf00      	nop
	}
}
 800150e:	bf00      	nop
 8001510:	bdb0      	pop	{r4, r5, r7, pc}
 8001512:	bf00      	nop
 8001514:	200001b8 	.word	0x200001b8
 8001518:	200001b6 	.word	0x200001b6
 800151c:	200001ba 	.word	0x200001ba
 8001520:	200001b2 	.word	0x200001b2
 8001524:	200001b0 	.word	0x200001b0
 8001528:	200001b4 	.word	0x200001b4
 800152c:	200001a0 	.word	0x200001a0
 8001530:	200001a4 	.word	0x200001a4
 8001534:	200001a8 	.word	0x200001a8
 8001538:	10624dd3 	.word	0x10624dd3
 800153c:	200001ac 	.word	0x200001ac
 8001540:	20000140 	.word	0x20000140

08001544 <Software_Timer_Init>:

STIM_TypeDef* stim2;
STIM_TypeDef* stim3;
STIM_TypeDef* standardTime;

void Software_Timer_Init(void){
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
	stim2 			= STIM_Init(STIM2_TIMER_DELAY, TIM2_TIMER_INTERRUPT);
 8001548:	2132      	movs	r1, #50	; 0x32
 800154a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800154e:	f7fe ff4f 	bl	80003f0 <STIM_Init>
 8001552:	4603      	mov	r3, r0
 8001554:	4a13      	ldr	r2, [pc, #76]	; (80015a4 <Software_Timer_Init+0x60>)
 8001556:	6013      	str	r3, [r2, #0]
	stim3 			= STIM_Init(STIM3_TIMER_DELAY, TIM2_TIMER_INTERRUPT);
 8001558:	2132      	movs	r1, #50	; 0x32
 800155a:	20fa      	movs	r0, #250	; 0xfa
 800155c:	f7fe ff48 	bl	80003f0 <STIM_Init>
 8001560:	4603      	mov	r3, r0
 8001562:	4a11      	ldr	r2, [pc, #68]	; (80015a8 <Software_Timer_Init+0x64>)
 8001564:	6013      	str	r3, [r2, #0]
	standardTime 	= STIM_Init(STANDARD_TIME_DELAY, TIM2_TIMER_INTERRUPT);
 8001566:	2132      	movs	r1, #50	; 0x32
 8001568:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800156c:	f7fe ff40 	bl	80003f0 <STIM_Init>
 8001570:	4603      	mov	r3, r0
 8001572:	4a0e      	ldr	r2, [pc, #56]	; (80015ac <Software_Timer_Init+0x68>)
 8001574:	6013      	str	r3, [r2, #0]

	stim2->Set_Default(stim2);
 8001576:	4b0b      	ldr	r3, [pc, #44]	; (80015a4 <Software_Timer_Init+0x60>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	4a09      	ldr	r2, [pc, #36]	; (80015a4 <Software_Timer_Init+0x60>)
 800157e:	6812      	ldr	r2, [r2, #0]
 8001580:	4610      	mov	r0, r2
 8001582:	4798      	blx	r3
	stim3->Set_Default(stim3);
 8001584:	4b08      	ldr	r3, [pc, #32]	; (80015a8 <Software_Timer_Init+0x64>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	4a07      	ldr	r2, [pc, #28]	; (80015a8 <Software_Timer_Init+0x64>)
 800158c:	6812      	ldr	r2, [r2, #0]
 800158e:	4610      	mov	r0, r2
 8001590:	4798      	blx	r3
	standardTime->Set_Default(standardTime);
 8001592:	4b06      	ldr	r3, [pc, #24]	; (80015ac <Software_Timer_Init+0x68>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	4a04      	ldr	r2, [pc, #16]	; (80015ac <Software_Timer_Init+0x68>)
 800159a:	6812      	ldr	r2, [r2, #0]
 800159c:	4610      	mov	r0, r2
 800159e:	4798      	blx	r3
}
 80015a0:	bf00      	nop
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	20000148 	.word	0x20000148
 80015a8:	2000014c 	.word	0x2000014c
 80015ac:	20000150 	.word	0x20000150

080015b0 <Software_Timer_Run>:

void Software_Timer_Run(void){
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
	stim2->Timer_Run(stim2);
 80015b4:	4b0b      	ldr	r3, [pc, #44]	; (80015e4 <Software_Timer_Run+0x34>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	691b      	ldr	r3, [r3, #16]
 80015ba:	4a0a      	ldr	r2, [pc, #40]	; (80015e4 <Software_Timer_Run+0x34>)
 80015bc:	6812      	ldr	r2, [r2, #0]
 80015be:	4610      	mov	r0, r2
 80015c0:	4798      	blx	r3
	stim3->Timer_Run(stim3);
 80015c2:	4b09      	ldr	r3, [pc, #36]	; (80015e8 <Software_Timer_Run+0x38>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	691b      	ldr	r3, [r3, #16]
 80015c8:	4a07      	ldr	r2, [pc, #28]	; (80015e8 <Software_Timer_Run+0x38>)
 80015ca:	6812      	ldr	r2, [r2, #0]
 80015cc:	4610      	mov	r0, r2
 80015ce:	4798      	blx	r3
	standardTime->Timer_Run(standardTime);
 80015d0:	4b06      	ldr	r3, [pc, #24]	; (80015ec <Software_Timer_Run+0x3c>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	691b      	ldr	r3, [r3, #16]
 80015d6:	4a05      	ldr	r2, [pc, #20]	; (80015ec <Software_Timer_Run+0x3c>)
 80015d8:	6812      	ldr	r2, [r2, #0]
 80015da:	4610      	mov	r0, r2
 80015dc:	4798      	blx	r3
}
 80015de:	bf00      	nop
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	20000148 	.word	0x20000148
 80015e8:	2000014c 	.word	0x2000014c
 80015ec:	20000150 	.word	0x20000150

080015f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80015f6:	4b0e      	ldr	r3, [pc, #56]	; (8001630 <HAL_MspInit+0x40>)
 80015f8:	699b      	ldr	r3, [r3, #24]
 80015fa:	4a0d      	ldr	r2, [pc, #52]	; (8001630 <HAL_MspInit+0x40>)
 80015fc:	f043 0301 	orr.w	r3, r3, #1
 8001600:	6193      	str	r3, [r2, #24]
 8001602:	4b0b      	ldr	r3, [pc, #44]	; (8001630 <HAL_MspInit+0x40>)
 8001604:	699b      	ldr	r3, [r3, #24]
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	607b      	str	r3, [r7, #4]
 800160c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800160e:	4b08      	ldr	r3, [pc, #32]	; (8001630 <HAL_MspInit+0x40>)
 8001610:	69db      	ldr	r3, [r3, #28]
 8001612:	4a07      	ldr	r2, [pc, #28]	; (8001630 <HAL_MspInit+0x40>)
 8001614:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001618:	61d3      	str	r3, [r2, #28]
 800161a:	4b05      	ldr	r3, [pc, #20]	; (8001630 <HAL_MspInit+0x40>)
 800161c:	69db      	ldr	r3, [r3, #28]
 800161e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001622:	603b      	str	r3, [r7, #0]
 8001624:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001626:	bf00      	nop
 8001628:	370c      	adds	r7, #12
 800162a:	46bd      	mov	sp, r7
 800162c:	bc80      	pop	{r7}
 800162e:	4770      	bx	lr
 8001630:	40021000 	.word	0x40021000

08001634 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001638:	e7fe      	b.n	8001638 <NMI_Handler+0x4>

0800163a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800163a:	b480      	push	{r7}
 800163c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800163e:	e7fe      	b.n	800163e <HardFault_Handler+0x4>

08001640 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001644:	e7fe      	b.n	8001644 <MemManage_Handler+0x4>

08001646 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001646:	b480      	push	{r7}
 8001648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800164a:	e7fe      	b.n	800164a <BusFault_Handler+0x4>

0800164c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001650:	e7fe      	b.n	8001650 <UsageFault_Handler+0x4>

08001652 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001652:	b480      	push	{r7}
 8001654:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001656:	bf00      	nop
 8001658:	46bd      	mov	sp, r7
 800165a:	bc80      	pop	{r7}
 800165c:	4770      	bx	lr

0800165e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800165e:	b480      	push	{r7}
 8001660:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001662:	bf00      	nop
 8001664:	46bd      	mov	sp, r7
 8001666:	bc80      	pop	{r7}
 8001668:	4770      	bx	lr

0800166a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800166a:	b480      	push	{r7}
 800166c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800166e:	bf00      	nop
 8001670:	46bd      	mov	sp, r7
 8001672:	bc80      	pop	{r7}
 8001674:	4770      	bx	lr

08001676 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001676:	b580      	push	{r7, lr}
 8001678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800167a:	f000 fa23 	bl	8001ac4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800167e:	bf00      	nop
 8001680:	bd80      	pop	{r7, pc}
	...

08001684 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001688:	4802      	ldr	r0, [pc, #8]	; (8001694 <TIM2_IRQHandler+0x10>)
 800168a:	f001 f98d 	bl	80029a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800168e:	bf00      	nop
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	20000158 	.word	0x20000158

08001698 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b086      	sub	sp, #24
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016a0:	4a14      	ldr	r2, [pc, #80]	; (80016f4 <_sbrk+0x5c>)
 80016a2:	4b15      	ldr	r3, [pc, #84]	; (80016f8 <_sbrk+0x60>)
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016ac:	4b13      	ldr	r3, [pc, #76]	; (80016fc <_sbrk+0x64>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d102      	bne.n	80016ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016b4:	4b11      	ldr	r3, [pc, #68]	; (80016fc <_sbrk+0x64>)
 80016b6:	4a12      	ldr	r2, [pc, #72]	; (8001700 <_sbrk+0x68>)
 80016b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016ba:	4b10      	ldr	r3, [pc, #64]	; (80016fc <_sbrk+0x64>)
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4413      	add	r3, r2
 80016c2:	693a      	ldr	r2, [r7, #16]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d207      	bcs.n	80016d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016c8:	f001 fcb6 	bl	8003038 <__errno>
 80016cc:	4603      	mov	r3, r0
 80016ce:	220c      	movs	r2, #12
 80016d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016d2:	f04f 33ff 	mov.w	r3, #4294967295
 80016d6:	e009      	b.n	80016ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016d8:	4b08      	ldr	r3, [pc, #32]	; (80016fc <_sbrk+0x64>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016de:	4b07      	ldr	r3, [pc, #28]	; (80016fc <_sbrk+0x64>)
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4413      	add	r3, r2
 80016e6:	4a05      	ldr	r2, [pc, #20]	; (80016fc <_sbrk+0x64>)
 80016e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016ea:	68fb      	ldr	r3, [r7, #12]
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	3718      	adds	r7, #24
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	20002800 	.word	0x20002800
 80016f8:	00000400 	.word	0x00000400
 80016fc:	20000154 	.word	0x20000154
 8001700:	200001d0 	.word	0x200001d0

08001704 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001708:	bf00      	nop
 800170a:	46bd      	mov	sp, r7
 800170c:	bc80      	pop	{r7}
 800170e:	4770      	bx	lr

08001710 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b086      	sub	sp, #24
 8001714:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001716:	f107 0308 	add.w	r3, r7, #8
 800171a:	2200      	movs	r2, #0
 800171c:	601a      	str	r2, [r3, #0]
 800171e:	605a      	str	r2, [r3, #4]
 8001720:	609a      	str	r2, [r3, #8]
 8001722:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001724:	463b      	mov	r3, r7
 8001726:	2200      	movs	r2, #0
 8001728:	601a      	str	r2, [r3, #0]
 800172a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800172c:	4b1d      	ldr	r3, [pc, #116]	; (80017a4 <MX_TIM2_Init+0x94>)
 800172e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001732:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 39999;
 8001734:	4b1b      	ldr	r3, [pc, #108]	; (80017a4 <MX_TIM2_Init+0x94>)
 8001736:	f649 423f 	movw	r2, #39999	; 0x9c3f
 800173a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800173c:	4b19      	ldr	r3, [pc, #100]	; (80017a4 <MX_TIM2_Init+0x94>)
 800173e:	2200      	movs	r2, #0
 8001740:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001742:	4b18      	ldr	r3, [pc, #96]	; (80017a4 <MX_TIM2_Init+0x94>)
 8001744:	2209      	movs	r2, #9
 8001746:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001748:	4b16      	ldr	r3, [pc, #88]	; (80017a4 <MX_TIM2_Init+0x94>)
 800174a:	2200      	movs	r2, #0
 800174c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800174e:	4b15      	ldr	r3, [pc, #84]	; (80017a4 <MX_TIM2_Init+0x94>)
 8001750:	2200      	movs	r2, #0
 8001752:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001754:	4813      	ldr	r0, [pc, #76]	; (80017a4 <MX_TIM2_Init+0x94>)
 8001756:	f001 f88b 	bl	8002870 <HAL_TIM_Base_Init>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001760:	f7ff fce8 	bl	8001134 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001764:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001768:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800176a:	f107 0308 	add.w	r3, r7, #8
 800176e:	4619      	mov	r1, r3
 8001770:	480c      	ldr	r0, [pc, #48]	; (80017a4 <MX_TIM2_Init+0x94>)
 8001772:	f001 fa21 	bl	8002bb8 <HAL_TIM_ConfigClockSource>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800177c:	f7ff fcda 	bl	8001134 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001780:	2300      	movs	r3, #0
 8001782:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001784:	2300      	movs	r3, #0
 8001786:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001788:	463b      	mov	r3, r7
 800178a:	4619      	mov	r1, r3
 800178c:	4805      	ldr	r0, [pc, #20]	; (80017a4 <MX_TIM2_Init+0x94>)
 800178e:	f001 fbe9 	bl	8002f64 <HAL_TIMEx_MasterConfigSynchronization>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001798:	f7ff fccc 	bl	8001134 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800179c:	bf00      	nop
 800179e:	3718      	adds	r7, #24
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	20000158 	.word	0x20000158

080017a8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017b8:	d113      	bne.n	80017e2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017ba:	4b0c      	ldr	r3, [pc, #48]	; (80017ec <HAL_TIM_Base_MspInit+0x44>)
 80017bc:	69db      	ldr	r3, [r3, #28]
 80017be:	4a0b      	ldr	r2, [pc, #44]	; (80017ec <HAL_TIM_Base_MspInit+0x44>)
 80017c0:	f043 0301 	orr.w	r3, r3, #1
 80017c4:	61d3      	str	r3, [r2, #28]
 80017c6:	4b09      	ldr	r3, [pc, #36]	; (80017ec <HAL_TIM_Base_MspInit+0x44>)
 80017c8:	69db      	ldr	r3, [r3, #28]
 80017ca:	f003 0301 	and.w	r3, r3, #1
 80017ce:	60fb      	str	r3, [r7, #12]
 80017d0:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80017d2:	2200      	movs	r2, #0
 80017d4:	2100      	movs	r1, #0
 80017d6:	201c      	movs	r0, #28
 80017d8:	f000 fa67 	bl	8001caa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80017dc:	201c      	movs	r0, #28
 80017de:	f000 fa80 	bl	8001ce2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80017e2:	bf00      	nop
 80017e4:	3710      	adds	r7, #16
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	40021000 	.word	0x40021000

080017f0 <Sub_Road>:
uint16_t V_GREEN_TIME;
uint16_t H_YELLOW_TIME;
uint16_t H_RED_TIME;
uint16_t H_GREEN_TIME;

void Sub_Road(uint16_t mainRed, uint16_t mainYellow, uint16_t mainGreen){
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	4603      	mov	r3, r0
 80017f8:	80fb      	strh	r3, [r7, #6]
 80017fa:	460b      	mov	r3, r1
 80017fc:	80bb      	strh	r3, [r7, #4]
 80017fe:	4613      	mov	r3, r2
 8001800:	807b      	strh	r3, [r7, #2]
	V_YELLOW_TIME 	= 2000;
 8001802:	4b0b      	ldr	r3, [pc, #44]	; (8001830 <Sub_Road+0x40>)
 8001804:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001808:	801a      	strh	r2, [r3, #0]
	V_GREEN_TIME 	= (mainRed) 	-	V_YELLOW_TIME;
 800180a:	4b09      	ldr	r3, [pc, #36]	; (8001830 <Sub_Road+0x40>)
 800180c:	881b      	ldrh	r3, [r3, #0]
 800180e:	88fa      	ldrh	r2, [r7, #6]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	b29a      	uxth	r2, r3
 8001814:	4b07      	ldr	r3, [pc, #28]	; (8001834 <Sub_Road+0x44>)
 8001816:	801a      	strh	r2, [r3, #0]
	V_RED_TIME 		= (mainGreen)	+	(mainYellow);
 8001818:	887a      	ldrh	r2, [r7, #2]
 800181a:	88bb      	ldrh	r3, [r7, #4]
 800181c:	4413      	add	r3, r2
 800181e:	b29a      	uxth	r2, r3
 8001820:	4b05      	ldr	r3, [pc, #20]	; (8001838 <Sub_Road+0x48>)
 8001822:	801a      	strh	r2, [r3, #0]
}
 8001824:	bf00      	nop
 8001826:	370c      	adds	r7, #12
 8001828:	46bd      	mov	sp, r7
 800182a:	bc80      	pop	{r7}
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	200001b0 	.word	0x200001b0
 8001834:	200001b4 	.word	0x200001b4
 8001838:	200001b2 	.word	0x200001b2

0800183c <Main_Road>:

void Main_Road(uint16_t subRed, uint16_t subYellow, uint16_t subGreen){
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	4603      	mov	r3, r0
 8001844:	80fb      	strh	r3, [r7, #6]
 8001846:	460b      	mov	r3, r1
 8001848:	80bb      	strh	r3, [r7, #4]
 800184a:	4613      	mov	r3, r2
 800184c:	807b      	strh	r3, [r7, #2]
	H_YELLOW_TIME 	= 2000;
 800184e:	4b0b      	ldr	r3, [pc, #44]	; (800187c <Main_Road+0x40>)
 8001850:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001854:	801a      	strh	r2, [r3, #0]
	H_GREEN_TIME 	= (subRed)		-	H_YELLOW_TIME;
 8001856:	4b09      	ldr	r3, [pc, #36]	; (800187c <Main_Road+0x40>)
 8001858:	881b      	ldrh	r3, [r3, #0]
 800185a:	88fa      	ldrh	r2, [r7, #6]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	b29a      	uxth	r2, r3
 8001860:	4b07      	ldr	r3, [pc, #28]	; (8001880 <Main_Road+0x44>)
 8001862:	801a      	strh	r2, [r3, #0]
	H_RED_TIME		= (subGreen) 	+	(subYellow);
 8001864:	887a      	ldrh	r2, [r7, #2]
 8001866:	88bb      	ldrh	r3, [r7, #4]
 8001868:	4413      	add	r3, r2
 800186a:	b29a      	uxth	r2, r3
 800186c:	4b05      	ldr	r3, [pc, #20]	; (8001884 <Main_Road+0x48>)
 800186e:	801a      	strh	r2, [r3, #0]
}
 8001870:	bf00      	nop
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	bc80      	pop	{r7}
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	200001b6 	.word	0x200001b6
 8001880:	200001ba 	.word	0x200001ba
 8001884:	200001b8 	.word	0x200001b8

08001888 <Intersection_Init>:

void Intersection_Init(void){
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
	Sub_Road(H_RED_TIME_EX, H_YELLOW_TIME_EX, H_GREEN_TIME_EX);
 800188c:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8001890:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001894:	f241 3088 	movw	r0, #5000	; 0x1388
 8001898:	f7ff ffaa 	bl	80017f0 <Sub_Road>
	Main_Road(V_RED_TIME, V_YELLOW_TIME, V_GREEN_TIME);
 800189c:	4b28      	ldr	r3, [pc, #160]	; (8001940 <Intersection_Init+0xb8>)
 800189e:	881b      	ldrh	r3, [r3, #0]
 80018a0:	4a28      	ldr	r2, [pc, #160]	; (8001944 <Intersection_Init+0xbc>)
 80018a2:	8811      	ldrh	r1, [r2, #0]
 80018a4:	4a28      	ldr	r2, [pc, #160]	; (8001948 <Intersection_Init+0xc0>)
 80018a6:	8812      	ldrh	r2, [r2, #0]
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7ff ffc7 	bl	800183c <Main_Road>

	hTrafficLight = Traffic_Init(hPort, hPin, STIM_Init(H_YELLOW_TIME, TIM2_TIMER_INTERRUPT));
 80018ae:	4b27      	ldr	r3, [pc, #156]	; (800194c <Intersection_Init+0xc4>)
 80018b0:	881b      	ldrh	r3, [r3, #0]
 80018b2:	2132      	movs	r1, #50	; 0x32
 80018b4:	4618      	mov	r0, r3
 80018b6:	f7fe fd9b 	bl	80003f0 <STIM_Init>
 80018ba:	4603      	mov	r3, r0
 80018bc:	461a      	mov	r2, r3
 80018be:	4924      	ldr	r1, [pc, #144]	; (8001950 <Intersection_Init+0xc8>)
 80018c0:	4824      	ldr	r0, [pc, #144]	; (8001954 <Intersection_Init+0xcc>)
 80018c2:	f7ff f95d 	bl	8000b80 <Traffic_Init>
 80018c6:	4603      	mov	r3, r0
 80018c8:	4a23      	ldr	r2, [pc, #140]	; (8001958 <Intersection_Init+0xd0>)
 80018ca:	6013      	str	r3, [r2, #0]
	vTrafficLight = Traffic_Init(vPort, vPin, STIM_Init(V_YELLOW_TIME, TIM2_TIMER_INTERRUPT));
 80018cc:	4b1d      	ldr	r3, [pc, #116]	; (8001944 <Intersection_Init+0xbc>)
 80018ce:	881b      	ldrh	r3, [r3, #0]
 80018d0:	2132      	movs	r1, #50	; 0x32
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7fe fd8c 	bl	80003f0 <STIM_Init>
 80018d8:	4603      	mov	r3, r0
 80018da:	461a      	mov	r2, r3
 80018dc:	491f      	ldr	r1, [pc, #124]	; (800195c <Intersection_Init+0xd4>)
 80018de:	4820      	ldr	r0, [pc, #128]	; (8001960 <Intersection_Init+0xd8>)
 80018e0:	f7ff f94e 	bl	8000b80 <Traffic_Init>
 80018e4:	4603      	mov	r3, r0
 80018e6:	4a1f      	ldr	r2, [pc, #124]	; (8001964 <Intersection_Init+0xdc>)
 80018e8:	6013      	str	r3, [r2, #0]

	hTrafficLight->state = INIT;
 80018ea:	4b1b      	ldr	r3, [pc, #108]	; (8001958 <Intersection_Init+0xd0>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	2200      	movs	r2, #0
 80018f0:	741a      	strb	r2, [r3, #16]
	vTrafficLight->state = EXIT;
 80018f2:	4b1c      	ldr	r3, [pc, #112]	; (8001964 <Intersection_Init+0xdc>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	2204      	movs	r2, #4
 80018f8:	741a      	strb	r2, [r3, #16]

	vClock = Clock_Init(0, 0, V_GREEN_TIME/1000);
 80018fa:	4b13      	ldr	r3, [pc, #76]	; (8001948 <Intersection_Init+0xc0>)
 80018fc:	881b      	ldrh	r3, [r3, #0]
 80018fe:	4a1a      	ldr	r2, [pc, #104]	; (8001968 <Intersection_Init+0xe0>)
 8001900:	fba2 2303 	umull	r2, r3, r2, r3
 8001904:	099b      	lsrs	r3, r3, #6
 8001906:	b29b      	uxth	r3, r3
 8001908:	b2db      	uxtb	r3, r3
 800190a:	461a      	mov	r2, r3
 800190c:	2100      	movs	r1, #0
 800190e:	2000      	movs	r0, #0
 8001910:	f7fe fe50 	bl	80005b4 <Clock_Init>
 8001914:	4603      	mov	r3, r0
 8001916:	4a15      	ldr	r2, [pc, #84]	; (800196c <Intersection_Init+0xe4>)
 8001918:	6013      	str	r3, [r2, #0]
	hClock = Clock_Init(0, 0, H_RED_TIME/1000);
 800191a:	4b15      	ldr	r3, [pc, #84]	; (8001970 <Intersection_Init+0xe8>)
 800191c:	881b      	ldrh	r3, [r3, #0]
 800191e:	4a12      	ldr	r2, [pc, #72]	; (8001968 <Intersection_Init+0xe0>)
 8001920:	fba2 2303 	umull	r2, r3, r2, r3
 8001924:	099b      	lsrs	r3, r3, #6
 8001926:	b29b      	uxth	r3, r3
 8001928:	b2db      	uxtb	r3, r3
 800192a:	461a      	mov	r2, r3
 800192c:	2100      	movs	r1, #0
 800192e:	2000      	movs	r0, #0
 8001930:	f7fe fe40 	bl	80005b4 <Clock_Init>
 8001934:	4603      	mov	r3, r0
 8001936:	4a0f      	ldr	r2, [pc, #60]	; (8001974 <Intersection_Init+0xec>)
 8001938:	6013      	str	r3, [r2, #0]
}
 800193a:	bf00      	nop
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	200001b2 	.word	0x200001b2
 8001944:	200001b0 	.word	0x200001b0
 8001948:	200001b4 	.word	0x200001b4
 800194c:	200001b6 	.word	0x200001b6
 8001950:	20000070 	.word	0x20000070
 8001954:	20000084 	.word	0x20000084
 8001958:	200001a0 	.word	0x200001a0
 800195c:	20000068 	.word	0x20000068
 8001960:	20000078 	.word	0x20000078
 8001964:	200001a4 	.word	0x200001a4
 8001968:	10624dd3 	.word	0x10624dd3
 800196c:	200001a8 	.word	0x200001a8
 8001970:	200001b8 	.word	0x200001b8
 8001974:	200001ac 	.word	0x200001ac

08001978 <Intersection_Normal_Mode>:


void Intersection_Normal_Mode(void){
 8001978:	b5b0      	push	{r4, r5, r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af02      	add	r7, sp, #8
	vTrafficLight->Normal_Run(vTrafficLight, vClock, V_RED_TIME, V_YELLOW_TIME, V_GREEN_TIME);
 800197e:	4b11      	ldr	r3, [pc, #68]	; (80019c4 <Intersection_Normal_Mode+0x4c>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	695c      	ldr	r4, [r3, #20]
 8001984:	4b0f      	ldr	r3, [pc, #60]	; (80019c4 <Intersection_Normal_Mode+0x4c>)
 8001986:	6818      	ldr	r0, [r3, #0]
 8001988:	4b0f      	ldr	r3, [pc, #60]	; (80019c8 <Intersection_Normal_Mode+0x50>)
 800198a:	6819      	ldr	r1, [r3, #0]
 800198c:	4b0f      	ldr	r3, [pc, #60]	; (80019cc <Intersection_Normal_Mode+0x54>)
 800198e:	881a      	ldrh	r2, [r3, #0]
 8001990:	4b0f      	ldr	r3, [pc, #60]	; (80019d0 <Intersection_Normal_Mode+0x58>)
 8001992:	881d      	ldrh	r5, [r3, #0]
 8001994:	4b0f      	ldr	r3, [pc, #60]	; (80019d4 <Intersection_Normal_Mode+0x5c>)
 8001996:	881b      	ldrh	r3, [r3, #0]
 8001998:	9300      	str	r3, [sp, #0]
 800199a:	462b      	mov	r3, r5
 800199c:	47a0      	blx	r4
	hTrafficLight->Normal_Run(hTrafficLight, hClock, H_RED_TIME, H_YELLOW_TIME, H_GREEN_TIME);
 800199e:	4b0e      	ldr	r3, [pc, #56]	; (80019d8 <Intersection_Normal_Mode+0x60>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	695c      	ldr	r4, [r3, #20]
 80019a4:	4b0c      	ldr	r3, [pc, #48]	; (80019d8 <Intersection_Normal_Mode+0x60>)
 80019a6:	6818      	ldr	r0, [r3, #0]
 80019a8:	4b0c      	ldr	r3, [pc, #48]	; (80019dc <Intersection_Normal_Mode+0x64>)
 80019aa:	6819      	ldr	r1, [r3, #0]
 80019ac:	4b0c      	ldr	r3, [pc, #48]	; (80019e0 <Intersection_Normal_Mode+0x68>)
 80019ae:	881a      	ldrh	r2, [r3, #0]
 80019b0:	4b0c      	ldr	r3, [pc, #48]	; (80019e4 <Intersection_Normal_Mode+0x6c>)
 80019b2:	881d      	ldrh	r5, [r3, #0]
 80019b4:	4b0c      	ldr	r3, [pc, #48]	; (80019e8 <Intersection_Normal_Mode+0x70>)
 80019b6:	881b      	ldrh	r3, [r3, #0]
 80019b8:	9300      	str	r3, [sp, #0]
 80019ba:	462b      	mov	r3, r5
 80019bc:	47a0      	blx	r4
}
 80019be:	bf00      	nop
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bdb0      	pop	{r4, r5, r7, pc}
 80019c4:	200001a4 	.word	0x200001a4
 80019c8:	200001a8 	.word	0x200001a8
 80019cc:	200001b2 	.word	0x200001b2
 80019d0:	200001b0 	.word	0x200001b0
 80019d4:	200001b4 	.word	0x200001b4
 80019d8:	200001a0 	.word	0x200001a0
 80019dc:	200001ac 	.word	0x200001ac
 80019e0:	200001b8 	.word	0x200001b8
 80019e4:	200001b6 	.word	0x200001b6
 80019e8:	200001ba 	.word	0x200001ba

080019ec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019ec:	480c      	ldr	r0, [pc, #48]	; (8001a20 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80019ee:	490d      	ldr	r1, [pc, #52]	; (8001a24 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80019f0:	4a0d      	ldr	r2, [pc, #52]	; (8001a28 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80019f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019f4:	e002      	b.n	80019fc <LoopCopyDataInit>

080019f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019fa:	3304      	adds	r3, #4

080019fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a00:	d3f9      	bcc.n	80019f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a02:	4a0a      	ldr	r2, [pc, #40]	; (8001a2c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a04:	4c0a      	ldr	r4, [pc, #40]	; (8001a30 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a08:	e001      	b.n	8001a0e <LoopFillZerobss>

08001a0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a0c:	3204      	adds	r2, #4

08001a0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a10:	d3fb      	bcc.n	8001a0a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001a12:	f7ff fe77 	bl	8001704 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a16:	f001 fb15 	bl	8003044 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a1a:	f7ff faf7 	bl	800100c <main>
  bx lr
 8001a1e:	4770      	bx	lr
  ldr r0, =_sdata
 8001a20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a24:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8001a28:	08003250 	.word	0x08003250
  ldr r2, =_sbss
 8001a2c:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8001a30:	200001d0 	.word	0x200001d0

08001a34 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a34:	e7fe      	b.n	8001a34 <ADC1_2_IRQHandler>
	...

08001a38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a3c:	4b08      	ldr	r3, [pc, #32]	; (8001a60 <HAL_Init+0x28>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a07      	ldr	r2, [pc, #28]	; (8001a60 <HAL_Init+0x28>)
 8001a42:	f043 0310 	orr.w	r3, r3, #16
 8001a46:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a48:	2003      	movs	r0, #3
 8001a4a:	f000 f923 	bl	8001c94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a4e:	200f      	movs	r0, #15
 8001a50:	f000 f808 	bl	8001a64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a54:	f7ff fdcc 	bl	80015f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	40022000 	.word	0x40022000

08001a64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a6c:	4b12      	ldr	r3, [pc, #72]	; (8001ab8 <HAL_InitTick+0x54>)
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	4b12      	ldr	r3, [pc, #72]	; (8001abc <HAL_InitTick+0x58>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	4619      	mov	r1, r3
 8001a76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a82:	4618      	mov	r0, r3
 8001a84:	f000 f93b 	bl	8001cfe <HAL_SYSTICK_Config>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e00e      	b.n	8001ab0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2b0f      	cmp	r3, #15
 8001a96:	d80a      	bhi.n	8001aae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a98:	2200      	movs	r2, #0
 8001a9a:	6879      	ldr	r1, [r7, #4]
 8001a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001aa0:	f000 f903 	bl	8001caa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001aa4:	4a06      	ldr	r2, [pc, #24]	; (8001ac0 <HAL_InitTick+0x5c>)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	e000      	b.n	8001ab0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3708      	adds	r7, #8
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	20000064 	.word	0x20000064
 8001abc:	20000094 	.word	0x20000094
 8001ac0:	20000090 	.word	0x20000090

08001ac4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ac8:	4b05      	ldr	r3, [pc, #20]	; (8001ae0 <HAL_IncTick+0x1c>)
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	461a      	mov	r2, r3
 8001ace:	4b05      	ldr	r3, [pc, #20]	; (8001ae4 <HAL_IncTick+0x20>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4413      	add	r3, r2
 8001ad4:	4a03      	ldr	r2, [pc, #12]	; (8001ae4 <HAL_IncTick+0x20>)
 8001ad6:	6013      	str	r3, [r2, #0]
}
 8001ad8:	bf00      	nop
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bc80      	pop	{r7}
 8001ade:	4770      	bx	lr
 8001ae0:	20000094 	.word	0x20000094
 8001ae4:	200001bc 	.word	0x200001bc

08001ae8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  return uwTick;
 8001aec:	4b02      	ldr	r3, [pc, #8]	; (8001af8 <HAL_GetTick+0x10>)
 8001aee:	681b      	ldr	r3, [r3, #0]
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bc80      	pop	{r7}
 8001af6:	4770      	bx	lr
 8001af8:	200001bc 	.word	0x200001bc

08001afc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b085      	sub	sp, #20
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	f003 0307 	and.w	r3, r3, #7
 8001b0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b0c:	4b0c      	ldr	r3, [pc, #48]	; (8001b40 <__NVIC_SetPriorityGrouping+0x44>)
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b12:	68ba      	ldr	r2, [r7, #8]
 8001b14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b18:	4013      	ands	r3, r2
 8001b1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b2e:	4a04      	ldr	r2, [pc, #16]	; (8001b40 <__NVIC_SetPriorityGrouping+0x44>)
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	60d3      	str	r3, [r2, #12]
}
 8001b34:	bf00      	nop
 8001b36:	3714      	adds	r7, #20
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bc80      	pop	{r7}
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	e000ed00 	.word	0xe000ed00

08001b44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b48:	4b04      	ldr	r3, [pc, #16]	; (8001b5c <__NVIC_GetPriorityGrouping+0x18>)
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	0a1b      	lsrs	r3, r3, #8
 8001b4e:	f003 0307 	and.w	r3, r3, #7
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bc80      	pop	{r7}
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	e000ed00 	.word	0xe000ed00

08001b60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	4603      	mov	r3, r0
 8001b68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	db0b      	blt.n	8001b8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b72:	79fb      	ldrb	r3, [r7, #7]
 8001b74:	f003 021f 	and.w	r2, r3, #31
 8001b78:	4906      	ldr	r1, [pc, #24]	; (8001b94 <__NVIC_EnableIRQ+0x34>)
 8001b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b7e:	095b      	lsrs	r3, r3, #5
 8001b80:	2001      	movs	r0, #1
 8001b82:	fa00 f202 	lsl.w	r2, r0, r2
 8001b86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b8a:	bf00      	nop
 8001b8c:	370c      	adds	r7, #12
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bc80      	pop	{r7}
 8001b92:	4770      	bx	lr
 8001b94:	e000e100 	.word	0xe000e100

08001b98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	6039      	str	r1, [r7, #0]
 8001ba2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	db0a      	blt.n	8001bc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	b2da      	uxtb	r2, r3
 8001bb0:	490c      	ldr	r1, [pc, #48]	; (8001be4 <__NVIC_SetPriority+0x4c>)
 8001bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb6:	0112      	lsls	r2, r2, #4
 8001bb8:	b2d2      	uxtb	r2, r2
 8001bba:	440b      	add	r3, r1
 8001bbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bc0:	e00a      	b.n	8001bd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	b2da      	uxtb	r2, r3
 8001bc6:	4908      	ldr	r1, [pc, #32]	; (8001be8 <__NVIC_SetPriority+0x50>)
 8001bc8:	79fb      	ldrb	r3, [r7, #7]
 8001bca:	f003 030f 	and.w	r3, r3, #15
 8001bce:	3b04      	subs	r3, #4
 8001bd0:	0112      	lsls	r2, r2, #4
 8001bd2:	b2d2      	uxtb	r2, r2
 8001bd4:	440b      	add	r3, r1
 8001bd6:	761a      	strb	r2, [r3, #24]
}
 8001bd8:	bf00      	nop
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bc80      	pop	{r7}
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	e000e100 	.word	0xe000e100
 8001be8:	e000ed00 	.word	0xe000ed00

08001bec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b089      	sub	sp, #36	; 0x24
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	60f8      	str	r0, [r7, #12]
 8001bf4:	60b9      	str	r1, [r7, #8]
 8001bf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	f003 0307 	and.w	r3, r3, #7
 8001bfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	f1c3 0307 	rsb	r3, r3, #7
 8001c06:	2b04      	cmp	r3, #4
 8001c08:	bf28      	it	cs
 8001c0a:	2304      	movcs	r3, #4
 8001c0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	3304      	adds	r3, #4
 8001c12:	2b06      	cmp	r3, #6
 8001c14:	d902      	bls.n	8001c1c <NVIC_EncodePriority+0x30>
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	3b03      	subs	r3, #3
 8001c1a:	e000      	b.n	8001c1e <NVIC_EncodePriority+0x32>
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c20:	f04f 32ff 	mov.w	r2, #4294967295
 8001c24:	69bb      	ldr	r3, [r7, #24]
 8001c26:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2a:	43da      	mvns	r2, r3
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	401a      	ands	r2, r3
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c34:	f04f 31ff 	mov.w	r1, #4294967295
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c3e:	43d9      	mvns	r1, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c44:	4313      	orrs	r3, r2
         );
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3724      	adds	r7, #36	; 0x24
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bc80      	pop	{r7}
 8001c4e:	4770      	bx	lr

08001c50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	3b01      	subs	r3, #1
 8001c5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c60:	d301      	bcc.n	8001c66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c62:	2301      	movs	r3, #1
 8001c64:	e00f      	b.n	8001c86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c66:	4a0a      	ldr	r2, [pc, #40]	; (8001c90 <SysTick_Config+0x40>)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	3b01      	subs	r3, #1
 8001c6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c6e:	210f      	movs	r1, #15
 8001c70:	f04f 30ff 	mov.w	r0, #4294967295
 8001c74:	f7ff ff90 	bl	8001b98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c78:	4b05      	ldr	r3, [pc, #20]	; (8001c90 <SysTick_Config+0x40>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c7e:	4b04      	ldr	r3, [pc, #16]	; (8001c90 <SysTick_Config+0x40>)
 8001c80:	2207      	movs	r2, #7
 8001c82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c84:	2300      	movs	r3, #0
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3708      	adds	r7, #8
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	e000e010 	.word	0xe000e010

08001c94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	f7ff ff2d 	bl	8001afc <__NVIC_SetPriorityGrouping>
}
 8001ca2:	bf00      	nop
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b086      	sub	sp, #24
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	60b9      	str	r1, [r7, #8]
 8001cb4:	607a      	str	r2, [r7, #4]
 8001cb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cbc:	f7ff ff42 	bl	8001b44 <__NVIC_GetPriorityGrouping>
 8001cc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cc2:	687a      	ldr	r2, [r7, #4]
 8001cc4:	68b9      	ldr	r1, [r7, #8]
 8001cc6:	6978      	ldr	r0, [r7, #20]
 8001cc8:	f7ff ff90 	bl	8001bec <NVIC_EncodePriority>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cd2:	4611      	mov	r1, r2
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f7ff ff5f 	bl	8001b98 <__NVIC_SetPriority>
}
 8001cda:	bf00      	nop
 8001cdc:	3718      	adds	r7, #24
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}

08001ce2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	b082      	sub	sp, #8
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	4603      	mov	r3, r0
 8001cea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7ff ff35 	bl	8001b60 <__NVIC_EnableIRQ>
}
 8001cf6:	bf00      	nop
 8001cf8:	3708      	adds	r7, #8
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}

08001cfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	b082      	sub	sp, #8
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f7ff ffa2 	bl	8001c50 <SysTick_Config>
 8001d0c:	4603      	mov	r3, r0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
	...

08001d18 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b08b      	sub	sp, #44	; 0x2c
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d22:	2300      	movs	r3, #0
 8001d24:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d26:	2300      	movs	r3, #0
 8001d28:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d2a:	e161      	b.n	8001ff0 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d30:	fa02 f303 	lsl.w	r3, r2, r3
 8001d34:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	69fa      	ldr	r2, [r7, #28]
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d40:	69ba      	ldr	r2, [r7, #24]
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	f040 8150 	bne.w	8001fea <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	4a97      	ldr	r2, [pc, #604]	; (8001fac <HAL_GPIO_Init+0x294>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d05e      	beq.n	8001e12 <HAL_GPIO_Init+0xfa>
 8001d54:	4a95      	ldr	r2, [pc, #596]	; (8001fac <HAL_GPIO_Init+0x294>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d875      	bhi.n	8001e46 <HAL_GPIO_Init+0x12e>
 8001d5a:	4a95      	ldr	r2, [pc, #596]	; (8001fb0 <HAL_GPIO_Init+0x298>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d058      	beq.n	8001e12 <HAL_GPIO_Init+0xfa>
 8001d60:	4a93      	ldr	r2, [pc, #588]	; (8001fb0 <HAL_GPIO_Init+0x298>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d86f      	bhi.n	8001e46 <HAL_GPIO_Init+0x12e>
 8001d66:	4a93      	ldr	r2, [pc, #588]	; (8001fb4 <HAL_GPIO_Init+0x29c>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d052      	beq.n	8001e12 <HAL_GPIO_Init+0xfa>
 8001d6c:	4a91      	ldr	r2, [pc, #580]	; (8001fb4 <HAL_GPIO_Init+0x29c>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d869      	bhi.n	8001e46 <HAL_GPIO_Init+0x12e>
 8001d72:	4a91      	ldr	r2, [pc, #580]	; (8001fb8 <HAL_GPIO_Init+0x2a0>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d04c      	beq.n	8001e12 <HAL_GPIO_Init+0xfa>
 8001d78:	4a8f      	ldr	r2, [pc, #572]	; (8001fb8 <HAL_GPIO_Init+0x2a0>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d863      	bhi.n	8001e46 <HAL_GPIO_Init+0x12e>
 8001d7e:	4a8f      	ldr	r2, [pc, #572]	; (8001fbc <HAL_GPIO_Init+0x2a4>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d046      	beq.n	8001e12 <HAL_GPIO_Init+0xfa>
 8001d84:	4a8d      	ldr	r2, [pc, #564]	; (8001fbc <HAL_GPIO_Init+0x2a4>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d85d      	bhi.n	8001e46 <HAL_GPIO_Init+0x12e>
 8001d8a:	2b12      	cmp	r3, #18
 8001d8c:	d82a      	bhi.n	8001de4 <HAL_GPIO_Init+0xcc>
 8001d8e:	2b12      	cmp	r3, #18
 8001d90:	d859      	bhi.n	8001e46 <HAL_GPIO_Init+0x12e>
 8001d92:	a201      	add	r2, pc, #4	; (adr r2, 8001d98 <HAL_GPIO_Init+0x80>)
 8001d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d98:	08001e13 	.word	0x08001e13
 8001d9c:	08001ded 	.word	0x08001ded
 8001da0:	08001dff 	.word	0x08001dff
 8001da4:	08001e41 	.word	0x08001e41
 8001da8:	08001e47 	.word	0x08001e47
 8001dac:	08001e47 	.word	0x08001e47
 8001db0:	08001e47 	.word	0x08001e47
 8001db4:	08001e47 	.word	0x08001e47
 8001db8:	08001e47 	.word	0x08001e47
 8001dbc:	08001e47 	.word	0x08001e47
 8001dc0:	08001e47 	.word	0x08001e47
 8001dc4:	08001e47 	.word	0x08001e47
 8001dc8:	08001e47 	.word	0x08001e47
 8001dcc:	08001e47 	.word	0x08001e47
 8001dd0:	08001e47 	.word	0x08001e47
 8001dd4:	08001e47 	.word	0x08001e47
 8001dd8:	08001e47 	.word	0x08001e47
 8001ddc:	08001df5 	.word	0x08001df5
 8001de0:	08001e09 	.word	0x08001e09
 8001de4:	4a76      	ldr	r2, [pc, #472]	; (8001fc0 <HAL_GPIO_Init+0x2a8>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d013      	beq.n	8001e12 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001dea:	e02c      	b.n	8001e46 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	623b      	str	r3, [r7, #32]
          break;
 8001df2:	e029      	b.n	8001e48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	3304      	adds	r3, #4
 8001dfa:	623b      	str	r3, [r7, #32]
          break;
 8001dfc:	e024      	b.n	8001e48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	68db      	ldr	r3, [r3, #12]
 8001e02:	3308      	adds	r3, #8
 8001e04:	623b      	str	r3, [r7, #32]
          break;
 8001e06:	e01f      	b.n	8001e48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	330c      	adds	r3, #12
 8001e0e:	623b      	str	r3, [r7, #32]
          break;
 8001e10:	e01a      	b.n	8001e48 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d102      	bne.n	8001e20 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e1a:	2304      	movs	r3, #4
 8001e1c:	623b      	str	r3, [r7, #32]
          break;
 8001e1e:	e013      	b.n	8001e48 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d105      	bne.n	8001e34 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e28:	2308      	movs	r3, #8
 8001e2a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	69fa      	ldr	r2, [r7, #28]
 8001e30:	611a      	str	r2, [r3, #16]
          break;
 8001e32:	e009      	b.n	8001e48 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e34:	2308      	movs	r3, #8
 8001e36:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	69fa      	ldr	r2, [r7, #28]
 8001e3c:	615a      	str	r2, [r3, #20]
          break;
 8001e3e:	e003      	b.n	8001e48 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e40:	2300      	movs	r3, #0
 8001e42:	623b      	str	r3, [r7, #32]
          break;
 8001e44:	e000      	b.n	8001e48 <HAL_GPIO_Init+0x130>
          break;
 8001e46:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e48:	69bb      	ldr	r3, [r7, #24]
 8001e4a:	2bff      	cmp	r3, #255	; 0xff
 8001e4c:	d801      	bhi.n	8001e52 <HAL_GPIO_Init+0x13a>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	e001      	b.n	8001e56 <HAL_GPIO_Init+0x13e>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	3304      	adds	r3, #4
 8001e56:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e58:	69bb      	ldr	r3, [r7, #24]
 8001e5a:	2bff      	cmp	r3, #255	; 0xff
 8001e5c:	d802      	bhi.n	8001e64 <HAL_GPIO_Init+0x14c>
 8001e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	e002      	b.n	8001e6a <HAL_GPIO_Init+0x152>
 8001e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e66:	3b08      	subs	r3, #8
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	210f      	movs	r1, #15
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	fa01 f303 	lsl.w	r3, r1, r3
 8001e78:	43db      	mvns	r3, r3
 8001e7a:	401a      	ands	r2, r3
 8001e7c:	6a39      	ldr	r1, [r7, #32]
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	fa01 f303 	lsl.w	r3, r1, r3
 8001e84:	431a      	orrs	r2, r3
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	f000 80a9 	beq.w	8001fea <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e98:	4b4a      	ldr	r3, [pc, #296]	; (8001fc4 <HAL_GPIO_Init+0x2ac>)
 8001e9a:	699b      	ldr	r3, [r3, #24]
 8001e9c:	4a49      	ldr	r2, [pc, #292]	; (8001fc4 <HAL_GPIO_Init+0x2ac>)
 8001e9e:	f043 0301 	orr.w	r3, r3, #1
 8001ea2:	6193      	str	r3, [r2, #24]
 8001ea4:	4b47      	ldr	r3, [pc, #284]	; (8001fc4 <HAL_GPIO_Init+0x2ac>)
 8001ea6:	699b      	ldr	r3, [r3, #24]
 8001ea8:	f003 0301 	and.w	r3, r3, #1
 8001eac:	60bb      	str	r3, [r7, #8]
 8001eae:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001eb0:	4a45      	ldr	r2, [pc, #276]	; (8001fc8 <HAL_GPIO_Init+0x2b0>)
 8001eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb4:	089b      	lsrs	r3, r3, #2
 8001eb6:	3302      	adds	r3, #2
 8001eb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ebc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec0:	f003 0303 	and.w	r3, r3, #3
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	220f      	movs	r2, #15
 8001ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ecc:	43db      	mvns	r3, r3
 8001ece:	68fa      	ldr	r2, [r7, #12]
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	4a3d      	ldr	r2, [pc, #244]	; (8001fcc <HAL_GPIO_Init+0x2b4>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d00d      	beq.n	8001ef8 <HAL_GPIO_Init+0x1e0>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	4a3c      	ldr	r2, [pc, #240]	; (8001fd0 <HAL_GPIO_Init+0x2b8>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d007      	beq.n	8001ef4 <HAL_GPIO_Init+0x1dc>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	4a3b      	ldr	r2, [pc, #236]	; (8001fd4 <HAL_GPIO_Init+0x2bc>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d101      	bne.n	8001ef0 <HAL_GPIO_Init+0x1d8>
 8001eec:	2302      	movs	r3, #2
 8001eee:	e004      	b.n	8001efa <HAL_GPIO_Init+0x1e2>
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	e002      	b.n	8001efa <HAL_GPIO_Init+0x1e2>
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e000      	b.n	8001efa <HAL_GPIO_Init+0x1e2>
 8001ef8:	2300      	movs	r3, #0
 8001efa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001efc:	f002 0203 	and.w	r2, r2, #3
 8001f00:	0092      	lsls	r2, r2, #2
 8001f02:	4093      	lsls	r3, r2
 8001f04:	68fa      	ldr	r2, [r7, #12]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f0a:	492f      	ldr	r1, [pc, #188]	; (8001fc8 <HAL_GPIO_Init+0x2b0>)
 8001f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0e:	089b      	lsrs	r3, r3, #2
 8001f10:	3302      	adds	r3, #2
 8001f12:	68fa      	ldr	r2, [r7, #12]
 8001f14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d006      	beq.n	8001f32 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f24:	4b2c      	ldr	r3, [pc, #176]	; (8001fd8 <HAL_GPIO_Init+0x2c0>)
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	492b      	ldr	r1, [pc, #172]	; (8001fd8 <HAL_GPIO_Init+0x2c0>)
 8001f2a:	69bb      	ldr	r3, [r7, #24]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	600b      	str	r3, [r1, #0]
 8001f30:	e006      	b.n	8001f40 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f32:	4b29      	ldr	r3, [pc, #164]	; (8001fd8 <HAL_GPIO_Init+0x2c0>)
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	69bb      	ldr	r3, [r7, #24]
 8001f38:	43db      	mvns	r3, r3
 8001f3a:	4927      	ldr	r1, [pc, #156]	; (8001fd8 <HAL_GPIO_Init+0x2c0>)
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d006      	beq.n	8001f5a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f4c:	4b22      	ldr	r3, [pc, #136]	; (8001fd8 <HAL_GPIO_Init+0x2c0>)
 8001f4e:	685a      	ldr	r2, [r3, #4]
 8001f50:	4921      	ldr	r1, [pc, #132]	; (8001fd8 <HAL_GPIO_Init+0x2c0>)
 8001f52:	69bb      	ldr	r3, [r7, #24]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	604b      	str	r3, [r1, #4]
 8001f58:	e006      	b.n	8001f68 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f5a:	4b1f      	ldr	r3, [pc, #124]	; (8001fd8 <HAL_GPIO_Init+0x2c0>)
 8001f5c:	685a      	ldr	r2, [r3, #4]
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	43db      	mvns	r3, r3
 8001f62:	491d      	ldr	r1, [pc, #116]	; (8001fd8 <HAL_GPIO_Init+0x2c0>)
 8001f64:	4013      	ands	r3, r2
 8001f66:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d006      	beq.n	8001f82 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f74:	4b18      	ldr	r3, [pc, #96]	; (8001fd8 <HAL_GPIO_Init+0x2c0>)
 8001f76:	689a      	ldr	r2, [r3, #8]
 8001f78:	4917      	ldr	r1, [pc, #92]	; (8001fd8 <HAL_GPIO_Init+0x2c0>)
 8001f7a:	69bb      	ldr	r3, [r7, #24]
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	608b      	str	r3, [r1, #8]
 8001f80:	e006      	b.n	8001f90 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f82:	4b15      	ldr	r3, [pc, #84]	; (8001fd8 <HAL_GPIO_Init+0x2c0>)
 8001f84:	689a      	ldr	r2, [r3, #8]
 8001f86:	69bb      	ldr	r3, [r7, #24]
 8001f88:	43db      	mvns	r3, r3
 8001f8a:	4913      	ldr	r1, [pc, #76]	; (8001fd8 <HAL_GPIO_Init+0x2c0>)
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d01f      	beq.n	8001fdc <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f9c:	4b0e      	ldr	r3, [pc, #56]	; (8001fd8 <HAL_GPIO_Init+0x2c0>)
 8001f9e:	68da      	ldr	r2, [r3, #12]
 8001fa0:	490d      	ldr	r1, [pc, #52]	; (8001fd8 <HAL_GPIO_Init+0x2c0>)
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	60cb      	str	r3, [r1, #12]
 8001fa8:	e01f      	b.n	8001fea <HAL_GPIO_Init+0x2d2>
 8001faa:	bf00      	nop
 8001fac:	10320000 	.word	0x10320000
 8001fb0:	10310000 	.word	0x10310000
 8001fb4:	10220000 	.word	0x10220000
 8001fb8:	10210000 	.word	0x10210000
 8001fbc:	10120000 	.word	0x10120000
 8001fc0:	10110000 	.word	0x10110000
 8001fc4:	40021000 	.word	0x40021000
 8001fc8:	40010000 	.word	0x40010000
 8001fcc:	40010800 	.word	0x40010800
 8001fd0:	40010c00 	.word	0x40010c00
 8001fd4:	40011000 	.word	0x40011000
 8001fd8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001fdc:	4b0b      	ldr	r3, [pc, #44]	; (800200c <HAL_GPIO_Init+0x2f4>)
 8001fde:	68da      	ldr	r2, [r3, #12]
 8001fe0:	69bb      	ldr	r3, [r7, #24]
 8001fe2:	43db      	mvns	r3, r3
 8001fe4:	4909      	ldr	r1, [pc, #36]	; (800200c <HAL_GPIO_Init+0x2f4>)
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fec:	3301      	adds	r3, #1
 8001fee:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff6:	fa22 f303 	lsr.w	r3, r2, r3
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	f47f ae96 	bne.w	8001d2c <HAL_GPIO_Init+0x14>
  }
}
 8002000:	bf00      	nop
 8002002:	bf00      	nop
 8002004:	372c      	adds	r7, #44	; 0x2c
 8002006:	46bd      	mov	sp, r7
 8002008:	bc80      	pop	{r7}
 800200a:	4770      	bx	lr
 800200c:	40010400 	.word	0x40010400

08002010 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002010:	b480      	push	{r7}
 8002012:	b085      	sub	sp, #20
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	460b      	mov	r3, r1
 800201a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	689a      	ldr	r2, [r3, #8]
 8002020:	887b      	ldrh	r3, [r7, #2]
 8002022:	4013      	ands	r3, r2
 8002024:	2b00      	cmp	r3, #0
 8002026:	d002      	beq.n	800202e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002028:	2301      	movs	r3, #1
 800202a:	73fb      	strb	r3, [r7, #15]
 800202c:	e001      	b.n	8002032 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800202e:	2300      	movs	r3, #0
 8002030:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002032:	7bfb      	ldrb	r3, [r7, #15]
}
 8002034:	4618      	mov	r0, r3
 8002036:	3714      	adds	r7, #20
 8002038:	46bd      	mov	sp, r7
 800203a:	bc80      	pop	{r7}
 800203c:	4770      	bx	lr

0800203e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800203e:	b480      	push	{r7}
 8002040:	b083      	sub	sp, #12
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
 8002046:	460b      	mov	r3, r1
 8002048:	807b      	strh	r3, [r7, #2]
 800204a:	4613      	mov	r3, r2
 800204c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800204e:	787b      	ldrb	r3, [r7, #1]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d003      	beq.n	800205c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002054:	887a      	ldrh	r2, [r7, #2]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800205a:	e003      	b.n	8002064 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800205c:	887b      	ldrh	r3, [r7, #2]
 800205e:	041a      	lsls	r2, r3, #16
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	611a      	str	r2, [r3, #16]
}
 8002064:	bf00      	nop
 8002066:	370c      	adds	r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	bc80      	pop	{r7}
 800206c:	4770      	bx	lr

0800206e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800206e:	b480      	push	{r7}
 8002070:	b085      	sub	sp, #20
 8002072:	af00      	add	r7, sp, #0
 8002074:	6078      	str	r0, [r7, #4]
 8002076:	460b      	mov	r3, r1
 8002078:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	68db      	ldr	r3, [r3, #12]
 800207e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002080:	887a      	ldrh	r2, [r7, #2]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	4013      	ands	r3, r2
 8002086:	041a      	lsls	r2, r3, #16
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	43d9      	mvns	r1, r3
 800208c:	887b      	ldrh	r3, [r7, #2]
 800208e:	400b      	ands	r3, r1
 8002090:	431a      	orrs	r2, r3
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	611a      	str	r2, [r3, #16]
}
 8002096:	bf00      	nop
 8002098:	3714      	adds	r7, #20
 800209a:	46bd      	mov	sp, r7
 800209c:	bc80      	pop	{r7}
 800209e:	4770      	bx	lr

080020a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b086      	sub	sp, #24
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d101      	bne.n	80020b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e272      	b.n	8002598 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0301 	and.w	r3, r3, #1
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	f000 8087 	beq.w	80021ce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020c0:	4b92      	ldr	r3, [pc, #584]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f003 030c 	and.w	r3, r3, #12
 80020c8:	2b04      	cmp	r3, #4
 80020ca:	d00c      	beq.n	80020e6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80020cc:	4b8f      	ldr	r3, [pc, #572]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f003 030c 	and.w	r3, r3, #12
 80020d4:	2b08      	cmp	r3, #8
 80020d6:	d112      	bne.n	80020fe <HAL_RCC_OscConfig+0x5e>
 80020d8:	4b8c      	ldr	r3, [pc, #560]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020e4:	d10b      	bne.n	80020fe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020e6:	4b89      	ldr	r3, [pc, #548]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d06c      	beq.n	80021cc <HAL_RCC_OscConfig+0x12c>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d168      	bne.n	80021cc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e24c      	b.n	8002598 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002106:	d106      	bne.n	8002116 <HAL_RCC_OscConfig+0x76>
 8002108:	4b80      	ldr	r3, [pc, #512]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a7f      	ldr	r2, [pc, #508]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 800210e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002112:	6013      	str	r3, [r2, #0]
 8002114:	e02e      	b.n	8002174 <HAL_RCC_OscConfig+0xd4>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d10c      	bne.n	8002138 <HAL_RCC_OscConfig+0x98>
 800211e:	4b7b      	ldr	r3, [pc, #492]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a7a      	ldr	r2, [pc, #488]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 8002124:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002128:	6013      	str	r3, [r2, #0]
 800212a:	4b78      	ldr	r3, [pc, #480]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a77      	ldr	r2, [pc, #476]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 8002130:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002134:	6013      	str	r3, [r2, #0]
 8002136:	e01d      	b.n	8002174 <HAL_RCC_OscConfig+0xd4>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002140:	d10c      	bne.n	800215c <HAL_RCC_OscConfig+0xbc>
 8002142:	4b72      	ldr	r3, [pc, #456]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a71      	ldr	r2, [pc, #452]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 8002148:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800214c:	6013      	str	r3, [r2, #0]
 800214e:	4b6f      	ldr	r3, [pc, #444]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a6e      	ldr	r2, [pc, #440]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 8002154:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002158:	6013      	str	r3, [r2, #0]
 800215a:	e00b      	b.n	8002174 <HAL_RCC_OscConfig+0xd4>
 800215c:	4b6b      	ldr	r3, [pc, #428]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a6a      	ldr	r2, [pc, #424]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 8002162:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002166:	6013      	str	r3, [r2, #0]
 8002168:	4b68      	ldr	r3, [pc, #416]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a67      	ldr	r2, [pc, #412]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 800216e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002172:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d013      	beq.n	80021a4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800217c:	f7ff fcb4 	bl	8001ae8 <HAL_GetTick>
 8002180:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002182:	e008      	b.n	8002196 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002184:	f7ff fcb0 	bl	8001ae8 <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	2b64      	cmp	r3, #100	; 0x64
 8002190:	d901      	bls.n	8002196 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e200      	b.n	8002598 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002196:	4b5d      	ldr	r3, [pc, #372]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d0f0      	beq.n	8002184 <HAL_RCC_OscConfig+0xe4>
 80021a2:	e014      	b.n	80021ce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a4:	f7ff fca0 	bl	8001ae8 <HAL_GetTick>
 80021a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021aa:	e008      	b.n	80021be <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021ac:	f7ff fc9c 	bl	8001ae8 <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	2b64      	cmp	r3, #100	; 0x64
 80021b8:	d901      	bls.n	80021be <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	e1ec      	b.n	8002598 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021be:	4b53      	ldr	r3, [pc, #332]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d1f0      	bne.n	80021ac <HAL_RCC_OscConfig+0x10c>
 80021ca:	e000      	b.n	80021ce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0302 	and.w	r3, r3, #2
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d063      	beq.n	80022a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021da:	4b4c      	ldr	r3, [pc, #304]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f003 030c 	and.w	r3, r3, #12
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d00b      	beq.n	80021fe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80021e6:	4b49      	ldr	r3, [pc, #292]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f003 030c 	and.w	r3, r3, #12
 80021ee:	2b08      	cmp	r3, #8
 80021f0:	d11c      	bne.n	800222c <HAL_RCC_OscConfig+0x18c>
 80021f2:	4b46      	ldr	r3, [pc, #280]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d116      	bne.n	800222c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021fe:	4b43      	ldr	r3, [pc, #268]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0302 	and.w	r3, r3, #2
 8002206:	2b00      	cmp	r3, #0
 8002208:	d005      	beq.n	8002216 <HAL_RCC_OscConfig+0x176>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	691b      	ldr	r3, [r3, #16]
 800220e:	2b01      	cmp	r3, #1
 8002210:	d001      	beq.n	8002216 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e1c0      	b.n	8002598 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002216:	4b3d      	ldr	r3, [pc, #244]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	695b      	ldr	r3, [r3, #20]
 8002222:	00db      	lsls	r3, r3, #3
 8002224:	4939      	ldr	r1, [pc, #228]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 8002226:	4313      	orrs	r3, r2
 8002228:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800222a:	e03a      	b.n	80022a2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	691b      	ldr	r3, [r3, #16]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d020      	beq.n	8002276 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002234:	4b36      	ldr	r3, [pc, #216]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 8002236:	2201      	movs	r2, #1
 8002238:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800223a:	f7ff fc55 	bl	8001ae8 <HAL_GetTick>
 800223e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002240:	e008      	b.n	8002254 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002242:	f7ff fc51 	bl	8001ae8 <HAL_GetTick>
 8002246:	4602      	mov	r2, r0
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	2b02      	cmp	r3, #2
 800224e:	d901      	bls.n	8002254 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	e1a1      	b.n	8002598 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002254:	4b2d      	ldr	r3, [pc, #180]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0302 	and.w	r3, r3, #2
 800225c:	2b00      	cmp	r3, #0
 800225e:	d0f0      	beq.n	8002242 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002260:	4b2a      	ldr	r3, [pc, #168]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	695b      	ldr	r3, [r3, #20]
 800226c:	00db      	lsls	r3, r3, #3
 800226e:	4927      	ldr	r1, [pc, #156]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 8002270:	4313      	orrs	r3, r2
 8002272:	600b      	str	r3, [r1, #0]
 8002274:	e015      	b.n	80022a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002276:	4b26      	ldr	r3, [pc, #152]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 8002278:	2200      	movs	r2, #0
 800227a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800227c:	f7ff fc34 	bl	8001ae8 <HAL_GetTick>
 8002280:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002282:	e008      	b.n	8002296 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002284:	f7ff fc30 	bl	8001ae8 <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	2b02      	cmp	r3, #2
 8002290:	d901      	bls.n	8002296 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e180      	b.n	8002598 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002296:	4b1d      	ldr	r3, [pc, #116]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0302 	and.w	r3, r3, #2
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d1f0      	bne.n	8002284 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0308 	and.w	r3, r3, #8
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d03a      	beq.n	8002324 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	699b      	ldr	r3, [r3, #24]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d019      	beq.n	80022ea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022b6:	4b17      	ldr	r3, [pc, #92]	; (8002314 <HAL_RCC_OscConfig+0x274>)
 80022b8:	2201      	movs	r2, #1
 80022ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022bc:	f7ff fc14 	bl	8001ae8 <HAL_GetTick>
 80022c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022c2:	e008      	b.n	80022d6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022c4:	f7ff fc10 	bl	8001ae8 <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e160      	b.n	8002598 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022d6:	4b0d      	ldr	r3, [pc, #52]	; (800230c <HAL_RCC_OscConfig+0x26c>)
 80022d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022da:	f003 0302 	and.w	r3, r3, #2
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d0f0      	beq.n	80022c4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80022e2:	2001      	movs	r0, #1
 80022e4:	f000 faa6 	bl	8002834 <RCC_Delay>
 80022e8:	e01c      	b.n	8002324 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022ea:	4b0a      	ldr	r3, [pc, #40]	; (8002314 <HAL_RCC_OscConfig+0x274>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022f0:	f7ff fbfa 	bl	8001ae8 <HAL_GetTick>
 80022f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022f6:	e00f      	b.n	8002318 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022f8:	f7ff fbf6 	bl	8001ae8 <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	2b02      	cmp	r3, #2
 8002304:	d908      	bls.n	8002318 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	e146      	b.n	8002598 <HAL_RCC_OscConfig+0x4f8>
 800230a:	bf00      	nop
 800230c:	40021000 	.word	0x40021000
 8002310:	42420000 	.word	0x42420000
 8002314:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002318:	4b92      	ldr	r3, [pc, #584]	; (8002564 <HAL_RCC_OscConfig+0x4c4>)
 800231a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231c:	f003 0302 	and.w	r3, r3, #2
 8002320:	2b00      	cmp	r3, #0
 8002322:	d1e9      	bne.n	80022f8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0304 	and.w	r3, r3, #4
 800232c:	2b00      	cmp	r3, #0
 800232e:	f000 80a6 	beq.w	800247e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002332:	2300      	movs	r3, #0
 8002334:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002336:	4b8b      	ldr	r3, [pc, #556]	; (8002564 <HAL_RCC_OscConfig+0x4c4>)
 8002338:	69db      	ldr	r3, [r3, #28]
 800233a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d10d      	bne.n	800235e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002342:	4b88      	ldr	r3, [pc, #544]	; (8002564 <HAL_RCC_OscConfig+0x4c4>)
 8002344:	69db      	ldr	r3, [r3, #28]
 8002346:	4a87      	ldr	r2, [pc, #540]	; (8002564 <HAL_RCC_OscConfig+0x4c4>)
 8002348:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800234c:	61d3      	str	r3, [r2, #28]
 800234e:	4b85      	ldr	r3, [pc, #532]	; (8002564 <HAL_RCC_OscConfig+0x4c4>)
 8002350:	69db      	ldr	r3, [r3, #28]
 8002352:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002356:	60bb      	str	r3, [r7, #8]
 8002358:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800235a:	2301      	movs	r3, #1
 800235c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800235e:	4b82      	ldr	r3, [pc, #520]	; (8002568 <HAL_RCC_OscConfig+0x4c8>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002366:	2b00      	cmp	r3, #0
 8002368:	d118      	bne.n	800239c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800236a:	4b7f      	ldr	r3, [pc, #508]	; (8002568 <HAL_RCC_OscConfig+0x4c8>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a7e      	ldr	r2, [pc, #504]	; (8002568 <HAL_RCC_OscConfig+0x4c8>)
 8002370:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002374:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002376:	f7ff fbb7 	bl	8001ae8 <HAL_GetTick>
 800237a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800237c:	e008      	b.n	8002390 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800237e:	f7ff fbb3 	bl	8001ae8 <HAL_GetTick>
 8002382:	4602      	mov	r2, r0
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	2b64      	cmp	r3, #100	; 0x64
 800238a:	d901      	bls.n	8002390 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800238c:	2303      	movs	r3, #3
 800238e:	e103      	b.n	8002598 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002390:	4b75      	ldr	r3, [pc, #468]	; (8002568 <HAL_RCC_OscConfig+0x4c8>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002398:	2b00      	cmp	r3, #0
 800239a:	d0f0      	beq.n	800237e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d106      	bne.n	80023b2 <HAL_RCC_OscConfig+0x312>
 80023a4:	4b6f      	ldr	r3, [pc, #444]	; (8002564 <HAL_RCC_OscConfig+0x4c4>)
 80023a6:	6a1b      	ldr	r3, [r3, #32]
 80023a8:	4a6e      	ldr	r2, [pc, #440]	; (8002564 <HAL_RCC_OscConfig+0x4c4>)
 80023aa:	f043 0301 	orr.w	r3, r3, #1
 80023ae:	6213      	str	r3, [r2, #32]
 80023b0:	e02d      	b.n	800240e <HAL_RCC_OscConfig+0x36e>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	68db      	ldr	r3, [r3, #12]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d10c      	bne.n	80023d4 <HAL_RCC_OscConfig+0x334>
 80023ba:	4b6a      	ldr	r3, [pc, #424]	; (8002564 <HAL_RCC_OscConfig+0x4c4>)
 80023bc:	6a1b      	ldr	r3, [r3, #32]
 80023be:	4a69      	ldr	r2, [pc, #420]	; (8002564 <HAL_RCC_OscConfig+0x4c4>)
 80023c0:	f023 0301 	bic.w	r3, r3, #1
 80023c4:	6213      	str	r3, [r2, #32]
 80023c6:	4b67      	ldr	r3, [pc, #412]	; (8002564 <HAL_RCC_OscConfig+0x4c4>)
 80023c8:	6a1b      	ldr	r3, [r3, #32]
 80023ca:	4a66      	ldr	r2, [pc, #408]	; (8002564 <HAL_RCC_OscConfig+0x4c4>)
 80023cc:	f023 0304 	bic.w	r3, r3, #4
 80023d0:	6213      	str	r3, [r2, #32]
 80023d2:	e01c      	b.n	800240e <HAL_RCC_OscConfig+0x36e>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	2b05      	cmp	r3, #5
 80023da:	d10c      	bne.n	80023f6 <HAL_RCC_OscConfig+0x356>
 80023dc:	4b61      	ldr	r3, [pc, #388]	; (8002564 <HAL_RCC_OscConfig+0x4c4>)
 80023de:	6a1b      	ldr	r3, [r3, #32]
 80023e0:	4a60      	ldr	r2, [pc, #384]	; (8002564 <HAL_RCC_OscConfig+0x4c4>)
 80023e2:	f043 0304 	orr.w	r3, r3, #4
 80023e6:	6213      	str	r3, [r2, #32]
 80023e8:	4b5e      	ldr	r3, [pc, #376]	; (8002564 <HAL_RCC_OscConfig+0x4c4>)
 80023ea:	6a1b      	ldr	r3, [r3, #32]
 80023ec:	4a5d      	ldr	r2, [pc, #372]	; (8002564 <HAL_RCC_OscConfig+0x4c4>)
 80023ee:	f043 0301 	orr.w	r3, r3, #1
 80023f2:	6213      	str	r3, [r2, #32]
 80023f4:	e00b      	b.n	800240e <HAL_RCC_OscConfig+0x36e>
 80023f6:	4b5b      	ldr	r3, [pc, #364]	; (8002564 <HAL_RCC_OscConfig+0x4c4>)
 80023f8:	6a1b      	ldr	r3, [r3, #32]
 80023fa:	4a5a      	ldr	r2, [pc, #360]	; (8002564 <HAL_RCC_OscConfig+0x4c4>)
 80023fc:	f023 0301 	bic.w	r3, r3, #1
 8002400:	6213      	str	r3, [r2, #32]
 8002402:	4b58      	ldr	r3, [pc, #352]	; (8002564 <HAL_RCC_OscConfig+0x4c4>)
 8002404:	6a1b      	ldr	r3, [r3, #32]
 8002406:	4a57      	ldr	r2, [pc, #348]	; (8002564 <HAL_RCC_OscConfig+0x4c4>)
 8002408:	f023 0304 	bic.w	r3, r3, #4
 800240c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d015      	beq.n	8002442 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002416:	f7ff fb67 	bl	8001ae8 <HAL_GetTick>
 800241a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800241c:	e00a      	b.n	8002434 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800241e:	f7ff fb63 	bl	8001ae8 <HAL_GetTick>
 8002422:	4602      	mov	r2, r0
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	f241 3288 	movw	r2, #5000	; 0x1388
 800242c:	4293      	cmp	r3, r2
 800242e:	d901      	bls.n	8002434 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002430:	2303      	movs	r3, #3
 8002432:	e0b1      	b.n	8002598 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002434:	4b4b      	ldr	r3, [pc, #300]	; (8002564 <HAL_RCC_OscConfig+0x4c4>)
 8002436:	6a1b      	ldr	r3, [r3, #32]
 8002438:	f003 0302 	and.w	r3, r3, #2
 800243c:	2b00      	cmp	r3, #0
 800243e:	d0ee      	beq.n	800241e <HAL_RCC_OscConfig+0x37e>
 8002440:	e014      	b.n	800246c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002442:	f7ff fb51 	bl	8001ae8 <HAL_GetTick>
 8002446:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002448:	e00a      	b.n	8002460 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800244a:	f7ff fb4d 	bl	8001ae8 <HAL_GetTick>
 800244e:	4602      	mov	r2, r0
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	f241 3288 	movw	r2, #5000	; 0x1388
 8002458:	4293      	cmp	r3, r2
 800245a:	d901      	bls.n	8002460 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800245c:	2303      	movs	r3, #3
 800245e:	e09b      	b.n	8002598 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002460:	4b40      	ldr	r3, [pc, #256]	; (8002564 <HAL_RCC_OscConfig+0x4c4>)
 8002462:	6a1b      	ldr	r3, [r3, #32]
 8002464:	f003 0302 	and.w	r3, r3, #2
 8002468:	2b00      	cmp	r3, #0
 800246a:	d1ee      	bne.n	800244a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800246c:	7dfb      	ldrb	r3, [r7, #23]
 800246e:	2b01      	cmp	r3, #1
 8002470:	d105      	bne.n	800247e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002472:	4b3c      	ldr	r3, [pc, #240]	; (8002564 <HAL_RCC_OscConfig+0x4c4>)
 8002474:	69db      	ldr	r3, [r3, #28]
 8002476:	4a3b      	ldr	r2, [pc, #236]	; (8002564 <HAL_RCC_OscConfig+0x4c4>)
 8002478:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800247c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	69db      	ldr	r3, [r3, #28]
 8002482:	2b00      	cmp	r3, #0
 8002484:	f000 8087 	beq.w	8002596 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002488:	4b36      	ldr	r3, [pc, #216]	; (8002564 <HAL_RCC_OscConfig+0x4c4>)
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f003 030c 	and.w	r3, r3, #12
 8002490:	2b08      	cmp	r3, #8
 8002492:	d061      	beq.n	8002558 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	69db      	ldr	r3, [r3, #28]
 8002498:	2b02      	cmp	r3, #2
 800249a:	d146      	bne.n	800252a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800249c:	4b33      	ldr	r3, [pc, #204]	; (800256c <HAL_RCC_OscConfig+0x4cc>)
 800249e:	2200      	movs	r2, #0
 80024a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a2:	f7ff fb21 	bl	8001ae8 <HAL_GetTick>
 80024a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024a8:	e008      	b.n	80024bc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024aa:	f7ff fb1d 	bl	8001ae8 <HAL_GetTick>
 80024ae:	4602      	mov	r2, r0
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d901      	bls.n	80024bc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80024b8:	2303      	movs	r3, #3
 80024ba:	e06d      	b.n	8002598 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024bc:	4b29      	ldr	r3, [pc, #164]	; (8002564 <HAL_RCC_OscConfig+0x4c4>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d1f0      	bne.n	80024aa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6a1b      	ldr	r3, [r3, #32]
 80024cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024d0:	d108      	bne.n	80024e4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80024d2:	4b24      	ldr	r3, [pc, #144]	; (8002564 <HAL_RCC_OscConfig+0x4c4>)
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	4921      	ldr	r1, [pc, #132]	; (8002564 <HAL_RCC_OscConfig+0x4c4>)
 80024e0:	4313      	orrs	r3, r2
 80024e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024e4:	4b1f      	ldr	r3, [pc, #124]	; (8002564 <HAL_RCC_OscConfig+0x4c4>)
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6a19      	ldr	r1, [r3, #32]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f4:	430b      	orrs	r3, r1
 80024f6:	491b      	ldr	r1, [pc, #108]	; (8002564 <HAL_RCC_OscConfig+0x4c4>)
 80024f8:	4313      	orrs	r3, r2
 80024fa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024fc:	4b1b      	ldr	r3, [pc, #108]	; (800256c <HAL_RCC_OscConfig+0x4cc>)
 80024fe:	2201      	movs	r2, #1
 8002500:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002502:	f7ff faf1 	bl	8001ae8 <HAL_GetTick>
 8002506:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002508:	e008      	b.n	800251c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800250a:	f7ff faed 	bl	8001ae8 <HAL_GetTick>
 800250e:	4602      	mov	r2, r0
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	2b02      	cmp	r3, #2
 8002516:	d901      	bls.n	800251c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002518:	2303      	movs	r3, #3
 800251a:	e03d      	b.n	8002598 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800251c:	4b11      	ldr	r3, [pc, #68]	; (8002564 <HAL_RCC_OscConfig+0x4c4>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d0f0      	beq.n	800250a <HAL_RCC_OscConfig+0x46a>
 8002528:	e035      	b.n	8002596 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800252a:	4b10      	ldr	r3, [pc, #64]	; (800256c <HAL_RCC_OscConfig+0x4cc>)
 800252c:	2200      	movs	r2, #0
 800252e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002530:	f7ff fada 	bl	8001ae8 <HAL_GetTick>
 8002534:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002536:	e008      	b.n	800254a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002538:	f7ff fad6 	bl	8001ae8 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	2b02      	cmp	r3, #2
 8002544:	d901      	bls.n	800254a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e026      	b.n	8002598 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800254a:	4b06      	ldr	r3, [pc, #24]	; (8002564 <HAL_RCC_OscConfig+0x4c4>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d1f0      	bne.n	8002538 <HAL_RCC_OscConfig+0x498>
 8002556:	e01e      	b.n	8002596 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	69db      	ldr	r3, [r3, #28]
 800255c:	2b01      	cmp	r3, #1
 800255e:	d107      	bne.n	8002570 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e019      	b.n	8002598 <HAL_RCC_OscConfig+0x4f8>
 8002564:	40021000 	.word	0x40021000
 8002568:	40007000 	.word	0x40007000
 800256c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002570:	4b0b      	ldr	r3, [pc, #44]	; (80025a0 <HAL_RCC_OscConfig+0x500>)
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6a1b      	ldr	r3, [r3, #32]
 8002580:	429a      	cmp	r2, r3
 8002582:	d106      	bne.n	8002592 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800258e:	429a      	cmp	r2, r3
 8002590:	d001      	beq.n	8002596 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e000      	b.n	8002598 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002596:	2300      	movs	r3, #0
}
 8002598:	4618      	mov	r0, r3
 800259a:	3718      	adds	r7, #24
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	40021000 	.word	0x40021000

080025a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d101      	bne.n	80025b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e0d0      	b.n	800275a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025b8:	4b6a      	ldr	r3, [pc, #424]	; (8002764 <HAL_RCC_ClockConfig+0x1c0>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0307 	and.w	r3, r3, #7
 80025c0:	683a      	ldr	r2, [r7, #0]
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d910      	bls.n	80025e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025c6:	4b67      	ldr	r3, [pc, #412]	; (8002764 <HAL_RCC_ClockConfig+0x1c0>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f023 0207 	bic.w	r2, r3, #7
 80025ce:	4965      	ldr	r1, [pc, #404]	; (8002764 <HAL_RCC_ClockConfig+0x1c0>)
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025d6:	4b63      	ldr	r3, [pc, #396]	; (8002764 <HAL_RCC_ClockConfig+0x1c0>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0307 	and.w	r3, r3, #7
 80025de:	683a      	ldr	r2, [r7, #0]
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d001      	beq.n	80025e8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e0b8      	b.n	800275a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0302 	and.w	r3, r3, #2
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d020      	beq.n	8002636 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0304 	and.w	r3, r3, #4
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d005      	beq.n	800260c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002600:	4b59      	ldr	r3, [pc, #356]	; (8002768 <HAL_RCC_ClockConfig+0x1c4>)
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	4a58      	ldr	r2, [pc, #352]	; (8002768 <HAL_RCC_ClockConfig+0x1c4>)
 8002606:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800260a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0308 	and.w	r3, r3, #8
 8002614:	2b00      	cmp	r3, #0
 8002616:	d005      	beq.n	8002624 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002618:	4b53      	ldr	r3, [pc, #332]	; (8002768 <HAL_RCC_ClockConfig+0x1c4>)
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	4a52      	ldr	r2, [pc, #328]	; (8002768 <HAL_RCC_ClockConfig+0x1c4>)
 800261e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002622:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002624:	4b50      	ldr	r3, [pc, #320]	; (8002768 <HAL_RCC_ClockConfig+0x1c4>)
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	494d      	ldr	r1, [pc, #308]	; (8002768 <HAL_RCC_ClockConfig+0x1c4>)
 8002632:	4313      	orrs	r3, r2
 8002634:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0301 	and.w	r3, r3, #1
 800263e:	2b00      	cmp	r3, #0
 8002640:	d040      	beq.n	80026c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	2b01      	cmp	r3, #1
 8002648:	d107      	bne.n	800265a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800264a:	4b47      	ldr	r3, [pc, #284]	; (8002768 <HAL_RCC_ClockConfig+0x1c4>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d115      	bne.n	8002682 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e07f      	b.n	800275a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	2b02      	cmp	r3, #2
 8002660:	d107      	bne.n	8002672 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002662:	4b41      	ldr	r3, [pc, #260]	; (8002768 <HAL_RCC_ClockConfig+0x1c4>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d109      	bne.n	8002682 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e073      	b.n	800275a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002672:	4b3d      	ldr	r3, [pc, #244]	; (8002768 <HAL_RCC_ClockConfig+0x1c4>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0302 	and.w	r3, r3, #2
 800267a:	2b00      	cmp	r3, #0
 800267c:	d101      	bne.n	8002682 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e06b      	b.n	800275a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002682:	4b39      	ldr	r3, [pc, #228]	; (8002768 <HAL_RCC_ClockConfig+0x1c4>)
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	f023 0203 	bic.w	r2, r3, #3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	4936      	ldr	r1, [pc, #216]	; (8002768 <HAL_RCC_ClockConfig+0x1c4>)
 8002690:	4313      	orrs	r3, r2
 8002692:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002694:	f7ff fa28 	bl	8001ae8 <HAL_GetTick>
 8002698:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800269a:	e00a      	b.n	80026b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800269c:	f7ff fa24 	bl	8001ae8 <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d901      	bls.n	80026b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e053      	b.n	800275a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026b2:	4b2d      	ldr	r3, [pc, #180]	; (8002768 <HAL_RCC_ClockConfig+0x1c4>)
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f003 020c 	and.w	r2, r3, #12
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d1eb      	bne.n	800269c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026c4:	4b27      	ldr	r3, [pc, #156]	; (8002764 <HAL_RCC_ClockConfig+0x1c0>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0307 	and.w	r3, r3, #7
 80026cc:	683a      	ldr	r2, [r7, #0]
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d210      	bcs.n	80026f4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026d2:	4b24      	ldr	r3, [pc, #144]	; (8002764 <HAL_RCC_ClockConfig+0x1c0>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f023 0207 	bic.w	r2, r3, #7
 80026da:	4922      	ldr	r1, [pc, #136]	; (8002764 <HAL_RCC_ClockConfig+0x1c0>)
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	4313      	orrs	r3, r2
 80026e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026e2:	4b20      	ldr	r3, [pc, #128]	; (8002764 <HAL_RCC_ClockConfig+0x1c0>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0307 	and.w	r3, r3, #7
 80026ea:	683a      	ldr	r2, [r7, #0]
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d001      	beq.n	80026f4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e032      	b.n	800275a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0304 	and.w	r3, r3, #4
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d008      	beq.n	8002712 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002700:	4b19      	ldr	r3, [pc, #100]	; (8002768 <HAL_RCC_ClockConfig+0x1c4>)
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	4916      	ldr	r1, [pc, #88]	; (8002768 <HAL_RCC_ClockConfig+0x1c4>)
 800270e:	4313      	orrs	r3, r2
 8002710:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0308 	and.w	r3, r3, #8
 800271a:	2b00      	cmp	r3, #0
 800271c:	d009      	beq.n	8002732 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800271e:	4b12      	ldr	r3, [pc, #72]	; (8002768 <HAL_RCC_ClockConfig+0x1c4>)
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	691b      	ldr	r3, [r3, #16]
 800272a:	00db      	lsls	r3, r3, #3
 800272c:	490e      	ldr	r1, [pc, #56]	; (8002768 <HAL_RCC_ClockConfig+0x1c4>)
 800272e:	4313      	orrs	r3, r2
 8002730:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002732:	f000 f821 	bl	8002778 <HAL_RCC_GetSysClockFreq>
 8002736:	4602      	mov	r2, r0
 8002738:	4b0b      	ldr	r3, [pc, #44]	; (8002768 <HAL_RCC_ClockConfig+0x1c4>)
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	091b      	lsrs	r3, r3, #4
 800273e:	f003 030f 	and.w	r3, r3, #15
 8002742:	490a      	ldr	r1, [pc, #40]	; (800276c <HAL_RCC_ClockConfig+0x1c8>)
 8002744:	5ccb      	ldrb	r3, [r1, r3]
 8002746:	fa22 f303 	lsr.w	r3, r2, r3
 800274a:	4a09      	ldr	r2, [pc, #36]	; (8002770 <HAL_RCC_ClockConfig+0x1cc>)
 800274c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800274e:	4b09      	ldr	r3, [pc, #36]	; (8002774 <HAL_RCC_ClockConfig+0x1d0>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4618      	mov	r0, r3
 8002754:	f7ff f986 	bl	8001a64 <HAL_InitTick>

  return HAL_OK;
 8002758:	2300      	movs	r3, #0
}
 800275a:	4618      	mov	r0, r3
 800275c:	3710      	adds	r7, #16
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	40022000 	.word	0x40022000
 8002768:	40021000 	.word	0x40021000
 800276c:	08003238 	.word	0x08003238
 8002770:	20000064 	.word	0x20000064
 8002774:	20000090 	.word	0x20000090

08002778 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002778:	b490      	push	{r4, r7}
 800277a:	b08a      	sub	sp, #40	; 0x28
 800277c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800277e:	4b29      	ldr	r3, [pc, #164]	; (8002824 <HAL_RCC_GetSysClockFreq+0xac>)
 8002780:	1d3c      	adds	r4, r7, #4
 8002782:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002784:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002788:	f240 2301 	movw	r3, #513	; 0x201
 800278c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800278e:	2300      	movs	r3, #0
 8002790:	61fb      	str	r3, [r7, #28]
 8002792:	2300      	movs	r3, #0
 8002794:	61bb      	str	r3, [r7, #24]
 8002796:	2300      	movs	r3, #0
 8002798:	627b      	str	r3, [r7, #36]	; 0x24
 800279a:	2300      	movs	r3, #0
 800279c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800279e:	2300      	movs	r3, #0
 80027a0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80027a2:	4b21      	ldr	r3, [pc, #132]	; (8002828 <HAL_RCC_GetSysClockFreq+0xb0>)
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	f003 030c 	and.w	r3, r3, #12
 80027ae:	2b04      	cmp	r3, #4
 80027b0:	d002      	beq.n	80027b8 <HAL_RCC_GetSysClockFreq+0x40>
 80027b2:	2b08      	cmp	r3, #8
 80027b4:	d003      	beq.n	80027be <HAL_RCC_GetSysClockFreq+0x46>
 80027b6:	e02b      	b.n	8002810 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80027b8:	4b1c      	ldr	r3, [pc, #112]	; (800282c <HAL_RCC_GetSysClockFreq+0xb4>)
 80027ba:	623b      	str	r3, [r7, #32]
      break;
 80027bc:	e02b      	b.n	8002816 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	0c9b      	lsrs	r3, r3, #18
 80027c2:	f003 030f 	and.w	r3, r3, #15
 80027c6:	3328      	adds	r3, #40	; 0x28
 80027c8:	443b      	add	r3, r7
 80027ca:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80027ce:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d012      	beq.n	8002800 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80027da:	4b13      	ldr	r3, [pc, #76]	; (8002828 <HAL_RCC_GetSysClockFreq+0xb0>)
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	0c5b      	lsrs	r3, r3, #17
 80027e0:	f003 0301 	and.w	r3, r3, #1
 80027e4:	3328      	adds	r3, #40	; 0x28
 80027e6:	443b      	add	r3, r7
 80027e8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80027ec:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	4a0e      	ldr	r2, [pc, #56]	; (800282c <HAL_RCC_GetSysClockFreq+0xb4>)
 80027f2:	fb03 f202 	mul.w	r2, r3, r2
 80027f6:	69bb      	ldr	r3, [r7, #24]
 80027f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80027fc:	627b      	str	r3, [r7, #36]	; 0x24
 80027fe:	e004      	b.n	800280a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	4a0b      	ldr	r2, [pc, #44]	; (8002830 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002804:	fb02 f303 	mul.w	r3, r2, r3
 8002808:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800280a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280c:	623b      	str	r3, [r7, #32]
      break;
 800280e:	e002      	b.n	8002816 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002810:	4b06      	ldr	r3, [pc, #24]	; (800282c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002812:	623b      	str	r3, [r7, #32]
      break;
 8002814:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002816:	6a3b      	ldr	r3, [r7, #32]
}
 8002818:	4618      	mov	r0, r3
 800281a:	3728      	adds	r7, #40	; 0x28
 800281c:	46bd      	mov	sp, r7
 800281e:	bc90      	pop	{r4, r7}
 8002820:	4770      	bx	lr
 8002822:	bf00      	nop
 8002824:	08003228 	.word	0x08003228
 8002828:	40021000 	.word	0x40021000
 800282c:	007a1200 	.word	0x007a1200
 8002830:	003d0900 	.word	0x003d0900

08002834 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002834:	b480      	push	{r7}
 8002836:	b085      	sub	sp, #20
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800283c:	4b0a      	ldr	r3, [pc, #40]	; (8002868 <RCC_Delay+0x34>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a0a      	ldr	r2, [pc, #40]	; (800286c <RCC_Delay+0x38>)
 8002842:	fba2 2303 	umull	r2, r3, r2, r3
 8002846:	0a5b      	lsrs	r3, r3, #9
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	fb02 f303 	mul.w	r3, r2, r3
 800284e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002850:	bf00      	nop
  }
  while (Delay --);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	1e5a      	subs	r2, r3, #1
 8002856:	60fa      	str	r2, [r7, #12]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d1f9      	bne.n	8002850 <RCC_Delay+0x1c>
}
 800285c:	bf00      	nop
 800285e:	bf00      	nop
 8002860:	3714      	adds	r7, #20
 8002862:	46bd      	mov	sp, r7
 8002864:	bc80      	pop	{r7}
 8002866:	4770      	bx	lr
 8002868:	20000064 	.word	0x20000064
 800286c:	10624dd3 	.word	0x10624dd3

08002870 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d101      	bne.n	8002882 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e041      	b.n	8002906 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002888:	b2db      	uxtb	r3, r3
 800288a:	2b00      	cmp	r3, #0
 800288c:	d106      	bne.n	800289c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2200      	movs	r2, #0
 8002892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f7fe ff86 	bl	80017a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2202      	movs	r2, #2
 80028a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	3304      	adds	r3, #4
 80028ac:	4619      	mov	r1, r3
 80028ae:	4610      	mov	r0, r2
 80028b0:	f000 fa6a 	bl	8002d88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2201      	movs	r2, #1
 80028c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2201      	movs	r2, #1
 80028c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2201      	movs	r2, #1
 80028d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2201      	movs	r2, #1
 80028d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2201      	movs	r2, #1
 80028e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002904:	2300      	movs	r3, #0
}
 8002906:	4618      	mov	r0, r3
 8002908:	3708      	adds	r7, #8
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
	...

08002910 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002910:	b480      	push	{r7}
 8002912:	b085      	sub	sp, #20
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800291e:	b2db      	uxtb	r3, r3
 8002920:	2b01      	cmp	r3, #1
 8002922:	d001      	beq.n	8002928 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e035      	b.n	8002994 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2202      	movs	r2, #2
 800292c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	68da      	ldr	r2, [r3, #12]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f042 0201 	orr.w	r2, r2, #1
 800293e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a16      	ldr	r2, [pc, #88]	; (80029a0 <HAL_TIM_Base_Start_IT+0x90>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d009      	beq.n	800295e <HAL_TIM_Base_Start_IT+0x4e>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002952:	d004      	beq.n	800295e <HAL_TIM_Base_Start_IT+0x4e>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a12      	ldr	r2, [pc, #72]	; (80029a4 <HAL_TIM_Base_Start_IT+0x94>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d111      	bne.n	8002982 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	f003 0307 	and.w	r3, r3, #7
 8002968:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2b06      	cmp	r3, #6
 800296e:	d010      	beq.n	8002992 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f042 0201 	orr.w	r2, r2, #1
 800297e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002980:	e007      	b.n	8002992 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f042 0201 	orr.w	r2, r2, #1
 8002990:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002992:	2300      	movs	r3, #0
}
 8002994:	4618      	mov	r0, r3
 8002996:	3714      	adds	r7, #20
 8002998:	46bd      	mov	sp, r7
 800299a:	bc80      	pop	{r7}
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop
 80029a0:	40012c00 	.word	0x40012c00
 80029a4:	40000400 	.word	0x40000400

080029a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	691b      	ldr	r3, [r3, #16]
 80029b6:	f003 0302 	and.w	r3, r3, #2
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d122      	bne.n	8002a04 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	f003 0302 	and.w	r3, r3, #2
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d11b      	bne.n	8002a04 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f06f 0202 	mvn.w	r2, #2
 80029d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2201      	movs	r2, #1
 80029da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	699b      	ldr	r3, [r3, #24]
 80029e2:	f003 0303 	and.w	r3, r3, #3
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d003      	beq.n	80029f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f000 f9b1 	bl	8002d52 <HAL_TIM_IC_CaptureCallback>
 80029f0:	e005      	b.n	80029fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f000 f9a4 	bl	8002d40 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	f000 f9b3 	bl	8002d64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2200      	movs	r2, #0
 8002a02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	691b      	ldr	r3, [r3, #16]
 8002a0a:	f003 0304 	and.w	r3, r3, #4
 8002a0e:	2b04      	cmp	r3, #4
 8002a10:	d122      	bne.n	8002a58 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	f003 0304 	and.w	r3, r3, #4
 8002a1c:	2b04      	cmp	r3, #4
 8002a1e:	d11b      	bne.n	8002a58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f06f 0204 	mvn.w	r2, #4
 8002a28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2202      	movs	r2, #2
 8002a2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	699b      	ldr	r3, [r3, #24]
 8002a36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d003      	beq.n	8002a46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f000 f987 	bl	8002d52 <HAL_TIM_IC_CaptureCallback>
 8002a44:	e005      	b.n	8002a52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f000 f97a 	bl	8002d40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f000 f989 	bl	8002d64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2200      	movs	r2, #0
 8002a56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	691b      	ldr	r3, [r3, #16]
 8002a5e:	f003 0308 	and.w	r3, r3, #8
 8002a62:	2b08      	cmp	r3, #8
 8002a64:	d122      	bne.n	8002aac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	f003 0308 	and.w	r3, r3, #8
 8002a70:	2b08      	cmp	r3, #8
 8002a72:	d11b      	bne.n	8002aac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f06f 0208 	mvn.w	r2, #8
 8002a7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2204      	movs	r2, #4
 8002a82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	69db      	ldr	r3, [r3, #28]
 8002a8a:	f003 0303 	and.w	r3, r3, #3
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d003      	beq.n	8002a9a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f000 f95d 	bl	8002d52 <HAL_TIM_IC_CaptureCallback>
 8002a98:	e005      	b.n	8002aa6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f000 f950 	bl	8002d40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f000 f95f 	bl	8002d64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	691b      	ldr	r3, [r3, #16]
 8002ab2:	f003 0310 	and.w	r3, r3, #16
 8002ab6:	2b10      	cmp	r3, #16
 8002ab8:	d122      	bne.n	8002b00 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	f003 0310 	and.w	r3, r3, #16
 8002ac4:	2b10      	cmp	r3, #16
 8002ac6:	d11b      	bne.n	8002b00 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f06f 0210 	mvn.w	r2, #16
 8002ad0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2208      	movs	r2, #8
 8002ad6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	69db      	ldr	r3, [r3, #28]
 8002ade:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d003      	beq.n	8002aee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f000 f933 	bl	8002d52 <HAL_TIM_IC_CaptureCallback>
 8002aec:	e005      	b.n	8002afa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f000 f926 	bl	8002d40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f000 f935 	bl	8002d64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	f003 0301 	and.w	r3, r3, #1
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d10e      	bne.n	8002b2c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	f003 0301 	and.w	r3, r3, #1
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d107      	bne.n	8002b2c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f06f 0201 	mvn.w	r2, #1
 8002b24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f7fe fadc 	bl	80010e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	691b      	ldr	r3, [r3, #16]
 8002b32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b36:	2b80      	cmp	r3, #128	; 0x80
 8002b38:	d10e      	bne.n	8002b58 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b44:	2b80      	cmp	r3, #128	; 0x80
 8002b46:	d107      	bne.n	8002b58 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f000 fa67 	bl	8003026 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	691b      	ldr	r3, [r3, #16]
 8002b5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b62:	2b40      	cmp	r3, #64	; 0x40
 8002b64:	d10e      	bne.n	8002b84 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b70:	2b40      	cmp	r3, #64	; 0x40
 8002b72:	d107      	bne.n	8002b84 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f000 f8f9 	bl	8002d76 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	691b      	ldr	r3, [r3, #16]
 8002b8a:	f003 0320 	and.w	r3, r3, #32
 8002b8e:	2b20      	cmp	r3, #32
 8002b90:	d10e      	bne.n	8002bb0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	f003 0320 	and.w	r3, r3, #32
 8002b9c:	2b20      	cmp	r3, #32
 8002b9e:	d107      	bne.n	8002bb0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f06f 0220 	mvn.w	r2, #32
 8002ba8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f000 fa32 	bl	8003014 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002bb0:	bf00      	nop
 8002bb2:	3708      	adds	r7, #8
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}

08002bb8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b084      	sub	sp, #16
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d101      	bne.n	8002bd0 <HAL_TIM_ConfigClockSource+0x18>
 8002bcc:	2302      	movs	r3, #2
 8002bce:	e0b3      	b.n	8002d38 <HAL_TIM_ConfigClockSource+0x180>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2202      	movs	r2, #2
 8002bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002bee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002bf6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	68fa      	ldr	r2, [r7, #12]
 8002bfe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c08:	d03e      	beq.n	8002c88 <HAL_TIM_ConfigClockSource+0xd0>
 8002c0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c0e:	f200 8087 	bhi.w	8002d20 <HAL_TIM_ConfigClockSource+0x168>
 8002c12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c16:	f000 8085 	beq.w	8002d24 <HAL_TIM_ConfigClockSource+0x16c>
 8002c1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c1e:	d87f      	bhi.n	8002d20 <HAL_TIM_ConfigClockSource+0x168>
 8002c20:	2b70      	cmp	r3, #112	; 0x70
 8002c22:	d01a      	beq.n	8002c5a <HAL_TIM_ConfigClockSource+0xa2>
 8002c24:	2b70      	cmp	r3, #112	; 0x70
 8002c26:	d87b      	bhi.n	8002d20 <HAL_TIM_ConfigClockSource+0x168>
 8002c28:	2b60      	cmp	r3, #96	; 0x60
 8002c2a:	d050      	beq.n	8002cce <HAL_TIM_ConfigClockSource+0x116>
 8002c2c:	2b60      	cmp	r3, #96	; 0x60
 8002c2e:	d877      	bhi.n	8002d20 <HAL_TIM_ConfigClockSource+0x168>
 8002c30:	2b50      	cmp	r3, #80	; 0x50
 8002c32:	d03c      	beq.n	8002cae <HAL_TIM_ConfigClockSource+0xf6>
 8002c34:	2b50      	cmp	r3, #80	; 0x50
 8002c36:	d873      	bhi.n	8002d20 <HAL_TIM_ConfigClockSource+0x168>
 8002c38:	2b40      	cmp	r3, #64	; 0x40
 8002c3a:	d058      	beq.n	8002cee <HAL_TIM_ConfigClockSource+0x136>
 8002c3c:	2b40      	cmp	r3, #64	; 0x40
 8002c3e:	d86f      	bhi.n	8002d20 <HAL_TIM_ConfigClockSource+0x168>
 8002c40:	2b30      	cmp	r3, #48	; 0x30
 8002c42:	d064      	beq.n	8002d0e <HAL_TIM_ConfigClockSource+0x156>
 8002c44:	2b30      	cmp	r3, #48	; 0x30
 8002c46:	d86b      	bhi.n	8002d20 <HAL_TIM_ConfigClockSource+0x168>
 8002c48:	2b20      	cmp	r3, #32
 8002c4a:	d060      	beq.n	8002d0e <HAL_TIM_ConfigClockSource+0x156>
 8002c4c:	2b20      	cmp	r3, #32
 8002c4e:	d867      	bhi.n	8002d20 <HAL_TIM_ConfigClockSource+0x168>
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d05c      	beq.n	8002d0e <HAL_TIM_ConfigClockSource+0x156>
 8002c54:	2b10      	cmp	r3, #16
 8002c56:	d05a      	beq.n	8002d0e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002c58:	e062      	b.n	8002d20 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6818      	ldr	r0, [r3, #0]
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	6899      	ldr	r1, [r3, #8]
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	685a      	ldr	r2, [r3, #4]
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	f000 f95c 	bl	8002f26 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002c7c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	68fa      	ldr	r2, [r7, #12]
 8002c84:	609a      	str	r2, [r3, #8]
      break;
 8002c86:	e04e      	b.n	8002d26 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6818      	ldr	r0, [r3, #0]
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	6899      	ldr	r1, [r3, #8]
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	685a      	ldr	r2, [r3, #4]
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	f000 f945 	bl	8002f26 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	689a      	ldr	r2, [r3, #8]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002caa:	609a      	str	r2, [r3, #8]
      break;
 8002cac:	e03b      	b.n	8002d26 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6818      	ldr	r0, [r3, #0]
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	6859      	ldr	r1, [r3, #4]
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	461a      	mov	r2, r3
 8002cbc:	f000 f8bc 	bl	8002e38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2150      	movs	r1, #80	; 0x50
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f000 f913 	bl	8002ef2 <TIM_ITRx_SetConfig>
      break;
 8002ccc:	e02b      	b.n	8002d26 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6818      	ldr	r0, [r3, #0]
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	6859      	ldr	r1, [r3, #4]
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	461a      	mov	r2, r3
 8002cdc:	f000 f8da 	bl	8002e94 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	2160      	movs	r1, #96	; 0x60
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f000 f903 	bl	8002ef2 <TIM_ITRx_SetConfig>
      break;
 8002cec:	e01b      	b.n	8002d26 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6818      	ldr	r0, [r3, #0]
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	6859      	ldr	r1, [r3, #4]
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	f000 f89c 	bl	8002e38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2140      	movs	r1, #64	; 0x40
 8002d06:	4618      	mov	r0, r3
 8002d08:	f000 f8f3 	bl	8002ef2 <TIM_ITRx_SetConfig>
      break;
 8002d0c:	e00b      	b.n	8002d26 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4619      	mov	r1, r3
 8002d18:	4610      	mov	r0, r2
 8002d1a:	f000 f8ea 	bl	8002ef2 <TIM_ITRx_SetConfig>
        break;
 8002d1e:	e002      	b.n	8002d26 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002d20:	bf00      	nop
 8002d22:	e000      	b.n	8002d26 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002d24:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2201      	movs	r2, #1
 8002d2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d36:	2300      	movs	r3, #0
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3710      	adds	r7, #16
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}

08002d40 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b083      	sub	sp, #12
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d48:	bf00      	nop
 8002d4a:	370c      	adds	r7, #12
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bc80      	pop	{r7}
 8002d50:	4770      	bx	lr

08002d52 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d52:	b480      	push	{r7}
 8002d54:	b083      	sub	sp, #12
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d5a:	bf00      	nop
 8002d5c:	370c      	adds	r7, #12
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bc80      	pop	{r7}
 8002d62:	4770      	bx	lr

08002d64 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d6c:	bf00      	nop
 8002d6e:	370c      	adds	r7, #12
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bc80      	pop	{r7}
 8002d74:	4770      	bx	lr

08002d76 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d76:	b480      	push	{r7}
 8002d78:	b083      	sub	sp, #12
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d7e:	bf00      	nop
 8002d80:	370c      	adds	r7, #12
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bc80      	pop	{r7}
 8002d86:	4770      	bx	lr

08002d88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b085      	sub	sp, #20
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	4a25      	ldr	r2, [pc, #148]	; (8002e30 <TIM_Base_SetConfig+0xa8>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d007      	beq.n	8002db0 <TIM_Base_SetConfig+0x28>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002da6:	d003      	beq.n	8002db0 <TIM_Base_SetConfig+0x28>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	4a22      	ldr	r2, [pc, #136]	; (8002e34 <TIM_Base_SetConfig+0xac>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d108      	bne.n	8002dc2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002db6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	68fa      	ldr	r2, [r7, #12]
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4a1a      	ldr	r2, [pc, #104]	; (8002e30 <TIM_Base_SetConfig+0xa8>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d007      	beq.n	8002dda <TIM_Base_SetConfig+0x52>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dd0:	d003      	beq.n	8002dda <TIM_Base_SetConfig+0x52>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4a17      	ldr	r2, [pc, #92]	; (8002e34 <TIM_Base_SetConfig+0xac>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d108      	bne.n	8002dec <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002de0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	68db      	ldr	r3, [r3, #12]
 8002de6:	68fa      	ldr	r2, [r7, #12]
 8002de8:	4313      	orrs	r3, r2
 8002dea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	695b      	ldr	r3, [r3, #20]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	68fa      	ldr	r2, [r7, #12]
 8002dfe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	689a      	ldr	r2, [r3, #8]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	4a07      	ldr	r2, [pc, #28]	; (8002e30 <TIM_Base_SetConfig+0xa8>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d103      	bne.n	8002e20 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	691a      	ldr	r2, [r3, #16]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	615a      	str	r2, [r3, #20]
}
 8002e26:	bf00      	nop
 8002e28:	3714      	adds	r7, #20
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bc80      	pop	{r7}
 8002e2e:	4770      	bx	lr
 8002e30:	40012c00 	.word	0x40012c00
 8002e34:	40000400 	.word	0x40000400

08002e38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b087      	sub	sp, #28
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	60b9      	str	r1, [r7, #8]
 8002e42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6a1b      	ldr	r3, [r3, #32]
 8002e48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	6a1b      	ldr	r3, [r3, #32]
 8002e4e:	f023 0201 	bic.w	r2, r3, #1
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	699b      	ldr	r3, [r3, #24]
 8002e5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	011b      	lsls	r3, r3, #4
 8002e68:	693a      	ldr	r2, [r7, #16]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	f023 030a 	bic.w	r3, r3, #10
 8002e74:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e76:	697a      	ldr	r2, [r7, #20]
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	693a      	ldr	r2, [r7, #16]
 8002e82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	697a      	ldr	r2, [r7, #20]
 8002e88:	621a      	str	r2, [r3, #32]
}
 8002e8a:	bf00      	nop
 8002e8c:	371c      	adds	r7, #28
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bc80      	pop	{r7}
 8002e92:	4770      	bx	lr

08002e94 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b087      	sub	sp, #28
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	60f8      	str	r0, [r7, #12]
 8002e9c:	60b9      	str	r1, [r7, #8]
 8002e9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	6a1b      	ldr	r3, [r3, #32]
 8002ea4:	f023 0210 	bic.w	r2, r3, #16
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	699b      	ldr	r3, [r3, #24]
 8002eb0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	6a1b      	ldr	r3, [r3, #32]
 8002eb6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002ebe:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	031b      	lsls	r3, r3, #12
 8002ec4:	697a      	ldr	r2, [r7, #20]
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002ed0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	011b      	lsls	r3, r3, #4
 8002ed6:	693a      	ldr	r2, [r7, #16]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	697a      	ldr	r2, [r7, #20]
 8002ee0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	693a      	ldr	r2, [r7, #16]
 8002ee6:	621a      	str	r2, [r3, #32]
}
 8002ee8:	bf00      	nop
 8002eea:	371c      	adds	r7, #28
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bc80      	pop	{r7}
 8002ef0:	4770      	bx	lr

08002ef2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002ef2:	b480      	push	{r7}
 8002ef4:	b085      	sub	sp, #20
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	6078      	str	r0, [r7, #4]
 8002efa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f0a:	683a      	ldr	r2, [r7, #0]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	f043 0307 	orr.w	r3, r3, #7
 8002f14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	68fa      	ldr	r2, [r7, #12]
 8002f1a:	609a      	str	r2, [r3, #8]
}
 8002f1c:	bf00      	nop
 8002f1e:	3714      	adds	r7, #20
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bc80      	pop	{r7}
 8002f24:	4770      	bx	lr

08002f26 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f26:	b480      	push	{r7}
 8002f28:	b087      	sub	sp, #28
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	60f8      	str	r0, [r7, #12]
 8002f2e:	60b9      	str	r1, [r7, #8]
 8002f30:	607a      	str	r2, [r7, #4]
 8002f32:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f40:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	021a      	lsls	r2, r3, #8
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	431a      	orrs	r2, r3
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	697a      	ldr	r2, [r7, #20]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	697a      	ldr	r2, [r7, #20]
 8002f58:	609a      	str	r2, [r3, #8]
}
 8002f5a:	bf00      	nop
 8002f5c:	371c      	adds	r7, #28
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bc80      	pop	{r7}
 8002f62:	4770      	bx	lr

08002f64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b085      	sub	sp, #20
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
 8002f6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d101      	bne.n	8002f7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f78:	2302      	movs	r3, #2
 8002f7a:	e041      	b.n	8003000 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2202      	movs	r2, #2
 8002f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fa2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	68fa      	ldr	r2, [r7, #12]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	68fa      	ldr	r2, [r7, #12]
 8002fb4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a14      	ldr	r2, [pc, #80]	; (800300c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d009      	beq.n	8002fd4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fc8:	d004      	beq.n	8002fd4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a10      	ldr	r2, [pc, #64]	; (8003010 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d10c      	bne.n	8002fee <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002fda:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	68ba      	ldr	r2, [r7, #8]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	68ba      	ldr	r2, [r7, #8]
 8002fec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ffe:	2300      	movs	r3, #0
}
 8003000:	4618      	mov	r0, r3
 8003002:	3714      	adds	r7, #20
 8003004:	46bd      	mov	sp, r7
 8003006:	bc80      	pop	{r7}
 8003008:	4770      	bx	lr
 800300a:	bf00      	nop
 800300c:	40012c00 	.word	0x40012c00
 8003010:	40000400 	.word	0x40000400

08003014 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800301c:	bf00      	nop
 800301e:	370c      	adds	r7, #12
 8003020:	46bd      	mov	sp, r7
 8003022:	bc80      	pop	{r7}
 8003024:	4770      	bx	lr

08003026 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003026:	b480      	push	{r7}
 8003028:	b083      	sub	sp, #12
 800302a:	af00      	add	r7, sp, #0
 800302c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800302e:	bf00      	nop
 8003030:	370c      	adds	r7, #12
 8003032:	46bd      	mov	sp, r7
 8003034:	bc80      	pop	{r7}
 8003036:	4770      	bx	lr

08003038 <__errno>:
 8003038:	4b01      	ldr	r3, [pc, #4]	; (8003040 <__errno+0x8>)
 800303a:	6818      	ldr	r0, [r3, #0]
 800303c:	4770      	bx	lr
 800303e:	bf00      	nop
 8003040:	20000098 	.word	0x20000098

08003044 <__libc_init_array>:
 8003044:	b570      	push	{r4, r5, r6, lr}
 8003046:	2600      	movs	r6, #0
 8003048:	4d0c      	ldr	r5, [pc, #48]	; (800307c <__libc_init_array+0x38>)
 800304a:	4c0d      	ldr	r4, [pc, #52]	; (8003080 <__libc_init_array+0x3c>)
 800304c:	1b64      	subs	r4, r4, r5
 800304e:	10a4      	asrs	r4, r4, #2
 8003050:	42a6      	cmp	r6, r4
 8003052:	d109      	bne.n	8003068 <__libc_init_array+0x24>
 8003054:	f000 f8dc 	bl	8003210 <_init>
 8003058:	2600      	movs	r6, #0
 800305a:	4d0a      	ldr	r5, [pc, #40]	; (8003084 <__libc_init_array+0x40>)
 800305c:	4c0a      	ldr	r4, [pc, #40]	; (8003088 <__libc_init_array+0x44>)
 800305e:	1b64      	subs	r4, r4, r5
 8003060:	10a4      	asrs	r4, r4, #2
 8003062:	42a6      	cmp	r6, r4
 8003064:	d105      	bne.n	8003072 <__libc_init_array+0x2e>
 8003066:	bd70      	pop	{r4, r5, r6, pc}
 8003068:	f855 3b04 	ldr.w	r3, [r5], #4
 800306c:	4798      	blx	r3
 800306e:	3601      	adds	r6, #1
 8003070:	e7ee      	b.n	8003050 <__libc_init_array+0xc>
 8003072:	f855 3b04 	ldr.w	r3, [r5], #4
 8003076:	4798      	blx	r3
 8003078:	3601      	adds	r6, #1
 800307a:	e7f2      	b.n	8003062 <__libc_init_array+0x1e>
 800307c:	08003248 	.word	0x08003248
 8003080:	08003248 	.word	0x08003248
 8003084:	08003248 	.word	0x08003248
 8003088:	0800324c 	.word	0x0800324c

0800308c <malloc>:
 800308c:	4b02      	ldr	r3, [pc, #8]	; (8003098 <malloc+0xc>)
 800308e:	4601      	mov	r1, r0
 8003090:	6818      	ldr	r0, [r3, #0]
 8003092:	f000 b82b 	b.w	80030ec <_malloc_r>
 8003096:	bf00      	nop
 8003098:	20000098 	.word	0x20000098

0800309c <memset>:
 800309c:	4603      	mov	r3, r0
 800309e:	4402      	add	r2, r0
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d100      	bne.n	80030a6 <memset+0xa>
 80030a4:	4770      	bx	lr
 80030a6:	f803 1b01 	strb.w	r1, [r3], #1
 80030aa:	e7f9      	b.n	80030a0 <memset+0x4>

080030ac <sbrk_aligned>:
 80030ac:	b570      	push	{r4, r5, r6, lr}
 80030ae:	4e0e      	ldr	r6, [pc, #56]	; (80030e8 <sbrk_aligned+0x3c>)
 80030b0:	460c      	mov	r4, r1
 80030b2:	6831      	ldr	r1, [r6, #0]
 80030b4:	4605      	mov	r5, r0
 80030b6:	b911      	cbnz	r1, 80030be <sbrk_aligned+0x12>
 80030b8:	f000 f88c 	bl	80031d4 <_sbrk_r>
 80030bc:	6030      	str	r0, [r6, #0]
 80030be:	4621      	mov	r1, r4
 80030c0:	4628      	mov	r0, r5
 80030c2:	f000 f887 	bl	80031d4 <_sbrk_r>
 80030c6:	1c43      	adds	r3, r0, #1
 80030c8:	d00a      	beq.n	80030e0 <sbrk_aligned+0x34>
 80030ca:	1cc4      	adds	r4, r0, #3
 80030cc:	f024 0403 	bic.w	r4, r4, #3
 80030d0:	42a0      	cmp	r0, r4
 80030d2:	d007      	beq.n	80030e4 <sbrk_aligned+0x38>
 80030d4:	1a21      	subs	r1, r4, r0
 80030d6:	4628      	mov	r0, r5
 80030d8:	f000 f87c 	bl	80031d4 <_sbrk_r>
 80030dc:	3001      	adds	r0, #1
 80030de:	d101      	bne.n	80030e4 <sbrk_aligned+0x38>
 80030e0:	f04f 34ff 	mov.w	r4, #4294967295
 80030e4:	4620      	mov	r0, r4
 80030e6:	bd70      	pop	{r4, r5, r6, pc}
 80030e8:	200001c4 	.word	0x200001c4

080030ec <_malloc_r>:
 80030ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80030f0:	1ccd      	adds	r5, r1, #3
 80030f2:	f025 0503 	bic.w	r5, r5, #3
 80030f6:	3508      	adds	r5, #8
 80030f8:	2d0c      	cmp	r5, #12
 80030fa:	bf38      	it	cc
 80030fc:	250c      	movcc	r5, #12
 80030fe:	2d00      	cmp	r5, #0
 8003100:	4607      	mov	r7, r0
 8003102:	db01      	blt.n	8003108 <_malloc_r+0x1c>
 8003104:	42a9      	cmp	r1, r5
 8003106:	d905      	bls.n	8003114 <_malloc_r+0x28>
 8003108:	230c      	movs	r3, #12
 800310a:	2600      	movs	r6, #0
 800310c:	603b      	str	r3, [r7, #0]
 800310e:	4630      	mov	r0, r6
 8003110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003114:	4e2e      	ldr	r6, [pc, #184]	; (80031d0 <_malloc_r+0xe4>)
 8003116:	f000 f86d 	bl	80031f4 <__malloc_lock>
 800311a:	6833      	ldr	r3, [r6, #0]
 800311c:	461c      	mov	r4, r3
 800311e:	bb34      	cbnz	r4, 800316e <_malloc_r+0x82>
 8003120:	4629      	mov	r1, r5
 8003122:	4638      	mov	r0, r7
 8003124:	f7ff ffc2 	bl	80030ac <sbrk_aligned>
 8003128:	1c43      	adds	r3, r0, #1
 800312a:	4604      	mov	r4, r0
 800312c:	d14d      	bne.n	80031ca <_malloc_r+0xde>
 800312e:	6834      	ldr	r4, [r6, #0]
 8003130:	4626      	mov	r6, r4
 8003132:	2e00      	cmp	r6, #0
 8003134:	d140      	bne.n	80031b8 <_malloc_r+0xcc>
 8003136:	6823      	ldr	r3, [r4, #0]
 8003138:	4631      	mov	r1, r6
 800313a:	4638      	mov	r0, r7
 800313c:	eb04 0803 	add.w	r8, r4, r3
 8003140:	f000 f848 	bl	80031d4 <_sbrk_r>
 8003144:	4580      	cmp	r8, r0
 8003146:	d13a      	bne.n	80031be <_malloc_r+0xd2>
 8003148:	6821      	ldr	r1, [r4, #0]
 800314a:	3503      	adds	r5, #3
 800314c:	1a6d      	subs	r5, r5, r1
 800314e:	f025 0503 	bic.w	r5, r5, #3
 8003152:	3508      	adds	r5, #8
 8003154:	2d0c      	cmp	r5, #12
 8003156:	bf38      	it	cc
 8003158:	250c      	movcc	r5, #12
 800315a:	4638      	mov	r0, r7
 800315c:	4629      	mov	r1, r5
 800315e:	f7ff ffa5 	bl	80030ac <sbrk_aligned>
 8003162:	3001      	adds	r0, #1
 8003164:	d02b      	beq.n	80031be <_malloc_r+0xd2>
 8003166:	6823      	ldr	r3, [r4, #0]
 8003168:	442b      	add	r3, r5
 800316a:	6023      	str	r3, [r4, #0]
 800316c:	e00e      	b.n	800318c <_malloc_r+0xa0>
 800316e:	6822      	ldr	r2, [r4, #0]
 8003170:	1b52      	subs	r2, r2, r5
 8003172:	d41e      	bmi.n	80031b2 <_malloc_r+0xc6>
 8003174:	2a0b      	cmp	r2, #11
 8003176:	d916      	bls.n	80031a6 <_malloc_r+0xba>
 8003178:	1961      	adds	r1, r4, r5
 800317a:	42a3      	cmp	r3, r4
 800317c:	6025      	str	r5, [r4, #0]
 800317e:	bf18      	it	ne
 8003180:	6059      	strne	r1, [r3, #4]
 8003182:	6863      	ldr	r3, [r4, #4]
 8003184:	bf08      	it	eq
 8003186:	6031      	streq	r1, [r6, #0]
 8003188:	5162      	str	r2, [r4, r5]
 800318a:	604b      	str	r3, [r1, #4]
 800318c:	4638      	mov	r0, r7
 800318e:	f104 060b 	add.w	r6, r4, #11
 8003192:	f000 f835 	bl	8003200 <__malloc_unlock>
 8003196:	f026 0607 	bic.w	r6, r6, #7
 800319a:	1d23      	adds	r3, r4, #4
 800319c:	1af2      	subs	r2, r6, r3
 800319e:	d0b6      	beq.n	800310e <_malloc_r+0x22>
 80031a0:	1b9b      	subs	r3, r3, r6
 80031a2:	50a3      	str	r3, [r4, r2]
 80031a4:	e7b3      	b.n	800310e <_malloc_r+0x22>
 80031a6:	6862      	ldr	r2, [r4, #4]
 80031a8:	42a3      	cmp	r3, r4
 80031aa:	bf0c      	ite	eq
 80031ac:	6032      	streq	r2, [r6, #0]
 80031ae:	605a      	strne	r2, [r3, #4]
 80031b0:	e7ec      	b.n	800318c <_malloc_r+0xa0>
 80031b2:	4623      	mov	r3, r4
 80031b4:	6864      	ldr	r4, [r4, #4]
 80031b6:	e7b2      	b.n	800311e <_malloc_r+0x32>
 80031b8:	4634      	mov	r4, r6
 80031ba:	6876      	ldr	r6, [r6, #4]
 80031bc:	e7b9      	b.n	8003132 <_malloc_r+0x46>
 80031be:	230c      	movs	r3, #12
 80031c0:	4638      	mov	r0, r7
 80031c2:	603b      	str	r3, [r7, #0]
 80031c4:	f000 f81c 	bl	8003200 <__malloc_unlock>
 80031c8:	e7a1      	b.n	800310e <_malloc_r+0x22>
 80031ca:	6025      	str	r5, [r4, #0]
 80031cc:	e7de      	b.n	800318c <_malloc_r+0xa0>
 80031ce:	bf00      	nop
 80031d0:	200001c0 	.word	0x200001c0

080031d4 <_sbrk_r>:
 80031d4:	b538      	push	{r3, r4, r5, lr}
 80031d6:	2300      	movs	r3, #0
 80031d8:	4d05      	ldr	r5, [pc, #20]	; (80031f0 <_sbrk_r+0x1c>)
 80031da:	4604      	mov	r4, r0
 80031dc:	4608      	mov	r0, r1
 80031de:	602b      	str	r3, [r5, #0]
 80031e0:	f7fe fa5a 	bl	8001698 <_sbrk>
 80031e4:	1c43      	adds	r3, r0, #1
 80031e6:	d102      	bne.n	80031ee <_sbrk_r+0x1a>
 80031e8:	682b      	ldr	r3, [r5, #0]
 80031ea:	b103      	cbz	r3, 80031ee <_sbrk_r+0x1a>
 80031ec:	6023      	str	r3, [r4, #0]
 80031ee:	bd38      	pop	{r3, r4, r5, pc}
 80031f0:	200001c8 	.word	0x200001c8

080031f4 <__malloc_lock>:
 80031f4:	4801      	ldr	r0, [pc, #4]	; (80031fc <__malloc_lock+0x8>)
 80031f6:	f000 b809 	b.w	800320c <__retarget_lock_acquire_recursive>
 80031fa:	bf00      	nop
 80031fc:	200001cc 	.word	0x200001cc

08003200 <__malloc_unlock>:
 8003200:	4801      	ldr	r0, [pc, #4]	; (8003208 <__malloc_unlock+0x8>)
 8003202:	f000 b804 	b.w	800320e <__retarget_lock_release_recursive>
 8003206:	bf00      	nop
 8003208:	200001cc 	.word	0x200001cc

0800320c <__retarget_lock_acquire_recursive>:
 800320c:	4770      	bx	lr

0800320e <__retarget_lock_release_recursive>:
 800320e:	4770      	bx	lr

08003210 <_init>:
 8003210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003212:	bf00      	nop
 8003214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003216:	bc08      	pop	{r3}
 8003218:	469e      	mov	lr, r3
 800321a:	4770      	bx	lr

0800321c <_fini>:
 800321c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800321e:	bf00      	nop
 8003220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003222:	bc08      	pop	{r3}
 8003224:	469e      	mov	lr, r3
 8003226:	4770      	bx	lr
