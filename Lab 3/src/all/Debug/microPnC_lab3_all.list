
microPnC_lab3_all.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032cc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080033d8  080033d8  000133d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080033f8  080033f8  000200fc  2**0
                  CONTENTS
  4 .ARM          00000000  080033f8  080033f8  000200fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080033f8  080033f8  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080033f8  080033f8  000133f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080033fc  080033fc  000133fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  08003400  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d4  200000fc  080034fc  000200fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d0  080034fc  000201d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ae70  00000000  00000000  00020125  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002182  00000000  00000000  0002af95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ba8  00000000  00000000  0002d118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a70  00000000  00000000  0002dcc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018467  00000000  00000000  0002e730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e019  00000000  00000000  00046b97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000859f7  00000000  00000000  00054bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000da5a7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002fa0  00000000  00000000  000da5f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000fc 	.word	0x200000fc
 8000128:	00000000 	.word	0x00000000
 800012c:	080033c0 	.word	0x080033c0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000100 	.word	0x20000100
 8000148:	080033c0 	.word	0x080033c0

0800014c <Intersection_7SEG_Init>:
static uint8_t hBuffer[NO_OF_7SEG_DEVICE];

SevenSeg_TypeDef* SevenSeg[2*NO_OF_7SEG_DEVICE];


void Intersection_7SEG_Init(void){
 800014c:	b590      	push	{r4, r7, lr}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
	vBuffer[0] = vClock->buffer[4];
 8000152:	4b20      	ldr	r3, [pc, #128]	; (80001d4 <Intersection_7SEG_Init+0x88>)
 8000154:	681b      	ldr	r3, [r3, #0]
 8000156:	f993 3007 	ldrsb.w	r3, [r3, #7]
 800015a:	b2da      	uxtb	r2, r3
 800015c:	4b1e      	ldr	r3, [pc, #120]	; (80001d8 <Intersection_7SEG_Init+0x8c>)
 800015e:	701a      	strb	r2, [r3, #0]
	vBuffer[1] = vClock->buffer[5];
 8000160:	4b1c      	ldr	r3, [pc, #112]	; (80001d4 <Intersection_7SEG_Init+0x88>)
 8000162:	681b      	ldr	r3, [r3, #0]
 8000164:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8000168:	b2da      	uxtb	r2, r3
 800016a:	4b1b      	ldr	r3, [pc, #108]	; (80001d8 <Intersection_7SEG_Init+0x8c>)
 800016c:	705a      	strb	r2, [r3, #1]
	hBuffer[0] = hClock->buffer[4];
 800016e:	4b1b      	ldr	r3, [pc, #108]	; (80001dc <Intersection_7SEG_Init+0x90>)
 8000170:	681b      	ldr	r3, [r3, #0]
 8000172:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8000176:	b2da      	uxtb	r2, r3
 8000178:	4b19      	ldr	r3, [pc, #100]	; (80001e0 <Intersection_7SEG_Init+0x94>)
 800017a:	701a      	strb	r2, [r3, #0]
	hBuffer[1] = hClock->buffer[5];
 800017c:	4b17      	ldr	r3, [pc, #92]	; (80001dc <Intersection_7SEG_Init+0x90>)
 800017e:	681b      	ldr	r3, [r3, #0]
 8000180:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8000184:	b2da      	uxtb	r2, r3
 8000186:	4b16      	ldr	r3, [pc, #88]	; (80001e0 <Intersection_7SEG_Init+0x94>)
 8000188:	705a      	strb	r2, [r3, #1]

	for (uint8_t index = 0; index < 2*NO_OF_7SEG_DEVICE; index++){
 800018a:	2300      	movs	r3, #0
 800018c:	71fb      	strb	r3, [r7, #7]
 800018e:	e019      	b.n	80001c4 <Intersection_7SEG_Init+0x78>
		SevenSeg[index] = SevenSeg_Init(segmentPort, segmentPin,
 8000190:	79fb      	ldrb	r3, [r7, #7]
 8000192:	4a14      	ldr	r2, [pc, #80]	; (80001e4 <Intersection_7SEG_Init+0x98>)
 8000194:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000198:	79fb      	ldrb	r3, [r7, #7]
 800019a:	4a13      	ldr	r2, [pc, #76]	; (80001e8 <Intersection_7SEG_Init+0x9c>)
 800019c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80001a0:	2201      	movs	r2, #1
 80001a2:	4619      	mov	r1, r3
 80001a4:	f000 fb46 	bl	8000834 <ENPin_Init>
 80001a8:	4603      	mov	r3, r0
 80001aa:	79fc      	ldrb	r4, [r7, #7]
 80001ac:	461a      	mov	r2, r3
 80001ae:	490f      	ldr	r1, [pc, #60]	; (80001ec <Intersection_7SEG_Init+0xa0>)
 80001b0:	480f      	ldr	r0, [pc, #60]	; (80001f0 <Intersection_7SEG_Init+0xa4>)
 80001b2:	f000 fb8d 	bl	80008d0 <SevenSeg_Init>
 80001b6:	4603      	mov	r3, r0
 80001b8:	4a0e      	ldr	r2, [pc, #56]	; (80001f4 <Intersection_7SEG_Init+0xa8>)
 80001ba:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	for (uint8_t index = 0; index < 2*NO_OF_7SEG_DEVICE; index++){
 80001be:	79fb      	ldrb	r3, [r7, #7]
 80001c0:	3301      	adds	r3, #1
 80001c2:	71fb      	strb	r3, [r7, #7]
 80001c4:	79fb      	ldrb	r3, [r7, #7]
 80001c6:	2b03      	cmp	r3, #3
 80001c8:	d9e2      	bls.n	8000190 <Intersection_7SEG_Init+0x44>
				ENPin_Init(enPort[index], enPin[index], DISABLE));
	}
}
 80001ca:	bf00      	nop
 80001cc:	bf00      	nop
 80001ce:	370c      	adds	r7, #12
 80001d0:	46bd      	mov	sp, r7
 80001d2:	bd90      	pop	{r4, r7, pc}
 80001d4:	200001a8 	.word	0x200001a8
 80001d8:	20000118 	.word	0x20000118
 80001dc:	200001ac 	.word	0x200001ac
 80001e0:	2000011c 	.word	0x2000011c
 80001e4:	20000008 	.word	0x20000008
 80001e8:	20000000 	.word	0x20000000
 80001ec:	20000018 	.word	0x20000018
 80001f0:	20000028 	.word	0x20000028
 80001f4:	20000120 	.word	0x20000120

080001f8 <Segment_To_Buffer>:

void Segment_To_Buffer(void){
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b082      	sub	sp, #8
 80001fc:	af00      	add	r7, sp, #0
	vBuffer[0] = vClock->buffer[4];
 80001fe:	4b24      	ldr	r3, [pc, #144]	; (8000290 <Segment_To_Buffer+0x98>)
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8000206:	b2da      	uxtb	r2, r3
 8000208:	4b22      	ldr	r3, [pc, #136]	; (8000294 <Segment_To_Buffer+0x9c>)
 800020a:	701a      	strb	r2, [r3, #0]
	vBuffer[1] = vClock->buffer[5];
 800020c:	4b20      	ldr	r3, [pc, #128]	; (8000290 <Segment_To_Buffer+0x98>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8000214:	b2da      	uxtb	r2, r3
 8000216:	4b1f      	ldr	r3, [pc, #124]	; (8000294 <Segment_To_Buffer+0x9c>)
 8000218:	705a      	strb	r2, [r3, #1]
	hBuffer[0] = hClock->buffer[4];
 800021a:	4b1f      	ldr	r3, [pc, #124]	; (8000298 <Segment_To_Buffer+0xa0>)
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8000222:	b2da      	uxtb	r2, r3
 8000224:	4b1d      	ldr	r3, [pc, #116]	; (800029c <Segment_To_Buffer+0xa4>)
 8000226:	701a      	strb	r2, [r3, #0]
	hBuffer[1] = hClock->buffer[5];
 8000228:	4b1b      	ldr	r3, [pc, #108]	; (8000298 <Segment_To_Buffer+0xa0>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8000230:	b2da      	uxtb	r2, r3
 8000232:	4b1a      	ldr	r3, [pc, #104]	; (800029c <Segment_To_Buffer+0xa4>)
 8000234:	705a      	strb	r2, [r3, #1]

	for(uint8_t index = 0; index < NO_OF_7SEG_DEVICE; index++){
 8000236:	2300      	movs	r3, #0
 8000238:	71fb      	strb	r3, [r7, #7]
 800023a:	e020      	b.n	800027e <Segment_To_Buffer+0x86>
		SevenSeg[index]->Convert(SevenSeg[index], hBuffer[index]);
 800023c:	79fb      	ldrb	r3, [r7, #7]
 800023e:	4a18      	ldr	r2, [pc, #96]	; (80002a0 <Segment_To_Buffer+0xa8>)
 8000240:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000246:	79fa      	ldrb	r2, [r7, #7]
 8000248:	4915      	ldr	r1, [pc, #84]	; (80002a0 <Segment_To_Buffer+0xa8>)
 800024a:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 800024e:	79fa      	ldrb	r2, [r7, #7]
 8000250:	4912      	ldr	r1, [pc, #72]	; (800029c <Segment_To_Buffer+0xa4>)
 8000252:	5c8a      	ldrb	r2, [r1, r2]
 8000254:	4611      	mov	r1, r2
 8000256:	4798      	blx	r3
		SevenSeg[index + NO_OF_7SEG_DEVICE]->Convert(SevenSeg[index + NO_OF_7SEG_DEVICE], vBuffer[index]);
 8000258:	79fb      	ldrb	r3, [r7, #7]
 800025a:	3302      	adds	r3, #2
 800025c:	4a10      	ldr	r2, [pc, #64]	; (80002a0 <Segment_To_Buffer+0xa8>)
 800025e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000262:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000264:	79fa      	ldrb	r2, [r7, #7]
 8000266:	3202      	adds	r2, #2
 8000268:	490d      	ldr	r1, [pc, #52]	; (80002a0 <Segment_To_Buffer+0xa8>)
 800026a:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 800026e:	79fa      	ldrb	r2, [r7, #7]
 8000270:	4908      	ldr	r1, [pc, #32]	; (8000294 <Segment_To_Buffer+0x9c>)
 8000272:	5c8a      	ldrb	r2, [r1, r2]
 8000274:	4611      	mov	r1, r2
 8000276:	4798      	blx	r3
	for(uint8_t index = 0; index < NO_OF_7SEG_DEVICE; index++){
 8000278:	79fb      	ldrb	r3, [r7, #7]
 800027a:	3301      	adds	r3, #1
 800027c:	71fb      	strb	r3, [r7, #7]
 800027e:	79fb      	ldrb	r3, [r7, #7]
 8000280:	2b01      	cmp	r3, #1
 8000282:	d9db      	bls.n	800023c <Segment_To_Buffer+0x44>
	}
}
 8000284:	bf00      	nop
 8000286:	bf00      	nop
 8000288:	3708      	adds	r7, #8
 800028a:	46bd      	mov	sp, r7
 800028c:	bd80      	pop	{r7, pc}
 800028e:	bf00      	nop
 8000290:	200001a8 	.word	0x200001a8
 8000294:	20000118 	.word	0x20000118
 8000298:	200001ac 	.word	0x200001ac
 800029c:	2000011c 	.word	0x2000011c
 80002a0:	20000120 	.word	0x20000120

080002a4 <Intersection_7SEG_Display>:
void Intersection_7SEG_Display(void){
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b082      	sub	sp, #8
 80002a8:	af00      	add	r7, sp, #0
	Segment_To_Buffer();
 80002aa:	f7ff ffa5 	bl	80001f8 <Segment_To_Buffer>
	static uint8_t counter = 0;
	SevenSeg[counter]->enPin->On(SevenSeg[counter]->enPin);
 80002ae:	4b26      	ldr	r3, [pc, #152]	; (8000348 <Intersection_7SEG_Display+0xa4>)
 80002b0:	781b      	ldrb	r3, [r3, #0]
 80002b2:	461a      	mov	r2, r3
 80002b4:	4b25      	ldr	r3, [pc, #148]	; (800034c <Intersection_7SEG_Display+0xa8>)
 80002b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80002ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80002bc:	68db      	ldr	r3, [r3, #12]
 80002be:	4a22      	ldr	r2, [pc, #136]	; (8000348 <Intersection_7SEG_Display+0xa4>)
 80002c0:	7812      	ldrb	r2, [r2, #0]
 80002c2:	4611      	mov	r1, r2
 80002c4:	4a21      	ldr	r2, [pc, #132]	; (800034c <Intersection_7SEG_Display+0xa8>)
 80002c6:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80002ca:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80002cc:	4610      	mov	r0, r2
 80002ce:	4798      	blx	r3
	for (uint8_t index = 0; index < 2*NO_OF_7SEG_DEVICE; index++){
 80002d0:	2300      	movs	r3, #0
 80002d2:	71fb      	strb	r3, [r7, #7]
 80002d4:	e014      	b.n	8000300 <Intersection_7SEG_Display+0x5c>
		if (index != counter)
 80002d6:	4b1c      	ldr	r3, [pc, #112]	; (8000348 <Intersection_7SEG_Display+0xa4>)
 80002d8:	781b      	ldrb	r3, [r3, #0]
 80002da:	79fa      	ldrb	r2, [r7, #7]
 80002dc:	429a      	cmp	r2, r3
 80002de:	d00c      	beq.n	80002fa <Intersection_7SEG_Display+0x56>
			SevenSeg[index]->enPin->Off(SevenSeg[index]->enPin);
 80002e0:	79fb      	ldrb	r3, [r7, #7]
 80002e2:	4a1a      	ldr	r2, [pc, #104]	; (800034c <Intersection_7SEG_Display+0xa8>)
 80002e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80002ea:	691b      	ldr	r3, [r3, #16]
 80002ec:	79fa      	ldrb	r2, [r7, #7]
 80002ee:	4917      	ldr	r1, [pc, #92]	; (800034c <Intersection_7SEG_Display+0xa8>)
 80002f0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80002f4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80002f6:	4610      	mov	r0, r2
 80002f8:	4798      	blx	r3
	for (uint8_t index = 0; index < 2*NO_OF_7SEG_DEVICE; index++){
 80002fa:	79fb      	ldrb	r3, [r7, #7]
 80002fc:	3301      	adds	r3, #1
 80002fe:	71fb      	strb	r3, [r7, #7]
 8000300:	79fb      	ldrb	r3, [r7, #7]
 8000302:	2b03      	cmp	r3, #3
 8000304:	d9e7      	bls.n	80002d6 <Intersection_7SEG_Display+0x32>
	}
	SevenSeg[counter]->Display(SevenSeg[counter]);
 8000306:	4b10      	ldr	r3, [pc, #64]	; (8000348 <Intersection_7SEG_Display+0xa4>)
 8000308:	781b      	ldrb	r3, [r3, #0]
 800030a:	461a      	mov	r2, r3
 800030c:	4b0f      	ldr	r3, [pc, #60]	; (800034c <Intersection_7SEG_Display+0xa8>)
 800030e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000314:	4a0c      	ldr	r2, [pc, #48]	; (8000348 <Intersection_7SEG_Display+0xa4>)
 8000316:	7812      	ldrb	r2, [r2, #0]
 8000318:	4611      	mov	r1, r2
 800031a:	4a0c      	ldr	r2, [pc, #48]	; (800034c <Intersection_7SEG_Display+0xa8>)
 800031c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8000320:	4610      	mov	r0, r2
 8000322:	4798      	blx	r3
	counter = (counter + 1) % (2* NO_OF_7SEG_DEVICE);
 8000324:	4b08      	ldr	r3, [pc, #32]	; (8000348 <Intersection_7SEG_Display+0xa4>)
 8000326:	781b      	ldrb	r3, [r3, #0]
 8000328:	3301      	adds	r3, #1
 800032a:	425a      	negs	r2, r3
 800032c:	f003 0303 	and.w	r3, r3, #3
 8000330:	f002 0203 	and.w	r2, r2, #3
 8000334:	bf58      	it	pl
 8000336:	4253      	negpl	r3, r2
 8000338:	b2da      	uxtb	r2, r3
 800033a:	4b03      	ldr	r3, [pc, #12]	; (8000348 <Intersection_7SEG_Display+0xa4>)
 800033c:	701a      	strb	r2, [r3, #0]
}
 800033e:	bf00      	nop
 8000340:	3708      	adds	r7, #8
 8000342:	46bd      	mov	sp, r7
 8000344:	bd80      	pop	{r7, pc}
 8000346:	bf00      	nop
 8000348:	20000130 	.word	0x20000130
 800034c:	20000120 	.word	0x20000120

08000350 <Traffic_Button_Init>:

Button_TypeDef* buttonMode;
Button_TypeDef* buttonTime;
Button_TypeDef* buttonSet;

void Traffic_Button_Init(void){
 8000350:	b580      	push	{r7, lr}
 8000352:	af00      	add	r7, sp, #0
	buttonMode	= Button_Init(buttonPort[0], buttonPin[0], NULL);
 8000354:	4b11      	ldr	r3, [pc, #68]	; (800039c <Traffic_Button_Init+0x4c>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	4a11      	ldr	r2, [pc, #68]	; (80003a0 <Traffic_Button_Init+0x50>)
 800035a:	8811      	ldrh	r1, [r2, #0]
 800035c:	2200      	movs	r2, #0
 800035e:	4618      	mov	r0, r3
 8000360:	f000 fb42 	bl	80009e8 <Button_Init>
 8000364:	4603      	mov	r3, r0
 8000366:	4a0f      	ldr	r2, [pc, #60]	; (80003a4 <Traffic_Button_Init+0x54>)
 8000368:	6013      	str	r3, [r2, #0]
	buttonTime	= Button_Init(buttonPort[1], buttonPin[1], NULL);
 800036a:	4b0c      	ldr	r3, [pc, #48]	; (800039c <Traffic_Button_Init+0x4c>)
 800036c:	685b      	ldr	r3, [r3, #4]
 800036e:	4a0c      	ldr	r2, [pc, #48]	; (80003a0 <Traffic_Button_Init+0x50>)
 8000370:	8851      	ldrh	r1, [r2, #2]
 8000372:	2200      	movs	r2, #0
 8000374:	4618      	mov	r0, r3
 8000376:	f000 fb37 	bl	80009e8 <Button_Init>
 800037a:	4603      	mov	r3, r0
 800037c:	4a0a      	ldr	r2, [pc, #40]	; (80003a8 <Traffic_Button_Init+0x58>)
 800037e:	6013      	str	r3, [r2, #0]
	buttonSet	= Button_Init(buttonPort[2], buttonPin[2], NULL);
 8000380:	4b06      	ldr	r3, [pc, #24]	; (800039c <Traffic_Button_Init+0x4c>)
 8000382:	689b      	ldr	r3, [r3, #8]
 8000384:	4a06      	ldr	r2, [pc, #24]	; (80003a0 <Traffic_Button_Init+0x50>)
 8000386:	8891      	ldrh	r1, [r2, #4]
 8000388:	2200      	movs	r2, #0
 800038a:	4618      	mov	r0, r3
 800038c:	f000 fb2c 	bl	80009e8 <Button_Init>
 8000390:	4603      	mov	r3, r0
 8000392:	4a06      	ldr	r2, [pc, #24]	; (80003ac <Traffic_Button_Init+0x5c>)
 8000394:	6013      	str	r3, [r2, #0]
}
 8000396:	bf00      	nop
 8000398:	bd80      	pop	{r7, pc}
 800039a:	bf00      	nop
 800039c:	2000004c 	.word	0x2000004c
 80003a0:	20000044 	.word	0x20000044
 80003a4:	20000134 	.word	0x20000134
 80003a8:	20000138 	.word	0x20000138
 80003ac:	2000013c 	.word	0x2000013c

080003b0 <Button_Scan>:

void Button_Scan(void){
 80003b0:	b580      	push	{r7, lr}
 80003b2:	af00      	add	r7, sp, #0
	buttonMode->Tap_Mode(buttonMode);
 80003b4:	4b0b      	ldr	r3, [pc, #44]	; (80003e4 <Button_Scan+0x34>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	695b      	ldr	r3, [r3, #20]
 80003ba:	4a0a      	ldr	r2, [pc, #40]	; (80003e4 <Button_Scan+0x34>)
 80003bc:	6812      	ldr	r2, [r2, #0]
 80003be:	4610      	mov	r0, r2
 80003c0:	4798      	blx	r3
	buttonTime->Tap_Mode(buttonTime);
 80003c2:	4b09      	ldr	r3, [pc, #36]	; (80003e8 <Button_Scan+0x38>)
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	695b      	ldr	r3, [r3, #20]
 80003c8:	4a07      	ldr	r2, [pc, #28]	; (80003e8 <Button_Scan+0x38>)
 80003ca:	6812      	ldr	r2, [r2, #0]
 80003cc:	4610      	mov	r0, r2
 80003ce:	4798      	blx	r3
	buttonSet->Tap_Mode(buttonSet);
 80003d0:	4b06      	ldr	r3, [pc, #24]	; (80003ec <Button_Scan+0x3c>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	695b      	ldr	r3, [r3, #20]
 80003d6:	4a05      	ldr	r2, [pc, #20]	; (80003ec <Button_Scan+0x3c>)
 80003d8:	6812      	ldr	r2, [r2, #0]
 80003da:	4610      	mov	r0, r2
 80003dc:	4798      	blx	r3
}
 80003de:	bf00      	nop
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	bf00      	nop
 80003e4:	20000134 	.word	0x20000134
 80003e8:	20000138 	.word	0x20000138
 80003ec:	2000013c 	.word	0x2000013c

080003f0 <STIM_Init>:
/*
 * SOFTWARE TIMER TYPE DEFINITION
 */
/**************************************************************************************/

STIM_TypeDef * STIM_Init(uint16_t delay, uint16_t interrupt){
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b084      	sub	sp, #16
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	4603      	mov	r3, r0
 80003f8:	460a      	mov	r2, r1
 80003fa:	80fb      	strh	r3, [r7, #6]
 80003fc:	4613      	mov	r3, r2
 80003fe:	80bb      	strh	r3, [r7, #4]
	STIM_TypeDef * stim 		= malloc(sizeof(STIM_TypeDef));
 8000400:	2014      	movs	r0, #20
 8000402:	f002 ff1b 	bl	800323c <malloc>
 8000406:	4603      	mov	r3, r0
 8000408:	60fb      	str	r3, [r7, #12]
	stim->delay 				= delay;
 800040a:	68fb      	ldr	r3, [r7, #12]
 800040c:	88fa      	ldrh	r2, [r7, #6]
 800040e:	801a      	strh	r2, [r3, #0]
	stim->interrupt 			= interrupt;
 8000410:	68fb      	ldr	r3, [r7, #12]
 8000412:	88ba      	ldrh	r2, [r7, #4]
 8000414:	805a      	strh	r2, [r3, #2]
	stim->counter				= 0;
 8000416:	68fb      	ldr	r3, [r7, #12]
 8000418:	2200      	movs	r2, #0
 800041a:	809a      	strh	r2, [r3, #4]

	stim->Set_Default 			= STIM_Set_Default;
 800041c:	68fb      	ldr	r3, [r7, #12]
 800041e:	4a06      	ldr	r2, [pc, #24]	; (8000438 <STIM_Init+0x48>)
 8000420:	609a      	str	r2, [r3, #8]
	stim->Set_Manual			= STIM_Set_Manual;
 8000422:	68fb      	ldr	r3, [r7, #12]
 8000424:	4a05      	ldr	r2, [pc, #20]	; (800043c <STIM_Init+0x4c>)
 8000426:	60da      	str	r2, [r3, #12]
	stim->Timer_Run 			= STIM_Timer_Run;
 8000428:	68fb      	ldr	r3, [r7, #12]
 800042a:	4a05      	ldr	r2, [pc, #20]	; (8000440 <STIM_Init+0x50>)
 800042c:	611a      	str	r2, [r3, #16]
	return stim;
 800042e:	68fb      	ldr	r3, [r7, #12]
}
 8000430:	4618      	mov	r0, r3
 8000432:	3710      	adds	r7, #16
 8000434:	46bd      	mov	sp, r7
 8000436:	bd80      	pop	{r7, pc}
 8000438:	08000445 	.word	0x08000445
 800043c:	0800046f 	.word	0x0800046f
 8000440:	080004a3 	.word	0x080004a3

08000444 <STIM_Set_Default>:
void STIM_Set_Default(STIM_TypeDef* stim){
 8000444:	b480      	push	{r7}
 8000446:	b083      	sub	sp, #12
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
	stim->counter 			= stim->delay/stim->interrupt;
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	881a      	ldrh	r2, [r3, #0]
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	885b      	ldrh	r3, [r3, #2]
 8000454:	fbb2 f3f3 	udiv	r3, r2, r3
 8000458:	b29a      	uxth	r2, r3
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	809a      	strh	r2, [r3, #4]
	stim->flag 	 			= 0;
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	2200      	movs	r2, #0
 8000462:	719a      	strb	r2, [r3, #6]
}
 8000464:	bf00      	nop
 8000466:	370c      	adds	r7, #12
 8000468:	46bd      	mov	sp, r7
 800046a:	bc80      	pop	{r7}
 800046c:	4770      	bx	lr

0800046e <STIM_Set_Manual>:
void STIM_Set_Manual(STIM_TypeDef* stim, uint16_t delay){
 800046e:	b480      	push	{r7}
 8000470:	b083      	sub	sp, #12
 8000472:	af00      	add	r7, sp, #0
 8000474:	6078      	str	r0, [r7, #4]
 8000476:	460b      	mov	r3, r1
 8000478:	807b      	strh	r3, [r7, #2]
	stim->delay				= delay;
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	887a      	ldrh	r2, [r7, #2]
 800047e:	801a      	strh	r2, [r3, #0]
	stim->counter 			= stim->delay/stim->interrupt;
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	881a      	ldrh	r2, [r3, #0]
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	885b      	ldrh	r3, [r3, #2]
 8000488:	fbb2 f3f3 	udiv	r3, r2, r3
 800048c:	b29a      	uxth	r2, r3
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	809a      	strh	r2, [r3, #4]
	stim->flag 	 			= 0;
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	2200      	movs	r2, #0
 8000496:	719a      	strb	r2, [r3, #6]
}
 8000498:	bf00      	nop
 800049a:	370c      	adds	r7, #12
 800049c:	46bd      	mov	sp, r7
 800049e:	bc80      	pop	{r7}
 80004a0:	4770      	bx	lr

080004a2 <STIM_Timer_Run>:
void STIM_Timer_Run(STIM_TypeDef* stim){
 80004a2:	b480      	push	{r7}
 80004a4:	b083      	sub	sp, #12
 80004a6:	af00      	add	r7, sp, #0
 80004a8:	6078      	str	r0, [r7, #4]
	if(stim->counter > 0){
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	889b      	ldrh	r3, [r3, #4]
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d00c      	beq.n	80004cc <STIM_Timer_Run+0x2a>
		stim->counter--;
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	889b      	ldrh	r3, [r3, #4]
 80004b6:	3b01      	subs	r3, #1
 80004b8:	b29a      	uxth	r2, r3
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	809a      	strh	r2, [r3, #4]
		if(stim->counter <= 0){
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	889b      	ldrh	r3, [r3, #4]
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d102      	bne.n	80004cc <STIM_Timer_Run+0x2a>
			stim->flag = 1;
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	2201      	movs	r2, #1
 80004ca:	719a      	strb	r2, [r3, #6]
		}
	}
}
 80004cc:	bf00      	nop
 80004ce:	370c      	adds	r7, #12
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bc80      	pop	{r7}
 80004d4:	4770      	bx	lr
	...

080004d8 <Led_Init>:
 * LED TYPE DEFINITION
 */
/**************************************************************************************/


LED_TypeDef * Led_Init(GPIO_TypeDef* port, uint16_t pin, GPIO_PinState state){
 80004d8:	b580      	push	{r7, lr}
 80004da:	b084      	sub	sp, #16
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
 80004e0:	460b      	mov	r3, r1
 80004e2:	807b      	strh	r3, [r7, #2]
 80004e4:	4613      	mov	r3, r2
 80004e6:	707b      	strb	r3, [r7, #1]
	LED_TypeDef * led 	= malloc(sizeof(LED_TypeDef));
 80004e8:	2018      	movs	r0, #24
 80004ea:	f002 fea7 	bl	800323c <malloc>
 80004ee:	4603      	mov	r3, r0
 80004f0:	60fb      	str	r3, [r7, #12]
	led->port 			= port;
 80004f2:	68fb      	ldr	r3, [r7, #12]
 80004f4:	687a      	ldr	r2, [r7, #4]
 80004f6:	601a      	str	r2, [r3, #0]
	led->pin 			= pin;
 80004f8:	68fb      	ldr	r3, [r7, #12]
 80004fa:	887a      	ldrh	r2, [r7, #2]
 80004fc:	809a      	strh	r2, [r3, #4]
	led->state 			= state;
 80004fe:	68fb      	ldr	r3, [r7, #12]
 8000500:	787a      	ldrb	r2, [r7, #1]
 8000502:	719a      	strb	r2, [r3, #6]
	led->Display 		= Led_Display;
 8000504:	68fb      	ldr	r3, [r7, #12]
 8000506:	4a08      	ldr	r2, [pc, #32]	; (8000528 <Led_Init+0x50>)
 8000508:	609a      	str	r2, [r3, #8]
	led->On 			= Led_On;
 800050a:	68fb      	ldr	r3, [r7, #12]
 800050c:	4a07      	ldr	r2, [pc, #28]	; (800052c <Led_Init+0x54>)
 800050e:	611a      	str	r2, [r3, #16]
	led->Off 			= Led_Off;
 8000510:	68fb      	ldr	r3, [r7, #12]
 8000512:	4a07      	ldr	r2, [pc, #28]	; (8000530 <Led_Init+0x58>)
 8000514:	615a      	str	r2, [r3, #20]
	led->Toggle 		= Led_Toggle;
 8000516:	68fb      	ldr	r3, [r7, #12]
 8000518:	4a06      	ldr	r2, [pc, #24]	; (8000534 <Led_Init+0x5c>)
 800051a:	60da      	str	r2, [r3, #12]
	return led;
 800051c:	68fb      	ldr	r3, [r7, #12]
}
 800051e:	4618      	mov	r0, r3
 8000520:	3710      	adds	r7, #16
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	08000539 	.word	0x08000539
 800052c:	0800057b 	.word	0x0800057b
 8000530:	08000597 	.word	0x08000597
 8000534:	0800055b 	.word	0x0800055b

08000538 <Led_Display>:

void Led_Display(LED_TypeDef* led){
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(led->port, led->pin, led->state);
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	6818      	ldr	r0, [r3, #0]
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	8899      	ldrh	r1, [r3, #4]
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	799b      	ldrb	r3, [r3, #6]
 800054c:	461a      	mov	r2, r3
 800054e:	f001 fe4e 	bl	80021ee <HAL_GPIO_WritePin>
}
 8000552:	bf00      	nop
 8000554:	3708      	adds	r7, #8
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}

0800055a <Led_Toggle>:
void Led_Toggle(LED_TypeDef* led){
 800055a:	b580      	push	{r7, lr}
 800055c:	b082      	sub	sp, #8
 800055e:	af00      	add	r7, sp, #0
 8000560:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(led->port, led->pin);
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	681a      	ldr	r2, [r3, #0]
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	889b      	ldrh	r3, [r3, #4]
 800056a:	4619      	mov	r1, r3
 800056c:	4610      	mov	r0, r2
 800056e:	f001 fe56 	bl	800221e <HAL_GPIO_TogglePin>
}
 8000572:	bf00      	nop
 8000574:	3708      	adds	r7, #8
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}

0800057a <Led_On>:
void Led_On(LED_TypeDef* led){
 800057a:	b580      	push	{r7, lr}
 800057c:	b082      	sub	sp, #8
 800057e:	af00      	add	r7, sp, #0
 8000580:	6078      	str	r0, [r7, #4]
	led->state = ENABLE;
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	2200      	movs	r2, #0
 8000586:	719a      	strb	r2, [r3, #6]
	Led_Display(led);
 8000588:	6878      	ldr	r0, [r7, #4]
 800058a:	f7ff ffd5 	bl	8000538 <Led_Display>
}
 800058e:	bf00      	nop
 8000590:	3708      	adds	r7, #8
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}

08000596 <Led_Off>:
void Led_Off(LED_TypeDef* led){
 8000596:	b580      	push	{r7, lr}
 8000598:	b082      	sub	sp, #8
 800059a:	af00      	add	r7, sp, #0
 800059c:	6078      	str	r0, [r7, #4]
	led->state = DISABLE;
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	2201      	movs	r2, #1
 80005a2:	719a      	strb	r2, [r3, #6]
	Led_Display(led);
 80005a4:	6878      	ldr	r0, [r7, #4]
 80005a6:	f7ff ffc7 	bl	8000538 <Led_Display>
}
 80005aa:	bf00      	nop
 80005ac:	3708      	adds	r7, #8
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
	...

080005b4 <Clock_Init>:
/*
 * CLOCK TYPE DEFINTION
 */
/**************************************************************************************/

Clock_TypeDef * Clock_Init (uint8_t hour, uint8_t minute, uint8_t second){
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	4603      	mov	r3, r0
 80005bc:	71fb      	strb	r3, [r7, #7]
 80005be:	460b      	mov	r3, r1
 80005c0:	71bb      	strb	r3, [r7, #6]
 80005c2:	4613      	mov	r3, r2
 80005c4:	717b      	strb	r3, [r7, #5]
	Clock_TypeDef * clock 	= malloc(sizeof(Clock_TypeDef));
 80005c6:	201c      	movs	r0, #28
 80005c8:	f002 fe38 	bl	800323c <malloc>
 80005cc:	4603      	mov	r3, r0
 80005ce:	60fb      	str	r3, [r7, #12]

	clock->hour				= hour;
 80005d0:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	701a      	strb	r2, [r3, #0]
	clock->minute 			= minute;
 80005d8:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	705a      	strb	r2, [r3, #1]
	clock->second 			= second;
 80005e0:	f997 2005 	ldrsb.w	r2, [r7, #5]
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	709a      	strb	r2, [r3, #2]
	clock->Modify			= Time_Modify;
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	4a0a      	ldr	r2, [pc, #40]	; (8000614 <Clock_Init+0x60>)
 80005ec:	60da      	str	r2, [r3, #12]
	clock->Up				= Clock_Counter_Up;
 80005ee:	68fb      	ldr	r3, [r7, #12]
 80005f0:	4a09      	ldr	r2, [pc, #36]	; (8000618 <Clock_Init+0x64>)
 80005f2:	611a      	str	r2, [r3, #16]
	clock->Down				= Clock_Counter_Down;
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	4a09      	ldr	r2, [pc, #36]	; (800061c <Clock_Init+0x68>)
 80005f8:	615a      	str	r2, [r3, #20]
	clock->Update			= Update_Clock_Buffer;
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	4a08      	ldr	r2, [pc, #32]	; (8000620 <Clock_Init+0x6c>)
 80005fe:	619a      	str	r2, [r3, #24]

	clock->Update(clock);
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	699b      	ldr	r3, [r3, #24]
 8000604:	68f8      	ldr	r0, [r7, #12]
 8000606:	4798      	blx	r3
	return clock;
 8000608:	68fb      	ldr	r3, [r7, #12]
}
 800060a:	4618      	mov	r0, r3
 800060c:	3710      	adds	r7, #16
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	08000625 	.word	0x08000625
 8000618:	08000667 	.word	0x08000667
 800061c:	080006e5 	.word	0x080006e5
 8000620:	08000771 	.word	0x08000771

08000624 <Time_Modify>:
void Time_Modify(Clock_TypeDef* clock, uint8_t hour, uint8_t minute, uint8_t second){
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	4608      	mov	r0, r1
 800062e:	4611      	mov	r1, r2
 8000630:	461a      	mov	r2, r3
 8000632:	4603      	mov	r3, r0
 8000634:	70fb      	strb	r3, [r7, #3]
 8000636:	460b      	mov	r3, r1
 8000638:	70bb      	strb	r3, [r7, #2]
 800063a:	4613      	mov	r3, r2
 800063c:	707b      	strb	r3, [r7, #1]
	clock->hour 		= hour;
 800063e:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	701a      	strb	r2, [r3, #0]
	clock->minute		= minute;
 8000646:	f997 2002 	ldrsb.w	r2, [r7, #2]
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	705a      	strb	r2, [r3, #1]
	clock->second 		= second;
 800064e:	f997 2001 	ldrsb.w	r2, [r7, #1]
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	709a      	strb	r2, [r3, #2]
	clock->Update(clock);
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	699b      	ldr	r3, [r3, #24]
 800065a:	6878      	ldr	r0, [r7, #4]
 800065c:	4798      	blx	r3
}
 800065e:	bf00      	nop
 8000660:	3708      	adds	r7, #8
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}

08000666 <Clock_Counter_Up>:

void Clock_Counter_Up(Clock_TypeDef* clock){
 8000666:	b580      	push	{r7, lr}
 8000668:	b082      	sub	sp, #8
 800066a:	af00      	add	r7, sp, #0
 800066c:	6078      	str	r0, [r7, #4]
	clock->second++;
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000674:	b2db      	uxtb	r3, r3
 8000676:	3301      	adds	r3, #1
 8000678:	b2db      	uxtb	r3, r3
 800067a:	b25a      	sxtb	r2, r3
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	709a      	strb	r2, [r3, #2]
	if (clock->second >= SECOND_LIMIT){
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000686:	2b3b      	cmp	r3, #59	; 0x3b
 8000688:	dd0b      	ble.n	80006a2 <Clock_Counter_Up+0x3c>
		clock->second	= 0;
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	2200      	movs	r2, #0
 800068e:	709a      	strb	r2, [r3, #2]
		clock->minute++;
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000696:	b2db      	uxtb	r3, r3
 8000698:	3301      	adds	r3, #1
 800069a:	b2db      	uxtb	r3, r3
 800069c:	b25a      	sxtb	r2, r3
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	705a      	strb	r2, [r3, #1]
	}
	if (clock->minute >= MINUTE_LIMIT){
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80006a8:	2b3b      	cmp	r3, #59	; 0x3b
 80006aa:	dd0b      	ble.n	80006c4 <Clock_Counter_Up+0x5e>
		clock->minute 	= 0;
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	2200      	movs	r2, #0
 80006b0:	705a      	strb	r2, [r3, #1]
		clock->hour++;
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	f993 3000 	ldrsb.w	r3, [r3]
 80006b8:	b2db      	uxtb	r3, r3
 80006ba:	3301      	adds	r3, #1
 80006bc:	b2db      	uxtb	r3, r3
 80006be:	b25a      	sxtb	r2, r3
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	701a      	strb	r2, [r3, #0]
	}
	if (clock->hour >= HOUR_LIMIT){
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	f993 3000 	ldrsb.w	r3, [r3]
 80006ca:	2b17      	cmp	r3, #23
 80006cc:	dd02      	ble.n	80006d4 <Clock_Counter_Up+0x6e>
		clock->hour		= 0;
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	2200      	movs	r2, #0
 80006d2:	701a      	strb	r2, [r3, #0]
	}
	clock->Update(clock);
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	699b      	ldr	r3, [r3, #24]
 80006d8:	6878      	ldr	r0, [r7, #4]
 80006da:	4798      	blx	r3
}
 80006dc:	bf00      	nop
 80006de:	3708      	adds	r7, #8
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}

080006e4 <Clock_Counter_Down>:

void Clock_Counter_Down(Clock_TypeDef* clock){
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
	clock->second--;
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80006f2:	b2db      	uxtb	r3, r3
 80006f4:	3b01      	subs	r3, #1
 80006f6:	b2db      	uxtb	r3, r3
 80006f8:	b25a      	sxtb	r2, r3
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	709a      	strb	r2, [r3, #2]
	if (clock->second < 0){
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000704:	2b00      	cmp	r3, #0
 8000706:	da0b      	bge.n	8000720 <Clock_Counter_Down+0x3c>
		clock->second	= SECOND_LIMIT;
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	223c      	movs	r2, #60	; 0x3c
 800070c:	709a      	strb	r2, [r3, #2]
		clock->minute--;
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000714:	b2db      	uxtb	r3, r3
 8000716:	3b01      	subs	r3, #1
 8000718:	b2db      	uxtb	r3, r3
 800071a:	b25a      	sxtb	r2, r3
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	705a      	strb	r2, [r3, #1]
	}
	if (clock->minute < 0){
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000726:	2b00      	cmp	r3, #0
 8000728:	da0b      	bge.n	8000742 <Clock_Counter_Down+0x5e>
		clock->minute 	= MINUTE_LIMIT;
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	223c      	movs	r2, #60	; 0x3c
 800072e:	705a      	strb	r2, [r3, #1]
		clock->hour--;
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	f993 3000 	ldrsb.w	r3, [r3]
 8000736:	b2db      	uxtb	r3, r3
 8000738:	3b01      	subs	r3, #1
 800073a:	b2db      	uxtb	r3, r3
 800073c:	b25a      	sxtb	r2, r3
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	701a      	strb	r2, [r3, #0]
	}
	if (clock->hour 	< 0){
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	f993 3000 	ldrsb.w	r3, [r3]
 8000748:	2b00      	cmp	r3, #0
 800074a:	da08      	bge.n	800075e <Clock_Counter_Down+0x7a>
		clock->hour		= 0;
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	2200      	movs	r2, #0
 8000750:	701a      	strb	r2, [r3, #0]
		clock->minute 	= 0;
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	2200      	movs	r2, #0
 8000756:	705a      	strb	r2, [r3, #1]
		clock->second 	= 0;
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	2200      	movs	r2, #0
 800075c:	709a      	strb	r2, [r3, #2]
	}
	clock->Update(clock);
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	699b      	ldr	r3, [r3, #24]
 8000762:	6878      	ldr	r0, [r7, #4]
 8000764:	4798      	blx	r3
}
 8000766:	bf00      	nop
 8000768:	3708      	adds	r7, #8
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
	...

08000770 <Update_Clock_Buffer>:

void Update_Clock_Buffer(Clock_TypeDef *clock){
 8000770:	b480      	push	{r7}
 8000772:	b083      	sub	sp, #12
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
	clock->buffer[0] 	= clock->hour 		/ DECIMAL;
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	f993 3000 	ldrsb.w	r3, [r3]
 800077e:	4a2c      	ldr	r2, [pc, #176]	; (8000830 <Update_Clock_Buffer+0xc0>)
 8000780:	fb82 1203 	smull	r1, r2, r2, r3
 8000784:	1092      	asrs	r2, r2, #2
 8000786:	17db      	asrs	r3, r3, #31
 8000788:	1ad3      	subs	r3, r2, r3
 800078a:	b25a      	sxtb	r2, r3
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	70da      	strb	r2, [r3, #3]
	clock->buffer[1] 	= clock->hour 		% DECIMAL;
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	f993 2000 	ldrsb.w	r2, [r3]
 8000796:	4b26      	ldr	r3, [pc, #152]	; (8000830 <Update_Clock_Buffer+0xc0>)
 8000798:	fb83 1302 	smull	r1, r3, r3, r2
 800079c:	1099      	asrs	r1, r3, #2
 800079e:	17d3      	asrs	r3, r2, #31
 80007a0:	1ac9      	subs	r1, r1, r3
 80007a2:	460b      	mov	r3, r1
 80007a4:	009b      	lsls	r3, r3, #2
 80007a6:	440b      	add	r3, r1
 80007a8:	005b      	lsls	r3, r3, #1
 80007aa:	1ad3      	subs	r3, r2, r3
 80007ac:	b25a      	sxtb	r2, r3
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	711a      	strb	r2, [r3, #4]
	clock->buffer[2]	= clock->minute 	/ DECIMAL;
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80007b8:	4a1d      	ldr	r2, [pc, #116]	; (8000830 <Update_Clock_Buffer+0xc0>)
 80007ba:	fb82 1203 	smull	r1, r2, r2, r3
 80007be:	1092      	asrs	r2, r2, #2
 80007c0:	17db      	asrs	r3, r3, #31
 80007c2:	1ad3      	subs	r3, r2, r3
 80007c4:	b25a      	sxtb	r2, r3
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	715a      	strb	r2, [r3, #5]
	clock->buffer[3] 	= clock->minute 	% DECIMAL;
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	f993 2001 	ldrsb.w	r2, [r3, #1]
 80007d0:	4b17      	ldr	r3, [pc, #92]	; (8000830 <Update_Clock_Buffer+0xc0>)
 80007d2:	fb83 1302 	smull	r1, r3, r3, r2
 80007d6:	1099      	asrs	r1, r3, #2
 80007d8:	17d3      	asrs	r3, r2, #31
 80007da:	1ac9      	subs	r1, r1, r3
 80007dc:	460b      	mov	r3, r1
 80007de:	009b      	lsls	r3, r3, #2
 80007e0:	440b      	add	r3, r1
 80007e2:	005b      	lsls	r3, r3, #1
 80007e4:	1ad3      	subs	r3, r2, r3
 80007e6:	b25a      	sxtb	r2, r3
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	719a      	strb	r2, [r3, #6]
	clock->buffer[4]	= clock->second 	/ DECIMAL;
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80007f2:	4a0f      	ldr	r2, [pc, #60]	; (8000830 <Update_Clock_Buffer+0xc0>)
 80007f4:	fb82 1203 	smull	r1, r2, r2, r3
 80007f8:	1092      	asrs	r2, r2, #2
 80007fa:	17db      	asrs	r3, r3, #31
 80007fc:	1ad3      	subs	r3, r2, r3
 80007fe:	b25a      	sxtb	r2, r3
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	71da      	strb	r2, [r3, #7]
	clock->buffer[5] 	= clock->second 	% DECIMAL;
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800080a:	4b09      	ldr	r3, [pc, #36]	; (8000830 <Update_Clock_Buffer+0xc0>)
 800080c:	fb83 1302 	smull	r1, r3, r3, r2
 8000810:	1099      	asrs	r1, r3, #2
 8000812:	17d3      	asrs	r3, r2, #31
 8000814:	1ac9      	subs	r1, r1, r3
 8000816:	460b      	mov	r3, r1
 8000818:	009b      	lsls	r3, r3, #2
 800081a:	440b      	add	r3, r1
 800081c:	005b      	lsls	r3, r3, #1
 800081e:	1ad3      	subs	r3, r2, r3
 8000820:	b25a      	sxtb	r2, r3
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	721a      	strb	r2, [r3, #8]
}
 8000826:	bf00      	nop
 8000828:	370c      	adds	r7, #12
 800082a:	46bd      	mov	sp, r7
 800082c:	bc80      	pop	{r7}
 800082e:	4770      	bx	lr
 8000830:	66666667 	.word	0x66666667

08000834 <ENPin_Init>:
/*
 * ENABLE PIN TYPE DEFINITION
 */
/**************************************************************************************/

ENPin_TypeDef * ENPin_Init(GPIO_TypeDef* port, uint16_t pin, GPIO_PinState state){
 8000834:	b580      	push	{r7, lr}
 8000836:	b084      	sub	sp, #16
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
 800083c:	460b      	mov	r3, r1
 800083e:	807b      	strh	r3, [r7, #2]
 8000840:	4613      	mov	r3, r2
 8000842:	707b      	strb	r3, [r7, #1]
	ENPin_TypeDef * enPin = malloc(sizeof(ENPin_TypeDef));
 8000844:	2014      	movs	r0, #20
 8000846:	f002 fcf9 	bl	800323c <malloc>
 800084a:	4603      	mov	r3, r0
 800084c:	60fb      	str	r3, [r7, #12]
	enPin->pin = pin;
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	887a      	ldrh	r2, [r7, #2]
 8000852:	801a      	strh	r2, [r3, #0]
	enPin->port = port;
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	687a      	ldr	r2, [r7, #4]
 8000858:	605a      	str	r2, [r3, #4]
	enPin->state = state;
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	787a      	ldrb	r2, [r7, #1]
 800085e:	721a      	strb	r2, [r3, #8]

	enPin->On = ENPin_On;
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	4a05      	ldr	r2, [pc, #20]	; (8000878 <ENPin_Init+0x44>)
 8000864:	60da      	str	r2, [r3, #12]
	enPin->Off = ENPin_Off;
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	4a04      	ldr	r2, [pc, #16]	; (800087c <ENPin_Init+0x48>)
 800086a:	611a      	str	r2, [r3, #16]
	return enPin;
 800086c:	68fb      	ldr	r3, [r7, #12]
}
 800086e:	4618      	mov	r0, r3
 8000870:	3710      	adds	r7, #16
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	08000881 	.word	0x08000881
 800087c:	080008a9 	.word	0x080008a9

08000880 <ENPin_On>:
void ENPin_On(ENPin_TypeDef* enPin){
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
	enPin->state = ENABLE;
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	2200      	movs	r2, #0
 800088c:	721a      	strb	r2, [r3, #8]
	HAL_GPIO_WritePin(enPin->port, enPin->pin, enPin->state);
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	6858      	ldr	r0, [r3, #4]
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	8819      	ldrh	r1, [r3, #0]
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	7a1b      	ldrb	r3, [r3, #8]
 800089a:	461a      	mov	r2, r3
 800089c:	f001 fca7 	bl	80021ee <HAL_GPIO_WritePin>
}
 80008a0:	bf00      	nop
 80008a2:	3708      	adds	r7, #8
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}

080008a8 <ENPin_Off>:
void ENPin_Off(ENPin_TypeDef* enPin){
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
	enPin->state = DISABLE;
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	2201      	movs	r2, #1
 80008b4:	721a      	strb	r2, [r3, #8]
	HAL_GPIO_WritePin(enPin->port, enPin->pin, enPin->state);
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	6858      	ldr	r0, [r3, #4]
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	8819      	ldrh	r1, [r3, #0]
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	7a1b      	ldrb	r3, [r3, #8]
 80008c2:	461a      	mov	r2, r3
 80008c4:	f001 fc93 	bl	80021ee <HAL_GPIO_WritePin>
}
 80008c8:	bf00      	nop
 80008ca:	3708      	adds	r7, #8
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}

080008d0 <SevenSeg_Init>:
 */
/**************************************************************************************/

static unsigned char referCode[10] = {0x40, 0x79, 0x24, 0x30, 0x19, 0x12, 0x02, 0x78, 0x00, 0x10};

SevenSeg_TypeDef * SevenSeg_Init(GPIO_TypeDef* port[], uint16_t pin[], ENPin_TypeDef * enPin){
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b086      	sub	sp, #24
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	60f8      	str	r0, [r7, #12]
 80008d8:	60b9      	str	r1, [r7, #8]
 80008da:	607a      	str	r2, [r7, #4]
	SevenSeg_TypeDef * sevenSeg = malloc(sizeof(SevenSeg_TypeDef));
 80008dc:	2040      	movs	r0, #64	; 0x40
 80008de:	f002 fcad 	bl	800323c <malloc>
 80008e2:	4603      	mov	r3, r0
 80008e4:	613b      	str	r3, [r7, #16]
	for (uint8_t index = 0; index < NO_OF_SEGMENT; index++){
 80008e6:	2300      	movs	r3, #0
 80008e8:	75fb      	strb	r3, [r7, #23]
 80008ea:	e01b      	b.n	8000924 <SevenSeg_Init+0x54>
		sevenSeg->pin[index] 	= pin[index];
 80008ec:	7dfb      	ldrb	r3, [r7, #23]
 80008ee:	005b      	lsls	r3, r3, #1
 80008f0:	68ba      	ldr	r2, [r7, #8]
 80008f2:	4413      	add	r3, r2
 80008f4:	7dfa      	ldrb	r2, [r7, #23]
 80008f6:	8819      	ldrh	r1, [r3, #0]
 80008f8:	693b      	ldr	r3, [r7, #16]
 80008fa:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		sevenSeg->port[index] 	= port[index];
 80008fe:	7dfb      	ldrb	r3, [r7, #23]
 8000900:	009b      	lsls	r3, r3, #2
 8000902:	68fa      	ldr	r2, [r7, #12]
 8000904:	4413      	add	r3, r2
 8000906:	7dfa      	ldrb	r2, [r7, #23]
 8000908:	6819      	ldr	r1, [r3, #0]
 800090a:	693b      	ldr	r3, [r7, #16]
 800090c:	3204      	adds	r2, #4
 800090e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		sevenSeg->state[index] 	= DISABLE;
 8000912:	7dfb      	ldrb	r3, [r7, #23]
 8000914:	693a      	ldr	r2, [r7, #16]
 8000916:	4413      	add	r3, r2
 8000918:	2201      	movs	r2, #1
 800091a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	for (uint8_t index = 0; index < NO_OF_SEGMENT; index++){
 800091e:	7dfb      	ldrb	r3, [r7, #23]
 8000920:	3301      	adds	r3, #1
 8000922:	75fb      	strb	r3, [r7, #23]
 8000924:	7dfb      	ldrb	r3, [r7, #23]
 8000926:	2b06      	cmp	r3, #6
 8000928:	d9e0      	bls.n	80008ec <SevenSeg_Init+0x1c>
	}
	sevenSeg->enPin 			= enPin;
 800092a:	693b      	ldr	r3, [r7, #16]
 800092c:	687a      	ldr	r2, [r7, #4]
 800092e:	635a      	str	r2, [r3, #52]	; 0x34
	sevenSeg->Display 			= Seg_Display;
 8000930:	693b      	ldr	r3, [r7, #16]
 8000932:	4a05      	ldr	r2, [pc, #20]	; (8000948 <SevenSeg_Init+0x78>)
 8000934:	639a      	str	r2, [r3, #56]	; 0x38
	sevenSeg->Convert 			= Number_Conversion;
 8000936:	693b      	ldr	r3, [r7, #16]
 8000938:	4a04      	ldr	r2, [pc, #16]	; (800094c <SevenSeg_Init+0x7c>)
 800093a:	63da      	str	r2, [r3, #60]	; 0x3c
	return sevenSeg;
 800093c:	693b      	ldr	r3, [r7, #16]
}
 800093e:	4618      	mov	r0, r3
 8000940:	3718      	adds	r7, #24
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	08000951 	.word	0x08000951
 800094c:	08000999 	.word	0x08000999

08000950 <Seg_Display>:

void Seg_Display(SevenSeg_TypeDef * sevenSeg){
 8000950:	b580      	push	{r7, lr}
 8000952:	b084      	sub	sp, #16
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
	for (uint8_t index = 0; index < NO_OF_SEGMENT; index++){
 8000958:	2300      	movs	r3, #0
 800095a:	73fb      	strb	r3, [r7, #15]
 800095c:	e013      	b.n	8000986 <Seg_Display+0x36>
		HAL_GPIO_WritePin(sevenSeg->port[index], sevenSeg->pin[index], sevenSeg->state[index]);
 800095e:	7bfa      	ldrb	r2, [r7, #15]
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	3204      	adds	r2, #4
 8000964:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8000968:	7bfa      	ldrb	r2, [r7, #15]
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8000970:	7bfb      	ldrb	r3, [r7, #15]
 8000972:	687a      	ldr	r2, [r7, #4]
 8000974:	4413      	add	r3, r2
 8000976:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800097a:	461a      	mov	r2, r3
 800097c:	f001 fc37 	bl	80021ee <HAL_GPIO_WritePin>
	for (uint8_t index = 0; index < NO_OF_SEGMENT; index++){
 8000980:	7bfb      	ldrb	r3, [r7, #15]
 8000982:	3301      	adds	r3, #1
 8000984:	73fb      	strb	r3, [r7, #15]
 8000986:	7bfb      	ldrb	r3, [r7, #15]
 8000988:	2b06      	cmp	r3, #6
 800098a:	d9e8      	bls.n	800095e <Seg_Display+0xe>
	}
}
 800098c:	bf00      	nop
 800098e:	bf00      	nop
 8000990:	3710      	adds	r7, #16
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
	...

08000998 <Number_Conversion>:

void Number_Conversion(SevenSeg_TypeDef* sevenSeg, uint8_t number){
 8000998:	b480      	push	{r7}
 800099a:	b085      	sub	sp, #20
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
 80009a0:	460b      	mov	r3, r1
 80009a2:	70fb      	strb	r3, [r7, #3]
	for (uint8_t index = 0; index < NO_OF_SEGMENT; index++){
 80009a4:	2300      	movs	r3, #0
 80009a6:	73fb      	strb	r3, [r7, #15]
 80009a8:	e013      	b.n	80009d2 <Number_Conversion+0x3a>
		sevenSeg->state[index] = (referCode[number] >> index) & 0x01;
 80009aa:	78fb      	ldrb	r3, [r7, #3]
 80009ac:	4a0d      	ldr	r2, [pc, #52]	; (80009e4 <Number_Conversion+0x4c>)
 80009ae:	5cd3      	ldrb	r3, [r2, r3]
 80009b0:	461a      	mov	r2, r3
 80009b2:	7bfb      	ldrb	r3, [r7, #15]
 80009b4:	fa42 f303 	asr.w	r3, r2, r3
 80009b8:	b2da      	uxtb	r2, r3
 80009ba:	7bfb      	ldrb	r3, [r7, #15]
 80009bc:	f002 0201 	and.w	r2, r2, #1
 80009c0:	b2d1      	uxtb	r1, r2
 80009c2:	687a      	ldr	r2, [r7, #4]
 80009c4:	4413      	add	r3, r2
 80009c6:	460a      	mov	r2, r1
 80009c8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	for (uint8_t index = 0; index < NO_OF_SEGMENT; index++){
 80009cc:	7bfb      	ldrb	r3, [r7, #15]
 80009ce:	3301      	adds	r3, #1
 80009d0:	73fb      	strb	r3, [r7, #15]
 80009d2:	7bfb      	ldrb	r3, [r7, #15]
 80009d4:	2b06      	cmp	r3, #6
 80009d6:	d9e8      	bls.n	80009aa <Number_Conversion+0x12>
	}
}
 80009d8:	bf00      	nop
 80009da:	bf00      	nop
 80009dc:	3714      	adds	r7, #20
 80009de:	46bd      	mov	sp, r7
 80009e0:	bc80      	pop	{r7}
 80009e2:	4770      	bx	lr
 80009e4:	20000058 	.word	0x20000058

080009e8 <Button_Init>:
 *
 *
 */
/**************************************************************************************/

Button_TypeDef* Button_Init(GPIO_TypeDef* port, uint16_t pin, STIM_TypeDef* stim){
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b086      	sub	sp, #24
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	60f8      	str	r0, [r7, #12]
 80009f0:	460b      	mov	r3, r1
 80009f2:	607a      	str	r2, [r7, #4]
 80009f4:	817b      	strh	r3, [r7, #10]
	Button_TypeDef* button 	= malloc(sizeof(Button_TypeDef));
 80009f6:	201c      	movs	r0, #28
 80009f8:	f002 fc20 	bl	800323c <malloc>
 80009fc:	4603      	mov	r3, r0
 80009fe:	613b      	str	r3, [r7, #16]
	button->port 				= port;
 8000a00:	693b      	ldr	r3, [r7, #16]
 8000a02:	68fa      	ldr	r2, [r7, #12]
 8000a04:	605a      	str	r2, [r3, #4]
	button->pin 				= pin;
 8000a06:	693b      	ldr	r3, [r7, #16]
 8000a08:	897a      	ldrh	r2, [r7, #10]
 8000a0a:	801a      	strh	r2, [r3, #0]
	button->bStim				= stim;
 8000a0c:	693b      	ldr	r3, [r7, #16]
 8000a0e:	687a      	ldr	r2, [r7, #4]
 8000a10:	609a      	str	r2, [r3, #8]

	for (uint8_t index = 0; index < FILTER_LEVEL; index++){
 8000a12:	2300      	movs	r3, #0
 8000a14:	75fb      	strb	r3, [r7, #23]
 8000a16:	e007      	b.n	8000a28 <Button_Init+0x40>
		button->input[index] = RELEASED;
 8000a18:	7dfb      	ldrb	r3, [r7, #23]
 8000a1a:	693a      	ldr	r2, [r7, #16]
 8000a1c:	4413      	add	r3, r2
 8000a1e:	2201      	movs	r2, #1
 8000a20:	731a      	strb	r2, [r3, #12]
	for (uint8_t index = 0; index < FILTER_LEVEL; index++){
 8000a22:	7dfb      	ldrb	r3, [r7, #23]
 8000a24:	3301      	adds	r3, #1
 8000a26:	75fb      	strb	r3, [r7, #23]
 8000a28:	7dfb      	ldrb	r3, [r7, #23]
 8000a2a:	2b03      	cmp	r3, #3
 8000a2c:	d9f4      	bls.n	8000a18 <Button_Init+0x30>
	}
	button->flag				= 0;
 8000a2e:	693b      	ldr	r3, [r7, #16]
 8000a30:	2200      	movs	r2, #0
 8000a32:	741a      	strb	r2, [r3, #16]
	button->Tap_Mode			= Tap_Mode;
 8000a34:	693b      	ldr	r3, [r7, #16]
 8000a36:	4a05      	ldr	r2, [pc, #20]	; (8000a4c <Button_Init+0x64>)
 8000a38:	615a      	str	r2, [r3, #20]
	button->Hold_Mode			= Hold_Mode;
 8000a3a:	693b      	ldr	r3, [r7, #16]
 8000a3c:	4a04      	ldr	r2, [pc, #16]	; (8000a50 <Button_Init+0x68>)
 8000a3e:	619a      	str	r2, [r3, #24]
	return button;
 8000a40:	693b      	ldr	r3, [r7, #16]
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	3718      	adds	r7, #24
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	08000ad1 	.word	0x08000ad1
 8000a50:	08000b0f 	.word	0x08000b0f

08000a54 <Stability_Check>:

uint8_t Stability_Check(Button_TypeDef* button){
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b084      	sub	sp, #16
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
	for(uint8_t index = 0; index < FILTER_LEVEL - 2; index++)
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	73fb      	strb	r3, [r7, #15]
 8000a60:	e00c      	b.n	8000a7c <Stability_Check+0x28>
		button->input[index] = button->input[index + 1];
 8000a62:	7bfb      	ldrb	r3, [r7, #15]
 8000a64:	1c5a      	adds	r2, r3, #1
 8000a66:	7bfb      	ldrb	r3, [r7, #15]
 8000a68:	6879      	ldr	r1, [r7, #4]
 8000a6a:	440a      	add	r2, r1
 8000a6c:	7b11      	ldrb	r1, [r2, #12]
 8000a6e:	687a      	ldr	r2, [r7, #4]
 8000a70:	4413      	add	r3, r2
 8000a72:	460a      	mov	r2, r1
 8000a74:	731a      	strb	r2, [r3, #12]
	for(uint8_t index = 0; index < FILTER_LEVEL - 2; index++)
 8000a76:	7bfb      	ldrb	r3, [r7, #15]
 8000a78:	3301      	adds	r3, #1
 8000a7a:	73fb      	strb	r3, [r7, #15]
 8000a7c:	7bfb      	ldrb	r3, [r7, #15]
 8000a7e:	2b01      	cmp	r3, #1
 8000a80:	d9ef      	bls.n	8000a62 <Stability_Check+0xe>
	button->input[FILTER_LEVEL - 2]		= 	HAL_GPIO_ReadPin(button->port, button->pin);
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	685a      	ldr	r2, [r3, #4]
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	881b      	ldrh	r3, [r3, #0]
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	4610      	mov	r0, r2
 8000a8e:	f001 fb97 	bl	80021c0 <HAL_GPIO_ReadPin>
 8000a92:	4603      	mov	r3, r0
 8000a94:	461a      	mov	r2, r3
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	739a      	strb	r2, [r3, #14]
	for (uint8_t index = 0; index < FILTER_LEVEL - 2; index++){
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	73bb      	strb	r3, [r7, #14]
 8000a9e:	e00f      	b.n	8000ac0 <Stability_Check+0x6c>
		if (button->input[index] != button->input[index + 1])
 8000aa0:	7bbb      	ldrb	r3, [r7, #14]
 8000aa2:	687a      	ldr	r2, [r7, #4]
 8000aa4:	4413      	add	r3, r2
 8000aa6:	7b1a      	ldrb	r2, [r3, #12]
 8000aa8:	7bbb      	ldrb	r3, [r7, #14]
 8000aaa:	3301      	adds	r3, #1
 8000aac:	6879      	ldr	r1, [r7, #4]
 8000aae:	440b      	add	r3, r1
 8000ab0:	7b1b      	ldrb	r3, [r3, #12]
 8000ab2:	429a      	cmp	r2, r3
 8000ab4:	d001      	beq.n	8000aba <Stability_Check+0x66>
			return 0;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	e006      	b.n	8000ac8 <Stability_Check+0x74>
	for (uint8_t index = 0; index < FILTER_LEVEL - 2; index++){
 8000aba:	7bbb      	ldrb	r3, [r7, #14]
 8000abc:	3301      	adds	r3, #1
 8000abe:	73bb      	strb	r3, [r7, #14]
 8000ac0:	7bbb      	ldrb	r3, [r7, #14]
 8000ac2:	2b01      	cmp	r3, #1
 8000ac4:	d9ec      	bls.n	8000aa0 <Stability_Check+0x4c>
	}
	return 1;
 8000ac6:	2301      	movs	r3, #1
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	3710      	adds	r7, #16
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}

08000ad0 <Tap_Mode>:


void Tap_Mode(Button_TypeDef* button){
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
	if (Stability_Check(button) == 1){
 8000ad8:	6878      	ldr	r0, [r7, #4]
 8000ada:	f7ff ffbb 	bl	8000a54 <Stability_Check>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b01      	cmp	r3, #1
 8000ae2:	d110      	bne.n	8000b06 <Tap_Mode+0x36>
		if (button->input[FILTER_LEVEL - 1] != button->input[FILTER_LEVEL - 2]){
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	7bda      	ldrb	r2, [r3, #15]
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	7b9b      	ldrb	r3, [r3, #14]
 8000aec:	429a      	cmp	r2, r3
 8000aee:	d00a      	beq.n	8000b06 <Tap_Mode+0x36>
			button->input[FILTER_LEVEL - 1] = button->input[FILTER_LEVEL - 2];
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	7b9a      	ldrb	r2, [r3, #14]
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	73da      	strb	r2, [r3, #15]
			if (button->input[FILTER_LEVEL - 2] == PRESSED)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	7b9b      	ldrb	r3, [r3, #14]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d102      	bne.n	8000b06 <Tap_Mode+0x36>
				button->flag = 1;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	2201      	movs	r2, #1
 8000b04:	741a      	strb	r2, [r3, #16]
		}
	}
}
 8000b06:	bf00      	nop
 8000b08:	3708      	adds	r7, #8
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}

08000b0e <Hold_Mode>:
//			}
//		}
//	}
//}

void Hold_Mode(Button_TypeDef* button, uint16_t consecHold){
 8000b0e:	b580      	push	{r7, lr}
 8000b10:	b082      	sub	sp, #8
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	6078      	str	r0, [r7, #4]
 8000b16:	460b      	mov	r3, r1
 8000b18:	807b      	strh	r3, [r7, #2]
	if (Stability_Check(button) == 1){
 8000b1a:	6878      	ldr	r0, [r7, #4]
 8000b1c:	f7ff ff9a 	bl	8000a54 <Stability_Check>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b01      	cmp	r3, #1
 8000b24:	d127      	bne.n	8000b76 <Hold_Mode+0x68>
		if (button->input[FILTER_LEVEL - 1] != button->input[FILTER_LEVEL - 2]){
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	7bda      	ldrb	r2, [r3, #15]
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	7b9b      	ldrb	r3, [r3, #14]
 8000b2e:	429a      	cmp	r2, r3
 8000b30:	d012      	beq.n	8000b58 <Hold_Mode+0x4a>
			button->input[FILTER_LEVEL - 1] = button->input[FILTER_LEVEL - 2];
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	7b9a      	ldrb	r2, [r3, #14]
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	73da      	strb	r2, [r3, #15]
			if (button->input[FILTER_LEVEL - 2] == PRESSED){
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	7b9b      	ldrb	r3, [r3, #14]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d119      	bne.n	8000b76 <Hold_Mode+0x68>
				button->flag = 1;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	2201      	movs	r2, #1
 8000b46:	741a      	strb	r2, [r3, #16]
				button->bStim->Set_Default(button->bStim);
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	689b      	ldr	r3, [r3, #8]
 8000b4c:	689b      	ldr	r3, [r3, #8]
 8000b4e:	687a      	ldr	r2, [r7, #4]
 8000b50:	6892      	ldr	r2, [r2, #8]
 8000b52:	4610      	mov	r0, r2
 8000b54:	4798      	blx	r3
			if (button->bStim->flag  == 1){
				button->input[FILTER_LEVEL - 1] = RELEASED;
			}
		}
	}
}
 8000b56:	e00e      	b.n	8000b76 <Hold_Mode+0x68>
			button->bStim->Timer_Run(button->bStim);
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	689b      	ldr	r3, [r3, #8]
 8000b5c:	691b      	ldr	r3, [r3, #16]
 8000b5e:	687a      	ldr	r2, [r7, #4]
 8000b60:	6892      	ldr	r2, [r2, #8]
 8000b62:	4610      	mov	r0, r2
 8000b64:	4798      	blx	r3
			if (button->bStim->flag  == 1){
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	689b      	ldr	r3, [r3, #8]
 8000b6a:	799b      	ldrb	r3, [r3, #6]
 8000b6c:	2b01      	cmp	r3, #1
 8000b6e:	d102      	bne.n	8000b76 <Hold_Mode+0x68>
				button->input[FILTER_LEVEL - 1] = RELEASED;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	2201      	movs	r2, #1
 8000b74:	73da      	strb	r2, [r3, #15]
}
 8000b76:	bf00      	nop
 8000b78:	3708      	adds	r7, #8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
	...

08000b80 <Traffic_Init>:
/*
 * TRAFFIC LIGHT TYPE DEFINITION
 */
/**************************************************************************************/

Traffic_TypeDef* Traffic_Init(GPIO_TypeDef* port[], uint16_t pin[], STIM_TypeDef* stim){
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b086      	sub	sp, #24
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	60f8      	str	r0, [r7, #12]
 8000b88:	60b9      	str	r1, [r7, #8]
 8000b8a:	607a      	str	r2, [r7, #4]
	Traffic_TypeDef* traffic 	= malloc(sizeof(Traffic_TypeDef));
 8000b8c:	2034      	movs	r0, #52	; 0x34
 8000b8e:	f002 fb55 	bl	800323c <malloc>
 8000b92:	4603      	mov	r3, r0
 8000b94:	617b      	str	r3, [r7, #20]
	traffic->red 				= Led_Init(port[0], pin[0], DISABLE);
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	6818      	ldr	r0, [r3, #0]
 8000b9a:	68bb      	ldr	r3, [r7, #8]
 8000b9c:	881b      	ldrh	r3, [r3, #0]
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	f7ff fc99 	bl	80004d8 <Led_Init>
 8000ba6:	4602      	mov	r2, r0
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	601a      	str	r2, [r3, #0]
	traffic->yellow 			= Led_Init(port[1], pin[1], DISABLE);
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	3304      	adds	r3, #4
 8000bb0:	6818      	ldr	r0, [r3, #0]
 8000bb2:	68bb      	ldr	r3, [r7, #8]
 8000bb4:	3302      	adds	r3, #2
 8000bb6:	881b      	ldrh	r3, [r3, #0]
 8000bb8:	2201      	movs	r2, #1
 8000bba:	4619      	mov	r1, r3
 8000bbc:	f7ff fc8c 	bl	80004d8 <Led_Init>
 8000bc0:	4602      	mov	r2, r0
 8000bc2:	697b      	ldr	r3, [r7, #20]
 8000bc4:	605a      	str	r2, [r3, #4]
	traffic->green 				= Led_Init(port[2], pin[2], DISABLE);
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	3308      	adds	r3, #8
 8000bca:	6818      	ldr	r0, [r3, #0]
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	3304      	adds	r3, #4
 8000bd0:	881b      	ldrh	r3, [r3, #0]
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	f7ff fc7f 	bl	80004d8 <Led_Init>
 8000bda:	4602      	mov	r2, r0
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	609a      	str	r2, [r3, #8]
	traffic->state				= INIT;
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	2200      	movs	r2, #0
 8000be4:	741a      	strb	r2, [r3, #16]
	traffic->stim 				= stim;
 8000be6:	697b      	ldr	r3, [r7, #20]
 8000be8:	687a      	ldr	r2, [r7, #4]
 8000bea:	60da      	str	r2, [r3, #12]

	traffic->Shut_down			= All_Off;
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	4a0e      	ldr	r2, [pc, #56]	; (8000c28 <Traffic_Init+0xa8>)
 8000bf0:	619a      	str	r2, [r3, #24]
	traffic->Freeze_Green		= Only_Green;
 8000bf2:	697b      	ldr	r3, [r7, #20]
 8000bf4:	4a0d      	ldr	r2, [pc, #52]	; (8000c2c <Traffic_Init+0xac>)
 8000bf6:	625a      	str	r2, [r3, #36]	; 0x24
	traffic->Freeze_Red			= Only_Red;
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	4a0d      	ldr	r2, [pc, #52]	; (8000c30 <Traffic_Init+0xb0>)
 8000bfc:	61da      	str	r2, [r3, #28]
	traffic->Freeze_Yellow		= Only_Yellow;
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	4a0c      	ldr	r2, [pc, #48]	; (8000c34 <Traffic_Init+0xb4>)
 8000c02:	621a      	str	r2, [r3, #32]
	traffic->Toggle_Green		= Toggle_Green;
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	4a0c      	ldr	r2, [pc, #48]	; (8000c38 <Traffic_Init+0xb8>)
 8000c08:	631a      	str	r2, [r3, #48]	; 0x30
	traffic->Toggle_Red			= Toggle_Red;
 8000c0a:	697b      	ldr	r3, [r7, #20]
 8000c0c:	4a0b      	ldr	r2, [pc, #44]	; (8000c3c <Traffic_Init+0xbc>)
 8000c0e:	629a      	str	r2, [r3, #40]	; 0x28
	traffic->Toggle_Yellow		= Toggle_Yellow;
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	4a0b      	ldr	r2, [pc, #44]	; (8000c40 <Traffic_Init+0xc0>)
 8000c14:	62da      	str	r2, [r3, #44]	; 0x2c
	traffic->Normal_Run 		= Traffic_FSM;
 8000c16:	697b      	ldr	r3, [r7, #20]
 8000c18:	4a0a      	ldr	r2, [pc, #40]	; (8000c44 <Traffic_Init+0xc4>)
 8000c1a:	615a      	str	r2, [r3, #20]
	return traffic;
 8000c1c:	697b      	ldr	r3, [r7, #20]
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3718      	adds	r7, #24
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	08000dad 	.word	0x08000dad
 8000c2c:	08000e5b 	.word	0x08000e5b
 8000c30:	08000de7 	.word	0x08000de7
 8000c34:	08000e21 	.word	0x08000e21
 8000c38:	08000f09 	.word	0x08000f09
 8000c3c:	08000e95 	.word	0x08000e95
 8000c40:	08000ecf 	.word	0x08000ecf
 8000c44:	08000c49 	.word	0x08000c49

08000c48 <Traffic_FSM>:

void Traffic_FSM(Traffic_TypeDef* traffic, Clock_TypeDef* clock, uint16_t r_Delay, uint16_t y_Delay, uint16_t g_Delay){
 8000c48:	b590      	push	{r4, r7, lr}
 8000c4a:	b085      	sub	sp, #20
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	60f8      	str	r0, [r7, #12]
 8000c50:	60b9      	str	r1, [r7, #8]
 8000c52:	4611      	mov	r1, r2
 8000c54:	461a      	mov	r2, r3
 8000c56:	460b      	mov	r3, r1
 8000c58:	80fb      	strh	r3, [r7, #6]
 8000c5a:	4613      	mov	r3, r2
 8000c5c:	80bb      	strh	r3, [r7, #4]
	switch(traffic->state){
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	7c1b      	ldrb	r3, [r3, #16]
 8000c62:	2b04      	cmp	r3, #4
 8000c64:	f200 8094 	bhi.w	8000d90 <Traffic_FSM+0x148>
 8000c68:	a201      	add	r2, pc, #4	; (adr r2, 8000c70 <Traffic_FSM+0x28>)
 8000c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c6e:	bf00      	nop
 8000c70:	08000c85 	.word	0x08000c85
 8000c74:	08000ca5 	.word	0x08000ca5
 8000c78:	08000ce9 	.word	0x08000ce9
 8000c7c:	08000d2d 	.word	0x08000d2d
 8000c80:	08000d71 	.word	0x08000d71
		case INIT:
			traffic->Shut_down(traffic);
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	699b      	ldr	r3, [r3, #24]
 8000c88:	68f8      	ldr	r0, [r7, #12]
 8000c8a:	4798      	blx	r3

			traffic->state = AUTO_RED;
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	2201      	movs	r2, #1
 8000c90:	741a      	strb	r2, [r3, #16]
			traffic->stim->Set_Manual(traffic->stim, r_Delay);
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	68db      	ldr	r3, [r3, #12]
 8000c96:	68db      	ldr	r3, [r3, #12]
 8000c98:	68fa      	ldr	r2, [r7, #12]
 8000c9a:	68d2      	ldr	r2, [r2, #12]
 8000c9c:	88f9      	ldrh	r1, [r7, #6]
 8000c9e:	4610      	mov	r0, r2
 8000ca0:	4798      	blx	r3
			break;
 8000ca2:	e07c      	b.n	8000d9e <Traffic_FSM+0x156>
		case AUTO_RED:
			traffic->Freeze_Red(traffic);
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	69db      	ldr	r3, [r3, #28]
 8000ca8:	68f8      	ldr	r0, [r7, #12]
 8000caa:	4798      	blx	r3

			if (traffic->stim->flag == 1){
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	68db      	ldr	r3, [r3, #12]
 8000cb0:	799b      	ldrb	r3, [r3, #6]
 8000cb2:	2b01      	cmp	r3, #1
 8000cb4:	d16e      	bne.n	8000d94 <Traffic_FSM+0x14c>
				traffic->state = AUTO_GREEN;
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	2203      	movs	r2, #3
 8000cba:	741a      	strb	r2, [r3, #16]
				traffic->stim->Set_Manual(traffic->stim, g_Delay);
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	68db      	ldr	r3, [r3, #12]
 8000cc0:	68db      	ldr	r3, [r3, #12]
 8000cc2:	68fa      	ldr	r2, [r7, #12]
 8000cc4:	68d2      	ldr	r2, [r2, #12]
 8000cc6:	8c39      	ldrh	r1, [r7, #32]
 8000cc8:	4610      	mov	r0, r2
 8000cca:	4798      	blx	r3
				clock->Modify(clock, 0, 0, g_Delay/1000);
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	68dc      	ldr	r4, [r3, #12]
 8000cd0:	8c3b      	ldrh	r3, [r7, #32]
 8000cd2:	4a35      	ldr	r2, [pc, #212]	; (8000da8 <Traffic_FSM+0x160>)
 8000cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8000cd8:	099b      	lsrs	r3, r3, #6
 8000cda:	b29b      	uxth	r3, r3
 8000cdc:	b2db      	uxtb	r3, r3
 8000cde:	2200      	movs	r2, #0
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	68b8      	ldr	r0, [r7, #8]
 8000ce4:	47a0      	blx	r4
			}
			break;
 8000ce6:	e055      	b.n	8000d94 <Traffic_FSM+0x14c>
		case AUTO_YELLOW:
			traffic->Freeze_Yellow(traffic);
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	6a1b      	ldr	r3, [r3, #32]
 8000cec:	68f8      	ldr	r0, [r7, #12]
 8000cee:	4798      	blx	r3

			if (traffic->stim->flag == 1){
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	68db      	ldr	r3, [r3, #12]
 8000cf4:	799b      	ldrb	r3, [r3, #6]
 8000cf6:	2b01      	cmp	r3, #1
 8000cf8:	d14e      	bne.n	8000d98 <Traffic_FSM+0x150>
				traffic->state = AUTO_RED;
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	741a      	strb	r2, [r3, #16]
				traffic->stim->Set_Manual(traffic->stim, r_Delay);
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	68db      	ldr	r3, [r3, #12]
 8000d04:	68db      	ldr	r3, [r3, #12]
 8000d06:	68fa      	ldr	r2, [r7, #12]
 8000d08:	68d2      	ldr	r2, [r2, #12]
 8000d0a:	88f9      	ldrh	r1, [r7, #6]
 8000d0c:	4610      	mov	r0, r2
 8000d0e:	4798      	blx	r3
				clock->Modify(clock, 0, 0, r_Delay/1000);
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	68dc      	ldr	r4, [r3, #12]
 8000d14:	88fb      	ldrh	r3, [r7, #6]
 8000d16:	4a24      	ldr	r2, [pc, #144]	; (8000da8 <Traffic_FSM+0x160>)
 8000d18:	fba2 2303 	umull	r2, r3, r2, r3
 8000d1c:	099b      	lsrs	r3, r3, #6
 8000d1e:	b29b      	uxth	r3, r3
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	2200      	movs	r2, #0
 8000d24:	2100      	movs	r1, #0
 8000d26:	68b8      	ldr	r0, [r7, #8]
 8000d28:	47a0      	blx	r4
			}
			break;
 8000d2a:	e035      	b.n	8000d98 <Traffic_FSM+0x150>
		case AUTO_GREEN:
			traffic->Freeze_Green(traffic);
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d30:	68f8      	ldr	r0, [r7, #12]
 8000d32:	4798      	blx	r3

			if (traffic->stim->flag == 1){
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	68db      	ldr	r3, [r3, #12]
 8000d38:	799b      	ldrb	r3, [r3, #6]
 8000d3a:	2b01      	cmp	r3, #1
 8000d3c:	d12e      	bne.n	8000d9c <Traffic_FSM+0x154>
				traffic->state = AUTO_YELLOW;
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	2202      	movs	r2, #2
 8000d42:	741a      	strb	r2, [r3, #16]
				traffic->stim->Set_Manual(traffic->stim, y_Delay);
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	68db      	ldr	r3, [r3, #12]
 8000d48:	68db      	ldr	r3, [r3, #12]
 8000d4a:	68fa      	ldr	r2, [r7, #12]
 8000d4c:	68d2      	ldr	r2, [r2, #12]
 8000d4e:	88b9      	ldrh	r1, [r7, #4]
 8000d50:	4610      	mov	r0, r2
 8000d52:	4798      	blx	r3
				clock->Modify(clock, 0, 0, y_Delay/1000);
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	68dc      	ldr	r4, [r3, #12]
 8000d58:	88bb      	ldrh	r3, [r7, #4]
 8000d5a:	4a13      	ldr	r2, [pc, #76]	; (8000da8 <Traffic_FSM+0x160>)
 8000d5c:	fba2 2303 	umull	r2, r3, r2, r3
 8000d60:	099b      	lsrs	r3, r3, #6
 8000d62:	b29b      	uxth	r3, r3
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	2200      	movs	r2, #0
 8000d68:	2100      	movs	r1, #0
 8000d6a:	68b8      	ldr	r0, [r7, #8]
 8000d6c:	47a0      	blx	r4
			}
			break;
 8000d6e:	e015      	b.n	8000d9c <Traffic_FSM+0x154>
		case EXIT:
			traffic->Shut_down(traffic);
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	699b      	ldr	r3, [r3, #24]
 8000d74:	68f8      	ldr	r0, [r7, #12]
 8000d76:	4798      	blx	r3

			traffic->state = AUTO_GREEN;
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	2203      	movs	r2, #3
 8000d7c:	741a      	strb	r2, [r3, #16]
			traffic->stim->Set_Manual(traffic->stim, g_Delay);
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	68db      	ldr	r3, [r3, #12]
 8000d82:	68db      	ldr	r3, [r3, #12]
 8000d84:	68fa      	ldr	r2, [r7, #12]
 8000d86:	68d2      	ldr	r2, [r2, #12]
 8000d88:	8c39      	ldrh	r1, [r7, #32]
 8000d8a:	4610      	mov	r0, r2
 8000d8c:	4798      	blx	r3
			break;
 8000d8e:	e006      	b.n	8000d9e <Traffic_FSM+0x156>
		default:
			break;
 8000d90:	bf00      	nop
 8000d92:	e004      	b.n	8000d9e <Traffic_FSM+0x156>
			break;
 8000d94:	bf00      	nop
 8000d96:	e002      	b.n	8000d9e <Traffic_FSM+0x156>
			break;
 8000d98:	bf00      	nop
 8000d9a:	e000      	b.n	8000d9e <Traffic_FSM+0x156>
			break;
 8000d9c:	bf00      	nop
	}
}
 8000d9e:	bf00      	nop
 8000da0:	3714      	adds	r7, #20
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd90      	pop	{r4, r7, pc}
 8000da6:	bf00      	nop
 8000da8:	10624dd3 	.word	0x10624dd3

08000dac <All_Off>:

void All_Off(Traffic_TypeDef* traffic) {
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
	traffic->red->Off(traffic->red);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	695b      	ldr	r3, [r3, #20]
 8000dba:	687a      	ldr	r2, [r7, #4]
 8000dbc:	6812      	ldr	r2, [r2, #0]
 8000dbe:	4610      	mov	r0, r2
 8000dc0:	4798      	blx	r3
	traffic->yellow->Off(traffic->yellow);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	695b      	ldr	r3, [r3, #20]
 8000dc8:	687a      	ldr	r2, [r7, #4]
 8000dca:	6852      	ldr	r2, [r2, #4]
 8000dcc:	4610      	mov	r0, r2
 8000dce:	4798      	blx	r3
	traffic->green->Off(traffic->green);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	689b      	ldr	r3, [r3, #8]
 8000dd4:	695b      	ldr	r3, [r3, #20]
 8000dd6:	687a      	ldr	r2, [r7, #4]
 8000dd8:	6892      	ldr	r2, [r2, #8]
 8000dda:	4610      	mov	r0, r2
 8000ddc:	4798      	blx	r3
}
 8000dde:	bf00      	nop
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}

08000de6 <Only_Red>:
void Only_Red(Traffic_TypeDef* traffic) {
 8000de6:	b580      	push	{r7, lr}
 8000de8:	b082      	sub	sp, #8
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	6078      	str	r0, [r7, #4]
	traffic->red->On(traffic->red);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	691b      	ldr	r3, [r3, #16]
 8000df4:	687a      	ldr	r2, [r7, #4]
 8000df6:	6812      	ldr	r2, [r2, #0]
 8000df8:	4610      	mov	r0, r2
 8000dfa:	4798      	blx	r3
	traffic->yellow->Off(traffic->yellow);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	695b      	ldr	r3, [r3, #20]
 8000e02:	687a      	ldr	r2, [r7, #4]
 8000e04:	6852      	ldr	r2, [r2, #4]
 8000e06:	4610      	mov	r0, r2
 8000e08:	4798      	blx	r3
	traffic->green->Off(traffic->green);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	689b      	ldr	r3, [r3, #8]
 8000e0e:	695b      	ldr	r3, [r3, #20]
 8000e10:	687a      	ldr	r2, [r7, #4]
 8000e12:	6892      	ldr	r2, [r2, #8]
 8000e14:	4610      	mov	r0, r2
 8000e16:	4798      	blx	r3
}
 8000e18:	bf00      	nop
 8000e1a:	3708      	adds	r7, #8
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <Only_Yellow>:
void Only_Yellow(Traffic_TypeDef* traffic) {
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
	traffic->red->Off(traffic->red);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	695b      	ldr	r3, [r3, #20]
 8000e2e:	687a      	ldr	r2, [r7, #4]
 8000e30:	6812      	ldr	r2, [r2, #0]
 8000e32:	4610      	mov	r0, r2
 8000e34:	4798      	blx	r3
	traffic->yellow->On(traffic->yellow);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	691b      	ldr	r3, [r3, #16]
 8000e3c:	687a      	ldr	r2, [r7, #4]
 8000e3e:	6852      	ldr	r2, [r2, #4]
 8000e40:	4610      	mov	r0, r2
 8000e42:	4798      	blx	r3
	traffic->green->Off(traffic->green);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	689b      	ldr	r3, [r3, #8]
 8000e48:	695b      	ldr	r3, [r3, #20]
 8000e4a:	687a      	ldr	r2, [r7, #4]
 8000e4c:	6892      	ldr	r2, [r2, #8]
 8000e4e:	4610      	mov	r0, r2
 8000e50:	4798      	blx	r3
}
 8000e52:	bf00      	nop
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}

08000e5a <Only_Green>:
void Only_Green(Traffic_TypeDef* traffic) {
 8000e5a:	b580      	push	{r7, lr}
 8000e5c:	b082      	sub	sp, #8
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	6078      	str	r0, [r7, #4]
	traffic->red->Off(traffic->red);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	695b      	ldr	r3, [r3, #20]
 8000e68:	687a      	ldr	r2, [r7, #4]
 8000e6a:	6812      	ldr	r2, [r2, #0]
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	4798      	blx	r3
	traffic->yellow->Off(traffic->yellow);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	695b      	ldr	r3, [r3, #20]
 8000e76:	687a      	ldr	r2, [r7, #4]
 8000e78:	6852      	ldr	r2, [r2, #4]
 8000e7a:	4610      	mov	r0, r2
 8000e7c:	4798      	blx	r3
	traffic->green->On(traffic->green);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	689b      	ldr	r3, [r3, #8]
 8000e82:	691b      	ldr	r3, [r3, #16]
 8000e84:	687a      	ldr	r2, [r7, #4]
 8000e86:	6892      	ldr	r2, [r2, #8]
 8000e88:	4610      	mov	r0, r2
 8000e8a:	4798      	blx	r3
}
 8000e8c:	bf00      	nop
 8000e8e:	3708      	adds	r7, #8
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}

08000e94 <Toggle_Red>:
void Toggle_Red(Traffic_TypeDef* traffic){
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
	traffic->red->Toggle(traffic->red);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	68db      	ldr	r3, [r3, #12]
 8000ea2:	687a      	ldr	r2, [r7, #4]
 8000ea4:	6812      	ldr	r2, [r2, #0]
 8000ea6:	4610      	mov	r0, r2
 8000ea8:	4798      	blx	r3
	traffic->yellow->Off(traffic->yellow);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	695b      	ldr	r3, [r3, #20]
 8000eb0:	687a      	ldr	r2, [r7, #4]
 8000eb2:	6852      	ldr	r2, [r2, #4]
 8000eb4:	4610      	mov	r0, r2
 8000eb6:	4798      	blx	r3
	traffic->green->Off(traffic->green);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	689b      	ldr	r3, [r3, #8]
 8000ebc:	695b      	ldr	r3, [r3, #20]
 8000ebe:	687a      	ldr	r2, [r7, #4]
 8000ec0:	6892      	ldr	r2, [r2, #8]
 8000ec2:	4610      	mov	r0, r2
 8000ec4:	4798      	blx	r3
}
 8000ec6:	bf00      	nop
 8000ec8:	3708      	adds	r7, #8
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}

08000ece <Toggle_Yellow>:
void Toggle_Yellow(Traffic_TypeDef* traffic){
 8000ece:	b580      	push	{r7, lr}
 8000ed0:	b082      	sub	sp, #8
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	6078      	str	r0, [r7, #4]
	traffic->red->Off(traffic->red);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	695b      	ldr	r3, [r3, #20]
 8000edc:	687a      	ldr	r2, [r7, #4]
 8000ede:	6812      	ldr	r2, [r2, #0]
 8000ee0:	4610      	mov	r0, r2
 8000ee2:	4798      	blx	r3
	traffic->yellow->Toggle(traffic->yellow);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	68db      	ldr	r3, [r3, #12]
 8000eea:	687a      	ldr	r2, [r7, #4]
 8000eec:	6852      	ldr	r2, [r2, #4]
 8000eee:	4610      	mov	r0, r2
 8000ef0:	4798      	blx	r3
	traffic->green->Off(traffic->green);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	689b      	ldr	r3, [r3, #8]
 8000ef6:	695b      	ldr	r3, [r3, #20]
 8000ef8:	687a      	ldr	r2, [r7, #4]
 8000efa:	6892      	ldr	r2, [r2, #8]
 8000efc:	4610      	mov	r0, r2
 8000efe:	4798      	blx	r3
}
 8000f00:	bf00      	nop
 8000f02:	3708      	adds	r7, #8
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}

08000f08 <Toggle_Green>:
void Toggle_Green(Traffic_TypeDef* traffic){
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
	traffic->red->Off(traffic->red);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	695b      	ldr	r3, [r3, #20]
 8000f16:	687a      	ldr	r2, [r7, #4]
 8000f18:	6812      	ldr	r2, [r2, #0]
 8000f1a:	4610      	mov	r0, r2
 8000f1c:	4798      	blx	r3
	traffic->yellow->Off(traffic->yellow);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	695b      	ldr	r3, [r3, #20]
 8000f24:	687a      	ldr	r2, [r7, #4]
 8000f26:	6852      	ldr	r2, [r2, #4]
 8000f28:	4610      	mov	r0, r2
 8000f2a:	4798      	blx	r3
	traffic->green->Toggle(traffic->green);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	689b      	ldr	r3, [r3, #8]
 8000f30:	68db      	ldr	r3, [r3, #12]
 8000f32:	687a      	ldr	r2, [r7, #4]
 8000f34:	6892      	ldr	r2, [r2, #8]
 8000f36:	4610      	mov	r0, r2
 8000f38:	4798      	blx	r3
}
 8000f3a:	bf00      	nop
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
	...

08000f44 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b086      	sub	sp, #24
 8000f48:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f4a:	f107 0308 	add.w	r3, r7, #8
 8000f4e:	2200      	movs	r2, #0
 8000f50:	601a      	str	r2, [r3, #0]
 8000f52:	605a      	str	r2, [r3, #4]
 8000f54:	609a      	str	r2, [r3, #8]
 8000f56:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f58:	4b29      	ldr	r3, [pc, #164]	; (8001000 <MX_GPIO_Init+0xbc>)
 8000f5a:	699b      	ldr	r3, [r3, #24]
 8000f5c:	4a28      	ldr	r2, [pc, #160]	; (8001000 <MX_GPIO_Init+0xbc>)
 8000f5e:	f043 0304 	orr.w	r3, r3, #4
 8000f62:	6193      	str	r3, [r2, #24]
 8000f64:	4b26      	ldr	r3, [pc, #152]	; (8001000 <MX_GPIO_Init+0xbc>)
 8000f66:	699b      	ldr	r3, [r3, #24]
 8000f68:	f003 0304 	and.w	r3, r3, #4
 8000f6c:	607b      	str	r3, [r7, #4]
 8000f6e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f70:	4b23      	ldr	r3, [pc, #140]	; (8001000 <MX_GPIO_Init+0xbc>)
 8000f72:	699b      	ldr	r3, [r3, #24]
 8000f74:	4a22      	ldr	r2, [pc, #136]	; (8001000 <MX_GPIO_Init+0xbc>)
 8000f76:	f043 0308 	orr.w	r3, r3, #8
 8000f7a:	6193      	str	r3, [r2, #24]
 8000f7c:	4b20      	ldr	r3, [pc, #128]	; (8001000 <MX_GPIO_Init+0xbc>)
 8000f7e:	699b      	ldr	r3, [r3, #24]
 8000f80:	f003 0308 	and.w	r3, r3, #8
 8000f84:	603b      	str	r3, [r7, #0]
 8000f86:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin, GPIO_PIN_RESET);
 8000f88:	2200      	movs	r2, #0
 8000f8a:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8000f8e:	481d      	ldr	r0, [pc, #116]	; (8001004 <MX_GPIO_Init+0xc0>)
 8000f90:	f001 f92d 	bl	80021ee <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG0_Pin|SEG1_Pin|SEG2_Pin|V_RED_Pin
 8000f94:	2200      	movs	r2, #0
 8000f96:	f64f 417f 	movw	r1, #64639	; 0xfc7f
 8000f9a:	481b      	ldr	r0, [pc, #108]	; (8001008 <MX_GPIO_Init+0xc4>)
 8000f9c:	f001 f927 	bl	80021ee <HAL_GPIO_WritePin>
                          |V_YEL_Pin|V_GRE_Pin|H_RED_Pin|H_YEL_Pin
                          |H_GRE_Pin|SEG3_Pin|SEG4_Pin|SEG5_Pin
                          |SEG6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin;
 8000fa0:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000fa4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000faa:	2300      	movs	r3, #0
 8000fac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fae:	2302      	movs	r3, #2
 8000fb0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb2:	f107 0308 	add.w	r3, r7, #8
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4812      	ldr	r0, [pc, #72]	; (8001004 <MX_GPIO_Init+0xc0>)
 8000fba:	f000 ff85 	bl	8001ec8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin|V_RED_Pin
 8000fbe:	f64f 437f 	movw	r3, #64639	; 0xfc7f
 8000fc2:	60bb      	str	r3, [r7, #8]
                          |V_YEL_Pin|V_GRE_Pin|H_RED_Pin|H_YEL_Pin
                          |H_GRE_Pin|SEG3_Pin|SEG4_Pin|SEG5_Pin
                          |SEG6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fcc:	2302      	movs	r3, #2
 8000fce:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd0:	f107 0308 	add.w	r3, r7, #8
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	480c      	ldr	r0, [pc, #48]	; (8001008 <MX_GPIO_Init+0xc4>)
 8000fd8:	f000 ff76 	bl	8001ec8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = MODE_Pin|TIME_Pin|SET_Pin;
 8000fdc:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000fe0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fea:	f107 0308 	add.w	r3, r7, #8
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4804      	ldr	r0, [pc, #16]	; (8001004 <MX_GPIO_Init+0xc0>)
 8000ff2:	f000 ff69 	bl	8001ec8 <HAL_GPIO_Init>

}
 8000ff6:	bf00      	nop
 8000ff8:	3718      	adds	r7, #24
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	40021000 	.word	0x40021000
 8001004:	40010800 	.word	0x40010800
 8001008:	40010c00 	.word	0x40010c00

0800100c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001010:	f000 fdea 	bl	8001be8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001014:	f000 f832 	bl	800107c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001018:	f7ff ff94 	bl	8000f44 <MX_GPIO_Init>
  MX_TIM2_Init();
 800101c:	f000 fbb0 	bl	8001780 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001020:	4811      	ldr	r0, [pc, #68]	; (8001068 <main+0x5c>)
 8001022:	f001 fd4d 	bl	8002ac0 <HAL_TIM_Base_Start_IT>

  Software_Timer_Init();
 8001026:	f000 fac5 	bl	80015b4 <Software_Timer_Init>
  Intersection_Init();
 800102a:	f000 fc65 	bl	80018f8 <Intersection_Init>
  Intersection_7SEG_Init();
 800102e:	f7ff f88d 	bl	800014c <Intersection_7SEG_Init>
  Traffic_Button_Init();
 8001032:	f7ff f98d 	bl	8000350 <Traffic_Button_Init>

  hTrafficLight->stim->Set_Manual(hTrafficLight->stim, H_RED_TIME);
 8001036:	4b0d      	ldr	r3, [pc, #52]	; (800106c <main+0x60>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	68db      	ldr	r3, [r3, #12]
 800103e:	4a0b      	ldr	r2, [pc, #44]	; (800106c <main+0x60>)
 8001040:	6812      	ldr	r2, [r2, #0]
 8001042:	68d2      	ldr	r2, [r2, #12]
 8001044:	490a      	ldr	r1, [pc, #40]	; (8001070 <main+0x64>)
 8001046:	8809      	ldrh	r1, [r1, #0]
 8001048:	4610      	mov	r0, r2
 800104a:	4798      	blx	r3
  vTrafficLight->stim->Set_Manual(vTrafficLight->stim, V_GREEN_TIME);
 800104c:	4b09      	ldr	r3, [pc, #36]	; (8001074 <main+0x68>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	68db      	ldr	r3, [r3, #12]
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	4a07      	ldr	r2, [pc, #28]	; (8001074 <main+0x68>)
 8001056:	6812      	ldr	r2, [r2, #0]
 8001058:	68d2      	ldr	r2, [r2, #12]
 800105a:	4907      	ldr	r1, [pc, #28]	; (8001078 <main+0x6c>)
 800105c:	8809      	ldrh	r1, [r1, #0]
 800105e:	4610      	mov	r0, r2
 8001060:	4798      	blx	r3
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//	  Intersection_Normal_Mode();
	  Mode_Processing();
 8001062:	f000 f8db 	bl	800121c <Mode_Processing>
 8001066:	e7fc      	b.n	8001062 <main+0x56>
 8001068:	20000158 	.word	0x20000158
 800106c:	200001a0 	.word	0x200001a0
 8001070:	200001b8 	.word	0x200001b8
 8001074:	200001a4 	.word	0x200001a4
 8001078:	200001b4 	.word	0x200001b4

0800107c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b090      	sub	sp, #64	; 0x40
 8001080:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001082:	f107 0318 	add.w	r3, r7, #24
 8001086:	2228      	movs	r2, #40	; 0x28
 8001088:	2100      	movs	r1, #0
 800108a:	4618      	mov	r0, r3
 800108c:	f002 f8de 	bl	800324c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001090:	1d3b      	adds	r3, r7, #4
 8001092:	2200      	movs	r2, #0
 8001094:	601a      	str	r2, [r3, #0]
 8001096:	605a      	str	r2, [r3, #4]
 8001098:	609a      	str	r2, [r3, #8]
 800109a:	60da      	str	r2, [r3, #12]
 800109c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800109e:	2302      	movs	r3, #2
 80010a0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010a2:	2301      	movs	r3, #1
 80010a4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010a6:	2310      	movs	r3, #16
 80010a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80010aa:	2300      	movs	r3, #0
 80010ac:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010ae:	f107 0318 	add.w	r3, r7, #24
 80010b2:	4618      	mov	r0, r3
 80010b4:	f001 f8cc 	bl	8002250 <HAL_RCC_OscConfig>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80010be:	f000 f841 	bl	8001144 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010c2:	230f      	movs	r3, #15
 80010c4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80010c6:	2300      	movs	r3, #0
 80010c8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010ca:	2300      	movs	r3, #0
 80010cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010ce:	2300      	movs	r3, #0
 80010d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010d2:	2300      	movs	r3, #0
 80010d4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010d6:	1d3b      	adds	r3, r7, #4
 80010d8:	2100      	movs	r1, #0
 80010da:	4618      	mov	r0, r3
 80010dc:	f001 fb3a 	bl	8002754 <HAL_RCC_ClockConfig>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80010e6:	f000 f82d 	bl	8001144 <Error_Handler>
  }
}
 80010ea:	bf00      	nop
 80010ec:	3740      	adds	r7, #64	; 0x40
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
	...

080010f4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2){
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001104:	d115      	bne.n	8001132 <HAL_TIM_PeriodElapsedCallback+0x3e>
		hTrafficLight->stim->Timer_Run(hTrafficLight->stim);
 8001106:	4b0d      	ldr	r3, [pc, #52]	; (800113c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	691b      	ldr	r3, [r3, #16]
 800110e:	4a0b      	ldr	r2, [pc, #44]	; (800113c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001110:	6812      	ldr	r2, [r2, #0]
 8001112:	68d2      	ldr	r2, [r2, #12]
 8001114:	4610      	mov	r0, r2
 8001116:	4798      	blx	r3
		vTrafficLight->stim->Timer_Run(vTrafficLight->stim);
 8001118:	4b09      	ldr	r3, [pc, #36]	; (8001140 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	68db      	ldr	r3, [r3, #12]
 800111e:	691b      	ldr	r3, [r3, #16]
 8001120:	4a07      	ldr	r2, [pc, #28]	; (8001140 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001122:	6812      	ldr	r2, [r2, #0]
 8001124:	68d2      	ldr	r2, [r2, #12]
 8001126:	4610      	mov	r0, r2
 8001128:	4798      	blx	r3
		Button_Scan();
 800112a:	f7ff f941 	bl	80003b0 <Button_Scan>
		Software_Timer_Run();
 800112e:	f000 fa77 	bl	8001620 <Software_Timer_Run>
	}
}
 8001132:	bf00      	nop
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	200001a0 	.word	0x200001a0
 8001140:	200001a4 	.word	0x200001a4

08001144 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001148:	b672      	cpsid	i
}
 800114a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800114c:	e7fe      	b.n	800114c <Error_Handler+0x8>
	...

08001150 <ModeButton_Pressed>:

#include "mode.h"

MODE_STATE trafficMode = NORMAL;

void ModeButton_Pressed(void){
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
	if (buttonMode->flag == 1){
 8001154:	4b0e      	ldr	r3, [pc, #56]	; (8001190 <ModeButton_Pressed+0x40>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	7c1b      	ldrb	r3, [r3, #16]
 800115a:	2b01      	cmp	r3, #1
 800115c:	d113      	bne.n	8001186 <ModeButton_Pressed+0x36>
		buttonMode->flag = 0;
 800115e:	4b0c      	ldr	r3, [pc, #48]	; (8001190 <ModeButton_Pressed+0x40>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	2200      	movs	r2, #0
 8001164:	741a      	strb	r2, [r3, #16]
		trafficMode = (trafficMode + 1) % NO_OF_MODE;
 8001166:	4b0b      	ldr	r3, [pc, #44]	; (8001194 <ModeButton_Pressed+0x44>)
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	1c5a      	adds	r2, r3, #1
 800116c:	4b0a      	ldr	r3, [pc, #40]	; (8001198 <ModeButton_Pressed+0x48>)
 800116e:	fb83 1302 	smull	r1, r3, r3, r2
 8001172:	1059      	asrs	r1, r3, #1
 8001174:	17d3      	asrs	r3, r2, #31
 8001176:	1ac9      	subs	r1, r1, r3
 8001178:	460b      	mov	r3, r1
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	440b      	add	r3, r1
 800117e:	1ad1      	subs	r1, r2, r3
 8001180:	b2ca      	uxtb	r2, r1
 8001182:	4b04      	ldr	r3, [pc, #16]	; (8001194 <ModeButton_Pressed+0x44>)
 8001184:	701a      	strb	r2, [r3, #0]
	}
}
 8001186:	bf00      	nop
 8001188:	46bd      	mov	sp, r7
 800118a:	bc80      	pop	{r7}
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	20000134 	.word	0x20000134
 8001194:	20000140 	.word	0x20000140
 8001198:	66666667 	.word	0x66666667

0800119c <Delay_Flush>:

static uint16_t newRedTime 		= 0;
static uint16_t newYellowTime 	= 0;
static uint16_t newGreenTime 	= 0;

void Delay_Flush(void){
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
	newRedTime 		= 0;
 80011a0:	4b06      	ldr	r3, [pc, #24]	; (80011bc <Delay_Flush+0x20>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	801a      	strh	r2, [r3, #0]
	newYellowTime 	= 0;
 80011a6:	4b06      	ldr	r3, [pc, #24]	; (80011c0 <Delay_Flush+0x24>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	801a      	strh	r2, [r3, #0]
	newGreenTime 	= 0;
 80011ac:	4b05      	ldr	r3, [pc, #20]	; (80011c4 <Delay_Flush+0x28>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	801a      	strh	r2, [r3, #0]
}
 80011b2:	bf00      	nop
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bc80      	pop	{r7}
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	20000142 	.word	0x20000142
 80011c0:	20000144 	.word	0x20000144
 80011c4:	20000146 	.word	0x20000146

080011c8 <LightTime_Modify>:

uint16_t LightTime_Modify(uint16_t* newDelay){
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
	if (buttonTime->flag == 1){
 80011d0:	4b0f      	ldr	r3, [pc, #60]	; (8001210 <LightTime_Modify+0x48>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	7c1b      	ldrb	r3, [r3, #16]
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d113      	bne.n	8001202 <LightTime_Modify+0x3a>
		buttonTime->flag = 0;
 80011da:	4b0d      	ldr	r3, [pc, #52]	; (8001210 <LightTime_Modify+0x48>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	2200      	movs	r2, #0
 80011e0:	741a      	strb	r2, [r3, #16]
		*newDelay = (*newDelay + 1) % UPPERBOUND;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	881b      	ldrh	r3, [r3, #0]
 80011e6:	3301      	adds	r3, #1
 80011e8:	4a0a      	ldr	r2, [pc, #40]	; (8001214 <LightTime_Modify+0x4c>)
 80011ea:	fb82 1203 	smull	r1, r2, r2, r3
 80011ee:	1351      	asrs	r1, r2, #13
 80011f0:	17da      	asrs	r2, r3, #31
 80011f2:	1a8a      	subs	r2, r1, r2
 80011f4:	4908      	ldr	r1, [pc, #32]	; (8001218 <LightTime_Modify+0x50>)
 80011f6:	fb01 f202 	mul.w	r2, r1, r2
 80011fa:	1a9a      	subs	r2, r3, r2
 80011fc:	b292      	uxth	r2, r2
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	801a      	strh	r2, [r3, #0]
	}
	return *newDelay;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	881b      	ldrh	r3, [r3, #0]
}
 8001206:	4618      	mov	r0, r3
 8001208:	370c      	adds	r7, #12
 800120a:	46bd      	mov	sp, r7
 800120c:	bc80      	pop	{r7}
 800120e:	4770      	bx	lr
 8001210:	20000138 	.word	0x20000138
 8001214:	14f8b589 	.word	0x14f8b589
 8001218:	000186a0 	.word	0x000186a0

0800121c <Mode_Processing>:

void Mode_Processing(void){
 800121c:	b5b0      	push	{r4, r5, r7, lr}
 800121e:	af00      	add	r7, sp, #0
	ModeButton_Pressed();
 8001220:	f7ff ff96 	bl	8001150 <ModeButton_Pressed>
	switch(trafficMode){
 8001224:	4b6c      	ldr	r3, [pc, #432]	; (80013d8 <Mode_Processing+0x1bc>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	2b04      	cmp	r3, #4
 800122a:	f200 8199 	bhi.w	8001560 <Mode_Processing+0x344>
 800122e:	a201      	add	r2, pc, #4	; (adr r2, 8001234 <Mode_Processing+0x18>)
 8001230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001234:	08001249 	.word	0x08001249
 8001238:	08001283 	.word	0x08001283
 800123c:	0800132d 	.word	0x0800132d
 8001240:	0800140d 	.word	0x0800140d
 8001244:	080014b5 	.word	0x080014b5
		case NORMAL:
			if (standardTime->flag == 1){
 8001248:	4b64      	ldr	r3, [pc, #400]	; (80013dc <Mode_Processing+0x1c0>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	799b      	ldrb	r3, [r3, #6]
 800124e:	2b01      	cmp	r3, #1
 8001250:	d114      	bne.n	800127c <Mode_Processing+0x60>
				  standardTime->Set_Default(standardTime);
 8001252:	4b62      	ldr	r3, [pc, #392]	; (80013dc <Mode_Processing+0x1c0>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	4a60      	ldr	r2, [pc, #384]	; (80013dc <Mode_Processing+0x1c0>)
 800125a:	6812      	ldr	r2, [r2, #0]
 800125c:	4610      	mov	r0, r2
 800125e:	4798      	blx	r3
				  vClock->Down(vClock);
 8001260:	4b5f      	ldr	r3, [pc, #380]	; (80013e0 <Mode_Processing+0x1c4>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	695b      	ldr	r3, [r3, #20]
 8001266:	4a5e      	ldr	r2, [pc, #376]	; (80013e0 <Mode_Processing+0x1c4>)
 8001268:	6812      	ldr	r2, [r2, #0]
 800126a:	4610      	mov	r0, r2
 800126c:	4798      	blx	r3
				  hClock->Down(hClock);
 800126e:	4b5d      	ldr	r3, [pc, #372]	; (80013e4 <Mode_Processing+0x1c8>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	695b      	ldr	r3, [r3, #20]
 8001274:	4a5b      	ldr	r2, [pc, #364]	; (80013e4 <Mode_Processing+0x1c8>)
 8001276:	6812      	ldr	r2, [r2, #0]
 8001278:	4610      	mov	r0, r2
 800127a:	4798      	blx	r3
			}
			Intersection_Normal_Mode();
 800127c:	f000 fc86 	bl	8001b8c <Intersection_Normal_Mode>
			break;
 8001280:	e175      	b.n	800156e <Mode_Processing+0x352>
		case RED_MOD:
			if (stim2->flag == 1){
 8001282:	4b59      	ldr	r3, [pc, #356]	; (80013e8 <Mode_Processing+0x1cc>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	799b      	ldrb	r3, [r3, #6]
 8001288:	2b01      	cmp	r3, #1
 800128a:	d114      	bne.n	80012b6 <Mode_Processing+0x9a>
				stim2->Set_Default(stim2);
 800128c:	4b56      	ldr	r3, [pc, #344]	; (80013e8 <Mode_Processing+0x1cc>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	4a55      	ldr	r2, [pc, #340]	; (80013e8 <Mode_Processing+0x1cc>)
 8001294:	6812      	ldr	r2, [r2, #0]
 8001296:	4610      	mov	r0, r2
 8001298:	4798      	blx	r3
				vTrafficLight->Toggle_Red(vTrafficLight);
 800129a:	4b54      	ldr	r3, [pc, #336]	; (80013ec <Mode_Processing+0x1d0>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012a0:	4a52      	ldr	r2, [pc, #328]	; (80013ec <Mode_Processing+0x1d0>)
 80012a2:	6812      	ldr	r2, [r2, #0]
 80012a4:	4610      	mov	r0, r2
 80012a6:	4798      	blx	r3
				hTrafficLight->Toggle_Red(hTrafficLight);
 80012a8:	4b51      	ldr	r3, [pc, #324]	; (80013f0 <Mode_Processing+0x1d4>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ae:	4a50      	ldr	r2, [pc, #320]	; (80013f0 <Mode_Processing+0x1d4>)
 80012b0:	6812      	ldr	r2, [r2, #0]
 80012b2:	4610      	mov	r0, r2
 80012b4:	4798      	blx	r3
			}

			hClock->Modify(hClock, 0, 0, RED_MOD);
 80012b6:	4b4b      	ldr	r3, [pc, #300]	; (80013e4 <Mode_Processing+0x1c8>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	68dc      	ldr	r4, [r3, #12]
 80012bc:	4b49      	ldr	r3, [pc, #292]	; (80013e4 <Mode_Processing+0x1c8>)
 80012be:	6818      	ldr	r0, [r3, #0]
 80012c0:	2301      	movs	r3, #1
 80012c2:	2200      	movs	r2, #0
 80012c4:	2100      	movs	r1, #0
 80012c6:	47a0      	blx	r4
			vClock->Modify(vClock, 0, 0, LightTime_Modify(&newRedTime));
 80012c8:	4b45      	ldr	r3, [pc, #276]	; (80013e0 <Mode_Processing+0x1c4>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	68dc      	ldr	r4, [r3, #12]
 80012ce:	4b44      	ldr	r3, [pc, #272]	; (80013e0 <Mode_Processing+0x1c4>)
 80012d0:	681d      	ldr	r5, [r3, #0]
 80012d2:	4848      	ldr	r0, [pc, #288]	; (80013f4 <Mode_Processing+0x1d8>)
 80012d4:	f7ff ff78 	bl	80011c8 <LightTime_Modify>
 80012d8:	4603      	mov	r3, r0
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	2200      	movs	r2, #0
 80012de:	2100      	movs	r1, #0
 80012e0:	4628      	mov	r0, r5
 80012e2:	47a0      	blx	r4
			if (stim3->flag == 1){
 80012e4:	4b44      	ldr	r3, [pc, #272]	; (80013f8 <Mode_Processing+0x1dc>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	799b      	ldrb	r3, [r3, #6]
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d108      	bne.n	8001300 <Mode_Processing+0xe4>
				stim3->Set_Default(stim3);
 80012ee:	4b42      	ldr	r3, [pc, #264]	; (80013f8 <Mode_Processing+0x1dc>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	689b      	ldr	r3, [r3, #8]
 80012f4:	4a40      	ldr	r2, [pc, #256]	; (80013f8 <Mode_Processing+0x1dc>)
 80012f6:	6812      	ldr	r2, [r2, #0]
 80012f8:	4610      	mov	r0, r2
 80012fa:	4798      	blx	r3
				Intersection_7SEG_Display();
 80012fc:	f7fe ffd2 	bl	80002a4 <Intersection_7SEG_Display>
			}
			if (buttonSet->flag == 1){
 8001300:	4b3e      	ldr	r3, [pc, #248]	; (80013fc <Mode_Processing+0x1e0>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	7c1b      	ldrb	r3, [r3, #16]
 8001306:	2b01      	cmp	r3, #1
 8001308:	f040 812c 	bne.w	8001564 <Mode_Processing+0x348>
				buttonSet->flag = 0;
 800130c:	4b3b      	ldr	r3, [pc, #236]	; (80013fc <Mode_Processing+0x1e0>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	2200      	movs	r2, #0
 8001312:	741a      	strb	r2, [r3, #16]
				H_RED_TIME = newRedTime*1000;
 8001314:	4b37      	ldr	r3, [pc, #220]	; (80013f4 <Mode_Processing+0x1d8>)
 8001316:	881b      	ldrh	r3, [r3, #0]
 8001318:	461a      	mov	r2, r3
 800131a:	0152      	lsls	r2, r2, #5
 800131c:	1ad2      	subs	r2, r2, r3
 800131e:	0092      	lsls	r2, r2, #2
 8001320:	4413      	add	r3, r2
 8001322:	00db      	lsls	r3, r3, #3
 8001324:	b29a      	uxth	r2, r3
 8001326:	4b36      	ldr	r3, [pc, #216]	; (8001400 <Mode_Processing+0x1e4>)
 8001328:	801a      	strh	r2, [r3, #0]
			}
			break;
 800132a:	e11b      	b.n	8001564 <Mode_Processing+0x348>
		case YELLOW_MOD:
			if (stim2->flag == 1){
 800132c:	4b2e      	ldr	r3, [pc, #184]	; (80013e8 <Mode_Processing+0x1cc>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	799b      	ldrb	r3, [r3, #6]
 8001332:	2b01      	cmp	r3, #1
 8001334:	d114      	bne.n	8001360 <Mode_Processing+0x144>
				stim2->Set_Default(stim2);
 8001336:	4b2c      	ldr	r3, [pc, #176]	; (80013e8 <Mode_Processing+0x1cc>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	4a2a      	ldr	r2, [pc, #168]	; (80013e8 <Mode_Processing+0x1cc>)
 800133e:	6812      	ldr	r2, [r2, #0]
 8001340:	4610      	mov	r0, r2
 8001342:	4798      	blx	r3
				vTrafficLight->Toggle_Yellow(vTrafficLight);
 8001344:	4b29      	ldr	r3, [pc, #164]	; (80013ec <Mode_Processing+0x1d0>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800134a:	4a28      	ldr	r2, [pc, #160]	; (80013ec <Mode_Processing+0x1d0>)
 800134c:	6812      	ldr	r2, [r2, #0]
 800134e:	4610      	mov	r0, r2
 8001350:	4798      	blx	r3
				hTrafficLight->Toggle_Yellow(hTrafficLight);
 8001352:	4b27      	ldr	r3, [pc, #156]	; (80013f0 <Mode_Processing+0x1d4>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001358:	4a25      	ldr	r2, [pc, #148]	; (80013f0 <Mode_Processing+0x1d4>)
 800135a:	6812      	ldr	r2, [r2, #0]
 800135c:	4610      	mov	r0, r2
 800135e:	4798      	blx	r3
			}

			hClock->Modify(hClock, 0, 0, YELLOW_MOD);
 8001360:	4b20      	ldr	r3, [pc, #128]	; (80013e4 <Mode_Processing+0x1c8>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	68dc      	ldr	r4, [r3, #12]
 8001366:	4b1f      	ldr	r3, [pc, #124]	; (80013e4 <Mode_Processing+0x1c8>)
 8001368:	6818      	ldr	r0, [r3, #0]
 800136a:	2302      	movs	r3, #2
 800136c:	2200      	movs	r2, #0
 800136e:	2100      	movs	r1, #0
 8001370:	47a0      	blx	r4
			vClock->Modify(vClock, 0, 0, LightTime_Modify(&newYellowTime));
 8001372:	4b1b      	ldr	r3, [pc, #108]	; (80013e0 <Mode_Processing+0x1c4>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	68dc      	ldr	r4, [r3, #12]
 8001378:	4b19      	ldr	r3, [pc, #100]	; (80013e0 <Mode_Processing+0x1c4>)
 800137a:	681d      	ldr	r5, [r3, #0]
 800137c:	4821      	ldr	r0, [pc, #132]	; (8001404 <Mode_Processing+0x1e8>)
 800137e:	f7ff ff23 	bl	80011c8 <LightTime_Modify>
 8001382:	4603      	mov	r3, r0
 8001384:	b2db      	uxtb	r3, r3
 8001386:	2200      	movs	r2, #0
 8001388:	2100      	movs	r1, #0
 800138a:	4628      	mov	r0, r5
 800138c:	47a0      	blx	r4
			if (stim3->flag == 1){
 800138e:	4b1a      	ldr	r3, [pc, #104]	; (80013f8 <Mode_Processing+0x1dc>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	799b      	ldrb	r3, [r3, #6]
 8001394:	2b01      	cmp	r3, #1
 8001396:	d108      	bne.n	80013aa <Mode_Processing+0x18e>
				stim3->Set_Default(stim3);
 8001398:	4b17      	ldr	r3, [pc, #92]	; (80013f8 <Mode_Processing+0x1dc>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	689b      	ldr	r3, [r3, #8]
 800139e:	4a16      	ldr	r2, [pc, #88]	; (80013f8 <Mode_Processing+0x1dc>)
 80013a0:	6812      	ldr	r2, [r2, #0]
 80013a2:	4610      	mov	r0, r2
 80013a4:	4798      	blx	r3
				Intersection_7SEG_Display();
 80013a6:	f7fe ff7d 	bl	80002a4 <Intersection_7SEG_Display>
			}
			if (buttonSet->flag == 1){
 80013aa:	4b14      	ldr	r3, [pc, #80]	; (80013fc <Mode_Processing+0x1e0>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	7c1b      	ldrb	r3, [r3, #16]
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	f040 80d9 	bne.w	8001568 <Mode_Processing+0x34c>
				buttonSet->flag = 0;
 80013b6:	4b11      	ldr	r3, [pc, #68]	; (80013fc <Mode_Processing+0x1e0>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	2200      	movs	r2, #0
 80013bc:	741a      	strb	r2, [r3, #16]
				H_YELLOW_TIME = newYellowTime*1000;
 80013be:	4b11      	ldr	r3, [pc, #68]	; (8001404 <Mode_Processing+0x1e8>)
 80013c0:	881b      	ldrh	r3, [r3, #0]
 80013c2:	461a      	mov	r2, r3
 80013c4:	0152      	lsls	r2, r2, #5
 80013c6:	1ad2      	subs	r2, r2, r3
 80013c8:	0092      	lsls	r2, r2, #2
 80013ca:	4413      	add	r3, r2
 80013cc:	00db      	lsls	r3, r3, #3
 80013ce:	b29a      	uxth	r2, r3
 80013d0:	4b0d      	ldr	r3, [pc, #52]	; (8001408 <Mode_Processing+0x1ec>)
 80013d2:	801a      	strh	r2, [r3, #0]
			}
			break;
 80013d4:	e0c8      	b.n	8001568 <Mode_Processing+0x34c>
 80013d6:	bf00      	nop
 80013d8:	20000140 	.word	0x20000140
 80013dc:	20000150 	.word	0x20000150
 80013e0:	200001a8 	.word	0x200001a8
 80013e4:	200001ac 	.word	0x200001ac
 80013e8:	20000148 	.word	0x20000148
 80013ec:	200001a4 	.word	0x200001a4
 80013f0:	200001a0 	.word	0x200001a0
 80013f4:	20000142 	.word	0x20000142
 80013f8:	2000014c 	.word	0x2000014c
 80013fc:	2000013c 	.word	0x2000013c
 8001400:	200001b8 	.word	0x200001b8
 8001404:	20000144 	.word	0x20000144
 8001408:	200001b6 	.word	0x200001b6
		case GREEN_MOD:
			if (stim2->flag == 1){
 800140c:	4b59      	ldr	r3, [pc, #356]	; (8001574 <Mode_Processing+0x358>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	799b      	ldrb	r3, [r3, #6]
 8001412:	2b01      	cmp	r3, #1
 8001414:	d114      	bne.n	8001440 <Mode_Processing+0x224>
				stim2->Set_Default(stim2);
 8001416:	4b57      	ldr	r3, [pc, #348]	; (8001574 <Mode_Processing+0x358>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	4a55      	ldr	r2, [pc, #340]	; (8001574 <Mode_Processing+0x358>)
 800141e:	6812      	ldr	r2, [r2, #0]
 8001420:	4610      	mov	r0, r2
 8001422:	4798      	blx	r3
				vTrafficLight->Toggle_Green(vTrafficLight);
 8001424:	4b54      	ldr	r3, [pc, #336]	; (8001578 <Mode_Processing+0x35c>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142a:	4a53      	ldr	r2, [pc, #332]	; (8001578 <Mode_Processing+0x35c>)
 800142c:	6812      	ldr	r2, [r2, #0]
 800142e:	4610      	mov	r0, r2
 8001430:	4798      	blx	r3
				hTrafficLight->Toggle_Green(hTrafficLight);
 8001432:	4b52      	ldr	r3, [pc, #328]	; (800157c <Mode_Processing+0x360>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001438:	4a50      	ldr	r2, [pc, #320]	; (800157c <Mode_Processing+0x360>)
 800143a:	6812      	ldr	r2, [r2, #0]
 800143c:	4610      	mov	r0, r2
 800143e:	4798      	blx	r3
			}

			hClock->Modify(hClock, 0, 0, GREEN_MOD);
 8001440:	4b4f      	ldr	r3, [pc, #316]	; (8001580 <Mode_Processing+0x364>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	68dc      	ldr	r4, [r3, #12]
 8001446:	4b4e      	ldr	r3, [pc, #312]	; (8001580 <Mode_Processing+0x364>)
 8001448:	6818      	ldr	r0, [r3, #0]
 800144a:	2303      	movs	r3, #3
 800144c:	2200      	movs	r2, #0
 800144e:	2100      	movs	r1, #0
 8001450:	47a0      	blx	r4
			vClock->Modify(vClock, 0, 0, LightTime_Modify(&newGreenTime));
 8001452:	4b4c      	ldr	r3, [pc, #304]	; (8001584 <Mode_Processing+0x368>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	68dc      	ldr	r4, [r3, #12]
 8001458:	4b4a      	ldr	r3, [pc, #296]	; (8001584 <Mode_Processing+0x368>)
 800145a:	681d      	ldr	r5, [r3, #0]
 800145c:	484a      	ldr	r0, [pc, #296]	; (8001588 <Mode_Processing+0x36c>)
 800145e:	f7ff feb3 	bl	80011c8 <LightTime_Modify>
 8001462:	4603      	mov	r3, r0
 8001464:	b2db      	uxtb	r3, r3
 8001466:	2200      	movs	r2, #0
 8001468:	2100      	movs	r1, #0
 800146a:	4628      	mov	r0, r5
 800146c:	47a0      	blx	r4
			if (stim3->flag == 1){
 800146e:	4b47      	ldr	r3, [pc, #284]	; (800158c <Mode_Processing+0x370>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	799b      	ldrb	r3, [r3, #6]
 8001474:	2b01      	cmp	r3, #1
 8001476:	d108      	bne.n	800148a <Mode_Processing+0x26e>
				stim3->Set_Default(stim3);
 8001478:	4b44      	ldr	r3, [pc, #272]	; (800158c <Mode_Processing+0x370>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	689b      	ldr	r3, [r3, #8]
 800147e:	4a43      	ldr	r2, [pc, #268]	; (800158c <Mode_Processing+0x370>)
 8001480:	6812      	ldr	r2, [r2, #0]
 8001482:	4610      	mov	r0, r2
 8001484:	4798      	blx	r3
				Intersection_7SEG_Display();
 8001486:	f7fe ff0d 	bl	80002a4 <Intersection_7SEG_Display>
			}
			if (buttonSet->flag == 1){
 800148a:	4b41      	ldr	r3, [pc, #260]	; (8001590 <Mode_Processing+0x374>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	7c1b      	ldrb	r3, [r3, #16]
 8001490:	2b01      	cmp	r3, #1
 8001492:	d16b      	bne.n	800156c <Mode_Processing+0x350>
				buttonSet->flag = 0;
 8001494:	4b3e      	ldr	r3, [pc, #248]	; (8001590 <Mode_Processing+0x374>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	2200      	movs	r2, #0
 800149a:	741a      	strb	r2, [r3, #16]
				H_GREEN_TIME = newGreenTime*1000;
 800149c:	4b3a      	ldr	r3, [pc, #232]	; (8001588 <Mode_Processing+0x36c>)
 800149e:	881b      	ldrh	r3, [r3, #0]
 80014a0:	461a      	mov	r2, r3
 80014a2:	0152      	lsls	r2, r2, #5
 80014a4:	1ad2      	subs	r2, r2, r3
 80014a6:	0092      	lsls	r2, r2, #2
 80014a8:	4413      	add	r3, r2
 80014aa:	00db      	lsls	r3, r3, #3
 80014ac:	b29a      	uxth	r2, r3
 80014ae:	4b39      	ldr	r3, [pc, #228]	; (8001594 <Mode_Processing+0x378>)
 80014b0:	801a      	strh	r2, [r3, #0]
			}
			break;
 80014b2:	e05b      	b.n	800156c <Mode_Processing+0x350>
		case EXIT_MOD:
			Delay_Flush();
 80014b4:	f7ff fe72 	bl	800119c <Delay_Flush>
			Sub_Road(H_RED_TIME, H_YELLOW_TIME, H_GREEN_TIME);
 80014b8:	4b37      	ldr	r3, [pc, #220]	; (8001598 <Mode_Processing+0x37c>)
 80014ba:	881b      	ldrh	r3, [r3, #0]
 80014bc:	4a37      	ldr	r2, [pc, #220]	; (800159c <Mode_Processing+0x380>)
 80014be:	8811      	ldrh	r1, [r2, #0]
 80014c0:	4a34      	ldr	r2, [pc, #208]	; (8001594 <Mode_Processing+0x378>)
 80014c2:	8812      	ldrh	r2, [r2, #0]
 80014c4:	4618      	mov	r0, r3
 80014c6:	f000 f9cb 	bl	8001860 <Sub_Road>
			Main_Road(V_RED_TIME, V_YELLOW_TIME, V_GREEN_TIME);
 80014ca:	4b35      	ldr	r3, [pc, #212]	; (80015a0 <Mode_Processing+0x384>)
 80014cc:	881b      	ldrh	r3, [r3, #0]
 80014ce:	4a35      	ldr	r2, [pc, #212]	; (80015a4 <Mode_Processing+0x388>)
 80014d0:	8811      	ldrh	r1, [r2, #0]
 80014d2:	4a35      	ldr	r2, [pc, #212]	; (80015a8 <Mode_Processing+0x38c>)
 80014d4:	8812      	ldrh	r2, [r2, #0]
 80014d6:	4618      	mov	r0, r3
 80014d8:	f000 f9e8 	bl	80018ac <Main_Road>

			hTrafficLight->stim->Set_Manual(hTrafficLight->stim, H_YELLOW_TIME);
 80014dc:	4b27      	ldr	r3, [pc, #156]	; (800157c <Mode_Processing+0x360>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	68db      	ldr	r3, [r3, #12]
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	4a25      	ldr	r2, [pc, #148]	; (800157c <Mode_Processing+0x360>)
 80014e6:	6812      	ldr	r2, [r2, #0]
 80014e8:	68d2      	ldr	r2, [r2, #12]
 80014ea:	492c      	ldr	r1, [pc, #176]	; (800159c <Mode_Processing+0x380>)
 80014ec:	8809      	ldrh	r1, [r1, #0]
 80014ee:	4610      	mov	r0, r2
 80014f0:	4798      	blx	r3
			vTrafficLight->stim->Set_Manual(vTrafficLight->stim, V_YELLOW_TIME);
 80014f2:	4b21      	ldr	r3, [pc, #132]	; (8001578 <Mode_Processing+0x35c>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	68db      	ldr	r3, [r3, #12]
 80014fa:	4a1f      	ldr	r2, [pc, #124]	; (8001578 <Mode_Processing+0x35c>)
 80014fc:	6812      	ldr	r2, [r2, #0]
 80014fe:	68d2      	ldr	r2, [r2, #12]
 8001500:	4928      	ldr	r1, [pc, #160]	; (80015a4 <Mode_Processing+0x388>)
 8001502:	8809      	ldrh	r1, [r1, #0]
 8001504:	4610      	mov	r0, r2
 8001506:	4798      	blx	r3

			hTrafficLight->state = INIT;
 8001508:	4b1c      	ldr	r3, [pc, #112]	; (800157c <Mode_Processing+0x360>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	2200      	movs	r2, #0
 800150e:	741a      	strb	r2, [r3, #16]
			vTrafficLight->state = EXIT;
 8001510:	4b19      	ldr	r3, [pc, #100]	; (8001578 <Mode_Processing+0x35c>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	2204      	movs	r2, #4
 8001516:	741a      	strb	r2, [r3, #16]

			vClock->Modify(vClock, 0, 0, V_GREEN_TIME/1000);
 8001518:	4b1a      	ldr	r3, [pc, #104]	; (8001584 <Mode_Processing+0x368>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	68dc      	ldr	r4, [r3, #12]
 800151e:	4b19      	ldr	r3, [pc, #100]	; (8001584 <Mode_Processing+0x368>)
 8001520:	6818      	ldr	r0, [r3, #0]
 8001522:	4b21      	ldr	r3, [pc, #132]	; (80015a8 <Mode_Processing+0x38c>)
 8001524:	881b      	ldrh	r3, [r3, #0]
 8001526:	4a21      	ldr	r2, [pc, #132]	; (80015ac <Mode_Processing+0x390>)
 8001528:	fba2 2303 	umull	r2, r3, r2, r3
 800152c:	099b      	lsrs	r3, r3, #6
 800152e:	b29b      	uxth	r3, r3
 8001530:	b2db      	uxtb	r3, r3
 8001532:	2200      	movs	r2, #0
 8001534:	2100      	movs	r1, #0
 8001536:	47a0      	blx	r4
			hClock->Modify(hClock, 0, 0, H_RED_TIME/1000);
 8001538:	4b11      	ldr	r3, [pc, #68]	; (8001580 <Mode_Processing+0x364>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	68dc      	ldr	r4, [r3, #12]
 800153e:	4b10      	ldr	r3, [pc, #64]	; (8001580 <Mode_Processing+0x364>)
 8001540:	6818      	ldr	r0, [r3, #0]
 8001542:	4b15      	ldr	r3, [pc, #84]	; (8001598 <Mode_Processing+0x37c>)
 8001544:	881b      	ldrh	r3, [r3, #0]
 8001546:	4a19      	ldr	r2, [pc, #100]	; (80015ac <Mode_Processing+0x390>)
 8001548:	fba2 2303 	umull	r2, r3, r2, r3
 800154c:	099b      	lsrs	r3, r3, #6
 800154e:	b29b      	uxth	r3, r3
 8001550:	b2db      	uxtb	r3, r3
 8001552:	2200      	movs	r2, #0
 8001554:	2100      	movs	r1, #0
 8001556:	47a0      	blx	r4

			trafficMode = NORMAL;
 8001558:	4b15      	ldr	r3, [pc, #84]	; (80015b0 <Mode_Processing+0x394>)
 800155a:	2200      	movs	r2, #0
 800155c:	701a      	strb	r2, [r3, #0]
			break;
 800155e:	e006      	b.n	800156e <Mode_Processing+0x352>
		default:
			break;
 8001560:	bf00      	nop
 8001562:	e004      	b.n	800156e <Mode_Processing+0x352>
			break;
 8001564:	bf00      	nop
 8001566:	e002      	b.n	800156e <Mode_Processing+0x352>
			break;
 8001568:	bf00      	nop
 800156a:	e000      	b.n	800156e <Mode_Processing+0x352>
			break;
 800156c:	bf00      	nop
	}
}
 800156e:	bf00      	nop
 8001570:	bdb0      	pop	{r4, r5, r7, pc}
 8001572:	bf00      	nop
 8001574:	20000148 	.word	0x20000148
 8001578:	200001a4 	.word	0x200001a4
 800157c:	200001a0 	.word	0x200001a0
 8001580:	200001ac 	.word	0x200001ac
 8001584:	200001a8 	.word	0x200001a8
 8001588:	20000146 	.word	0x20000146
 800158c:	2000014c 	.word	0x2000014c
 8001590:	2000013c 	.word	0x2000013c
 8001594:	200001ba 	.word	0x200001ba
 8001598:	200001b8 	.word	0x200001b8
 800159c:	200001b6 	.word	0x200001b6
 80015a0:	200001b2 	.word	0x200001b2
 80015a4:	200001b0 	.word	0x200001b0
 80015a8:	200001b4 	.word	0x200001b4
 80015ac:	10624dd3 	.word	0x10624dd3
 80015b0:	20000140 	.word	0x20000140

080015b4 <Software_Timer_Init>:

STIM_TypeDef* stim2;
STIM_TypeDef* stim3;
STIM_TypeDef* standardTime;

void Software_Timer_Init(void){
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
	stim2 			= STIM_Init(STIM2_TIMER_DELAY, TIM2_TIMER_INTERRUPT);
 80015b8:	2132      	movs	r1, #50	; 0x32
 80015ba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015be:	f7fe ff17 	bl	80003f0 <STIM_Init>
 80015c2:	4603      	mov	r3, r0
 80015c4:	4a13      	ldr	r2, [pc, #76]	; (8001614 <Software_Timer_Init+0x60>)
 80015c6:	6013      	str	r3, [r2, #0]
	stim3 			= STIM_Init(STIM3_TIMER_DELAY, TIM2_TIMER_INTERRUPT);
 80015c8:	2132      	movs	r1, #50	; 0x32
 80015ca:	20fa      	movs	r0, #250	; 0xfa
 80015cc:	f7fe ff10 	bl	80003f0 <STIM_Init>
 80015d0:	4603      	mov	r3, r0
 80015d2:	4a11      	ldr	r2, [pc, #68]	; (8001618 <Software_Timer_Init+0x64>)
 80015d4:	6013      	str	r3, [r2, #0]
	standardTime 	= STIM_Init(STANDARD_TIME_DELAY, TIM2_TIMER_INTERRUPT);
 80015d6:	2132      	movs	r1, #50	; 0x32
 80015d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015dc:	f7fe ff08 	bl	80003f0 <STIM_Init>
 80015e0:	4603      	mov	r3, r0
 80015e2:	4a0e      	ldr	r2, [pc, #56]	; (800161c <Software_Timer_Init+0x68>)
 80015e4:	6013      	str	r3, [r2, #0]

	stim2->Set_Default(stim2);
 80015e6:	4b0b      	ldr	r3, [pc, #44]	; (8001614 <Software_Timer_Init+0x60>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	4a09      	ldr	r2, [pc, #36]	; (8001614 <Software_Timer_Init+0x60>)
 80015ee:	6812      	ldr	r2, [r2, #0]
 80015f0:	4610      	mov	r0, r2
 80015f2:	4798      	blx	r3
	stim3->Set_Default(stim3);
 80015f4:	4b08      	ldr	r3, [pc, #32]	; (8001618 <Software_Timer_Init+0x64>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	4a07      	ldr	r2, [pc, #28]	; (8001618 <Software_Timer_Init+0x64>)
 80015fc:	6812      	ldr	r2, [r2, #0]
 80015fe:	4610      	mov	r0, r2
 8001600:	4798      	blx	r3
	standardTime->Set_Default(standardTime);
 8001602:	4b06      	ldr	r3, [pc, #24]	; (800161c <Software_Timer_Init+0x68>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	4a04      	ldr	r2, [pc, #16]	; (800161c <Software_Timer_Init+0x68>)
 800160a:	6812      	ldr	r2, [r2, #0]
 800160c:	4610      	mov	r0, r2
 800160e:	4798      	blx	r3
}
 8001610:	bf00      	nop
 8001612:	bd80      	pop	{r7, pc}
 8001614:	20000148 	.word	0x20000148
 8001618:	2000014c 	.word	0x2000014c
 800161c:	20000150 	.word	0x20000150

08001620 <Software_Timer_Run>:

void Software_Timer_Run(void){
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
	stim2->Timer_Run(stim2);
 8001624:	4b0b      	ldr	r3, [pc, #44]	; (8001654 <Software_Timer_Run+0x34>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	691b      	ldr	r3, [r3, #16]
 800162a:	4a0a      	ldr	r2, [pc, #40]	; (8001654 <Software_Timer_Run+0x34>)
 800162c:	6812      	ldr	r2, [r2, #0]
 800162e:	4610      	mov	r0, r2
 8001630:	4798      	blx	r3
	stim3->Timer_Run(stim3);
 8001632:	4b09      	ldr	r3, [pc, #36]	; (8001658 <Software_Timer_Run+0x38>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	691b      	ldr	r3, [r3, #16]
 8001638:	4a07      	ldr	r2, [pc, #28]	; (8001658 <Software_Timer_Run+0x38>)
 800163a:	6812      	ldr	r2, [r2, #0]
 800163c:	4610      	mov	r0, r2
 800163e:	4798      	blx	r3
	standardTime->Timer_Run(standardTime);
 8001640:	4b06      	ldr	r3, [pc, #24]	; (800165c <Software_Timer_Run+0x3c>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	691b      	ldr	r3, [r3, #16]
 8001646:	4a05      	ldr	r2, [pc, #20]	; (800165c <Software_Timer_Run+0x3c>)
 8001648:	6812      	ldr	r2, [r2, #0]
 800164a:	4610      	mov	r0, r2
 800164c:	4798      	blx	r3
}
 800164e:	bf00      	nop
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	20000148 	.word	0x20000148
 8001658:	2000014c 	.word	0x2000014c
 800165c:	20000150 	.word	0x20000150

08001660 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001666:	4b0e      	ldr	r3, [pc, #56]	; (80016a0 <HAL_MspInit+0x40>)
 8001668:	699b      	ldr	r3, [r3, #24]
 800166a:	4a0d      	ldr	r2, [pc, #52]	; (80016a0 <HAL_MspInit+0x40>)
 800166c:	f043 0301 	orr.w	r3, r3, #1
 8001670:	6193      	str	r3, [r2, #24]
 8001672:	4b0b      	ldr	r3, [pc, #44]	; (80016a0 <HAL_MspInit+0x40>)
 8001674:	699b      	ldr	r3, [r3, #24]
 8001676:	f003 0301 	and.w	r3, r3, #1
 800167a:	607b      	str	r3, [r7, #4]
 800167c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800167e:	4b08      	ldr	r3, [pc, #32]	; (80016a0 <HAL_MspInit+0x40>)
 8001680:	69db      	ldr	r3, [r3, #28]
 8001682:	4a07      	ldr	r2, [pc, #28]	; (80016a0 <HAL_MspInit+0x40>)
 8001684:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001688:	61d3      	str	r3, [r2, #28]
 800168a:	4b05      	ldr	r3, [pc, #20]	; (80016a0 <HAL_MspInit+0x40>)
 800168c:	69db      	ldr	r3, [r3, #28]
 800168e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001692:	603b      	str	r3, [r7, #0]
 8001694:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001696:	bf00      	nop
 8001698:	370c      	adds	r7, #12
 800169a:	46bd      	mov	sp, r7
 800169c:	bc80      	pop	{r7}
 800169e:	4770      	bx	lr
 80016a0:	40021000 	.word	0x40021000

080016a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016a8:	e7fe      	b.n	80016a8 <NMI_Handler+0x4>

080016aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016aa:	b480      	push	{r7}
 80016ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016ae:	e7fe      	b.n	80016ae <HardFault_Handler+0x4>

080016b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016b4:	e7fe      	b.n	80016b4 <MemManage_Handler+0x4>

080016b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016b6:	b480      	push	{r7}
 80016b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016ba:	e7fe      	b.n	80016ba <BusFault_Handler+0x4>

080016bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016c0:	e7fe      	b.n	80016c0 <UsageFault_Handler+0x4>

080016c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016c2:	b480      	push	{r7}
 80016c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016c6:	bf00      	nop
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bc80      	pop	{r7}
 80016cc:	4770      	bx	lr

080016ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016ce:	b480      	push	{r7}
 80016d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016d2:	bf00      	nop
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bc80      	pop	{r7}
 80016d8:	4770      	bx	lr

080016da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016da:	b480      	push	{r7}
 80016dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016de:	bf00      	nop
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bc80      	pop	{r7}
 80016e4:	4770      	bx	lr

080016e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016e6:	b580      	push	{r7, lr}
 80016e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016ea:	f000 fac3 	bl	8001c74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016ee:	bf00      	nop
 80016f0:	bd80      	pop	{r7, pc}
	...

080016f4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80016f8:	4802      	ldr	r0, [pc, #8]	; (8001704 <TIM2_IRQHandler+0x10>)
 80016fa:	f001 fa2d 	bl	8002b58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80016fe:	bf00      	nop
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	20000158 	.word	0x20000158

08001708 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b086      	sub	sp, #24
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001710:	4a14      	ldr	r2, [pc, #80]	; (8001764 <_sbrk+0x5c>)
 8001712:	4b15      	ldr	r3, [pc, #84]	; (8001768 <_sbrk+0x60>)
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800171c:	4b13      	ldr	r3, [pc, #76]	; (800176c <_sbrk+0x64>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d102      	bne.n	800172a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001724:	4b11      	ldr	r3, [pc, #68]	; (800176c <_sbrk+0x64>)
 8001726:	4a12      	ldr	r2, [pc, #72]	; (8001770 <_sbrk+0x68>)
 8001728:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800172a:	4b10      	ldr	r3, [pc, #64]	; (800176c <_sbrk+0x64>)
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4413      	add	r3, r2
 8001732:	693a      	ldr	r2, [r7, #16]
 8001734:	429a      	cmp	r2, r3
 8001736:	d207      	bcs.n	8001748 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001738:	f001 fd56 	bl	80031e8 <__errno>
 800173c:	4603      	mov	r3, r0
 800173e:	220c      	movs	r2, #12
 8001740:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001742:	f04f 33ff 	mov.w	r3, #4294967295
 8001746:	e009      	b.n	800175c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001748:	4b08      	ldr	r3, [pc, #32]	; (800176c <_sbrk+0x64>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800174e:	4b07      	ldr	r3, [pc, #28]	; (800176c <_sbrk+0x64>)
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4413      	add	r3, r2
 8001756:	4a05      	ldr	r2, [pc, #20]	; (800176c <_sbrk+0x64>)
 8001758:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800175a:	68fb      	ldr	r3, [r7, #12]
}
 800175c:	4618      	mov	r0, r3
 800175e:	3718      	adds	r7, #24
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	20002800 	.word	0x20002800
 8001768:	00000400 	.word	0x00000400
 800176c:	20000154 	.word	0x20000154
 8001770:	200001d0 	.word	0x200001d0

08001774 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001778:	bf00      	nop
 800177a:	46bd      	mov	sp, r7
 800177c:	bc80      	pop	{r7}
 800177e:	4770      	bx	lr

08001780 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b086      	sub	sp, #24
 8001784:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001786:	f107 0308 	add.w	r3, r7, #8
 800178a:	2200      	movs	r2, #0
 800178c:	601a      	str	r2, [r3, #0]
 800178e:	605a      	str	r2, [r3, #4]
 8001790:	609a      	str	r2, [r3, #8]
 8001792:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001794:	463b      	mov	r3, r7
 8001796:	2200      	movs	r2, #0
 8001798:	601a      	str	r2, [r3, #0]
 800179a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800179c:	4b1d      	ldr	r3, [pc, #116]	; (8001814 <MX_TIM2_Init+0x94>)
 800179e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017a2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 39999;
 80017a4:	4b1b      	ldr	r3, [pc, #108]	; (8001814 <MX_TIM2_Init+0x94>)
 80017a6:	f649 423f 	movw	r2, #39999	; 0x9c3f
 80017aa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ac:	4b19      	ldr	r3, [pc, #100]	; (8001814 <MX_TIM2_Init+0x94>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80017b2:	4b18      	ldr	r3, [pc, #96]	; (8001814 <MX_TIM2_Init+0x94>)
 80017b4:	2209      	movs	r2, #9
 80017b6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017b8:	4b16      	ldr	r3, [pc, #88]	; (8001814 <MX_TIM2_Init+0x94>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017be:	4b15      	ldr	r3, [pc, #84]	; (8001814 <MX_TIM2_Init+0x94>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80017c4:	4813      	ldr	r0, [pc, #76]	; (8001814 <MX_TIM2_Init+0x94>)
 80017c6:	f001 f92b 	bl	8002a20 <HAL_TIM_Base_Init>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80017d0:	f7ff fcb8 	bl	8001144 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017d8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80017da:	f107 0308 	add.w	r3, r7, #8
 80017de:	4619      	mov	r1, r3
 80017e0:	480c      	ldr	r0, [pc, #48]	; (8001814 <MX_TIM2_Init+0x94>)
 80017e2:	f001 fac1 	bl	8002d68 <HAL_TIM_ConfigClockSource>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80017ec:	f7ff fcaa 	bl	8001144 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017f0:	2300      	movs	r3, #0
 80017f2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017f4:	2300      	movs	r3, #0
 80017f6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017f8:	463b      	mov	r3, r7
 80017fa:	4619      	mov	r1, r3
 80017fc:	4805      	ldr	r0, [pc, #20]	; (8001814 <MX_TIM2_Init+0x94>)
 80017fe:	f001 fc89 	bl	8003114 <HAL_TIMEx_MasterConfigSynchronization>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001808:	f7ff fc9c 	bl	8001144 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800180c:	bf00      	nop
 800180e:	3718      	adds	r7, #24
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	20000158 	.word	0x20000158

08001818 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b084      	sub	sp, #16
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001828:	d113      	bne.n	8001852 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800182a:	4b0c      	ldr	r3, [pc, #48]	; (800185c <HAL_TIM_Base_MspInit+0x44>)
 800182c:	69db      	ldr	r3, [r3, #28]
 800182e:	4a0b      	ldr	r2, [pc, #44]	; (800185c <HAL_TIM_Base_MspInit+0x44>)
 8001830:	f043 0301 	orr.w	r3, r3, #1
 8001834:	61d3      	str	r3, [r2, #28]
 8001836:	4b09      	ldr	r3, [pc, #36]	; (800185c <HAL_TIM_Base_MspInit+0x44>)
 8001838:	69db      	ldr	r3, [r3, #28]
 800183a:	f003 0301 	and.w	r3, r3, #1
 800183e:	60fb      	str	r3, [r7, #12]
 8001840:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001842:	2200      	movs	r2, #0
 8001844:	2100      	movs	r1, #0
 8001846:	201c      	movs	r0, #28
 8001848:	f000 fb07 	bl	8001e5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800184c:	201c      	movs	r0, #28
 800184e:	f000 fb20 	bl	8001e92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001852:	bf00      	nop
 8001854:	3710      	adds	r7, #16
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	40021000 	.word	0x40021000

08001860 <Sub_Road>:
uint16_t V_GREEN_TIME;
uint16_t H_YELLOW_TIME;
uint16_t H_RED_TIME;
uint16_t H_GREEN_TIME;

void Sub_Road(uint16_t mainRed, uint16_t mainYellow, uint16_t mainGreen){
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	4603      	mov	r3, r0
 8001868:	80fb      	strh	r3, [r7, #6]
 800186a:	460b      	mov	r3, r1
 800186c:	80bb      	strh	r3, [r7, #4]
 800186e:	4613      	mov	r3, r2
 8001870:	807b      	strh	r3, [r7, #2]
	V_YELLOW_TIME 	= 2000;
 8001872:	4b0b      	ldr	r3, [pc, #44]	; (80018a0 <Sub_Road+0x40>)
 8001874:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001878:	801a      	strh	r2, [r3, #0]
	V_GREEN_TIME 	= (mainRed) 	-	V_YELLOW_TIME;
 800187a:	4b09      	ldr	r3, [pc, #36]	; (80018a0 <Sub_Road+0x40>)
 800187c:	881b      	ldrh	r3, [r3, #0]
 800187e:	88fa      	ldrh	r2, [r7, #6]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	b29a      	uxth	r2, r3
 8001884:	4b07      	ldr	r3, [pc, #28]	; (80018a4 <Sub_Road+0x44>)
 8001886:	801a      	strh	r2, [r3, #0]
	V_RED_TIME 		= (mainGreen)	+	(mainYellow);
 8001888:	887a      	ldrh	r2, [r7, #2]
 800188a:	88bb      	ldrh	r3, [r7, #4]
 800188c:	4413      	add	r3, r2
 800188e:	b29a      	uxth	r2, r3
 8001890:	4b05      	ldr	r3, [pc, #20]	; (80018a8 <Sub_Road+0x48>)
 8001892:	801a      	strh	r2, [r3, #0]
}
 8001894:	bf00      	nop
 8001896:	370c      	adds	r7, #12
 8001898:	46bd      	mov	sp, r7
 800189a:	bc80      	pop	{r7}
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	200001b0 	.word	0x200001b0
 80018a4:	200001b4 	.word	0x200001b4
 80018a8:	200001b2 	.word	0x200001b2

080018ac <Main_Road>:

void Main_Road(uint16_t subRed, uint16_t subYellow, uint16_t subGreen){
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	4603      	mov	r3, r0
 80018b4:	80fb      	strh	r3, [r7, #6]
 80018b6:	460b      	mov	r3, r1
 80018b8:	80bb      	strh	r3, [r7, #4]
 80018ba:	4613      	mov	r3, r2
 80018bc:	807b      	strh	r3, [r7, #2]
	H_YELLOW_TIME 	= 2000;
 80018be:	4b0b      	ldr	r3, [pc, #44]	; (80018ec <Main_Road+0x40>)
 80018c0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80018c4:	801a      	strh	r2, [r3, #0]
	H_GREEN_TIME 	= (subRed)		-	H_YELLOW_TIME;
 80018c6:	4b09      	ldr	r3, [pc, #36]	; (80018ec <Main_Road+0x40>)
 80018c8:	881b      	ldrh	r3, [r3, #0]
 80018ca:	88fa      	ldrh	r2, [r7, #6]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	b29a      	uxth	r2, r3
 80018d0:	4b07      	ldr	r3, [pc, #28]	; (80018f0 <Main_Road+0x44>)
 80018d2:	801a      	strh	r2, [r3, #0]
	H_RED_TIME		= (subGreen) 	+	(subYellow);
 80018d4:	887a      	ldrh	r2, [r7, #2]
 80018d6:	88bb      	ldrh	r3, [r7, #4]
 80018d8:	4413      	add	r3, r2
 80018da:	b29a      	uxth	r2, r3
 80018dc:	4b05      	ldr	r3, [pc, #20]	; (80018f4 <Main_Road+0x48>)
 80018de:	801a      	strh	r2, [r3, #0]
}
 80018e0:	bf00      	nop
 80018e2:	370c      	adds	r7, #12
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bc80      	pop	{r7}
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	200001b6 	.word	0x200001b6
 80018f0:	200001ba 	.word	0x200001ba
 80018f4:	200001b8 	.word	0x200001b8

080018f8 <Intersection_Init>:

void Intersection_Init(void){
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
	Sub_Road(H_RED_TIME_EX, H_YELLOW_TIME_EX, H_GREEN_TIME_EX);
 80018fc:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8001900:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001904:	f241 3088 	movw	r0, #5000	; 0x1388
 8001908:	f7ff ffaa 	bl	8001860 <Sub_Road>
	Main_Road(V_RED_TIME, V_YELLOW_TIME, V_GREEN_TIME);
 800190c:	4b28      	ldr	r3, [pc, #160]	; (80019b0 <Intersection_Init+0xb8>)
 800190e:	881b      	ldrh	r3, [r3, #0]
 8001910:	4a28      	ldr	r2, [pc, #160]	; (80019b4 <Intersection_Init+0xbc>)
 8001912:	8811      	ldrh	r1, [r2, #0]
 8001914:	4a28      	ldr	r2, [pc, #160]	; (80019b8 <Intersection_Init+0xc0>)
 8001916:	8812      	ldrh	r2, [r2, #0]
 8001918:	4618      	mov	r0, r3
 800191a:	f7ff ffc7 	bl	80018ac <Main_Road>

	hTrafficLight = Traffic_Init(hPort, hPin, STIM_Init(H_YELLOW_TIME, TIM2_TIMER_INTERRUPT));
 800191e:	4b27      	ldr	r3, [pc, #156]	; (80019bc <Intersection_Init+0xc4>)
 8001920:	881b      	ldrh	r3, [r3, #0]
 8001922:	2132      	movs	r1, #50	; 0x32
 8001924:	4618      	mov	r0, r3
 8001926:	f7fe fd63 	bl	80003f0 <STIM_Init>
 800192a:	4603      	mov	r3, r0
 800192c:	461a      	mov	r2, r3
 800192e:	4924      	ldr	r1, [pc, #144]	; (80019c0 <Intersection_Init+0xc8>)
 8001930:	4824      	ldr	r0, [pc, #144]	; (80019c4 <Intersection_Init+0xcc>)
 8001932:	f7ff f925 	bl	8000b80 <Traffic_Init>
 8001936:	4603      	mov	r3, r0
 8001938:	4a23      	ldr	r2, [pc, #140]	; (80019c8 <Intersection_Init+0xd0>)
 800193a:	6013      	str	r3, [r2, #0]
	vTrafficLight = Traffic_Init(vPort, vPin, STIM_Init(V_YELLOW_TIME, TIM2_TIMER_INTERRUPT));
 800193c:	4b1d      	ldr	r3, [pc, #116]	; (80019b4 <Intersection_Init+0xbc>)
 800193e:	881b      	ldrh	r3, [r3, #0]
 8001940:	2132      	movs	r1, #50	; 0x32
 8001942:	4618      	mov	r0, r3
 8001944:	f7fe fd54 	bl	80003f0 <STIM_Init>
 8001948:	4603      	mov	r3, r0
 800194a:	461a      	mov	r2, r3
 800194c:	491f      	ldr	r1, [pc, #124]	; (80019cc <Intersection_Init+0xd4>)
 800194e:	4820      	ldr	r0, [pc, #128]	; (80019d0 <Intersection_Init+0xd8>)
 8001950:	f7ff f916 	bl	8000b80 <Traffic_Init>
 8001954:	4603      	mov	r3, r0
 8001956:	4a1f      	ldr	r2, [pc, #124]	; (80019d4 <Intersection_Init+0xdc>)
 8001958:	6013      	str	r3, [r2, #0]

	hTrafficLight->state = INIT;
 800195a:	4b1b      	ldr	r3, [pc, #108]	; (80019c8 <Intersection_Init+0xd0>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	2200      	movs	r2, #0
 8001960:	741a      	strb	r2, [r3, #16]
	vTrafficLight->state = EXIT;
 8001962:	4b1c      	ldr	r3, [pc, #112]	; (80019d4 <Intersection_Init+0xdc>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	2204      	movs	r2, #4
 8001968:	741a      	strb	r2, [r3, #16]

	vClock = Clock_Init(0, 0, V_GREEN_TIME/1000);
 800196a:	4b13      	ldr	r3, [pc, #76]	; (80019b8 <Intersection_Init+0xc0>)
 800196c:	881b      	ldrh	r3, [r3, #0]
 800196e:	4a1a      	ldr	r2, [pc, #104]	; (80019d8 <Intersection_Init+0xe0>)
 8001970:	fba2 2303 	umull	r2, r3, r2, r3
 8001974:	099b      	lsrs	r3, r3, #6
 8001976:	b29b      	uxth	r3, r3
 8001978:	b2db      	uxtb	r3, r3
 800197a:	461a      	mov	r2, r3
 800197c:	2100      	movs	r1, #0
 800197e:	2000      	movs	r0, #0
 8001980:	f7fe fe18 	bl	80005b4 <Clock_Init>
 8001984:	4603      	mov	r3, r0
 8001986:	4a15      	ldr	r2, [pc, #84]	; (80019dc <Intersection_Init+0xe4>)
 8001988:	6013      	str	r3, [r2, #0]
	hClock = Clock_Init(0, 0, H_RED_TIME/1000);
 800198a:	4b15      	ldr	r3, [pc, #84]	; (80019e0 <Intersection_Init+0xe8>)
 800198c:	881b      	ldrh	r3, [r3, #0]
 800198e:	4a12      	ldr	r2, [pc, #72]	; (80019d8 <Intersection_Init+0xe0>)
 8001990:	fba2 2303 	umull	r2, r3, r2, r3
 8001994:	099b      	lsrs	r3, r3, #6
 8001996:	b29b      	uxth	r3, r3
 8001998:	b2db      	uxtb	r3, r3
 800199a:	461a      	mov	r2, r3
 800199c:	2100      	movs	r1, #0
 800199e:	2000      	movs	r0, #0
 80019a0:	f7fe fe08 	bl	80005b4 <Clock_Init>
 80019a4:	4603      	mov	r3, r0
 80019a6:	4a0f      	ldr	r2, [pc, #60]	; (80019e4 <Intersection_Init+0xec>)
 80019a8:	6013      	str	r3, [r2, #0]
}
 80019aa:	bf00      	nop
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	200001b2 	.word	0x200001b2
 80019b4:	200001b0 	.word	0x200001b0
 80019b8:	200001b4 	.word	0x200001b4
 80019bc:	200001b6 	.word	0x200001b6
 80019c0:	20000070 	.word	0x20000070
 80019c4:	20000084 	.word	0x20000084
 80019c8:	200001a0 	.word	0x200001a0
 80019cc:	20000068 	.word	0x20000068
 80019d0:	20000078 	.word	0x20000078
 80019d4:	200001a4 	.word	0x200001a4
 80019d8:	10624dd3 	.word	0x10624dd3
 80019dc:	200001a8 	.word	0x200001a8
 80019e0:	200001b8 	.word	0x200001b8
 80019e4:	200001ac 	.word	0x200001ac

080019e8 <Vertical_Normal_Mode>:

void Vertical_Normal_Mode(void){
 80019e8:	b5b0      	push	{r4, r5, r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af02      	add	r7, sp, #8
	vTrafficLight->Normal_Run(vTrafficLight, vClock, V_RED_TIME, V_YELLOW_TIME, V_GREEN_TIME);
 80019ee:	4b2c      	ldr	r3, [pc, #176]	; (8001aa0 <Vertical_Normal_Mode+0xb8>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	695c      	ldr	r4, [r3, #20]
 80019f4:	4b2a      	ldr	r3, [pc, #168]	; (8001aa0 <Vertical_Normal_Mode+0xb8>)
 80019f6:	6818      	ldr	r0, [r3, #0]
 80019f8:	4b2a      	ldr	r3, [pc, #168]	; (8001aa4 <Vertical_Normal_Mode+0xbc>)
 80019fa:	6819      	ldr	r1, [r3, #0]
 80019fc:	4b2a      	ldr	r3, [pc, #168]	; (8001aa8 <Vertical_Normal_Mode+0xc0>)
 80019fe:	881a      	ldrh	r2, [r3, #0]
 8001a00:	4b2a      	ldr	r3, [pc, #168]	; (8001aac <Vertical_Normal_Mode+0xc4>)
 8001a02:	881d      	ldrh	r5, [r3, #0]
 8001a04:	4b2a      	ldr	r3, [pc, #168]	; (8001ab0 <Vertical_Normal_Mode+0xc8>)
 8001a06:	881b      	ldrh	r3, [r3, #0]
 8001a08:	9300      	str	r3, [sp, #0]
 8001a0a:	462b      	mov	r3, r5
 8001a0c:	47a0      	blx	r4
	switch (vTrafficLight->state){
 8001a0e:	4b24      	ldr	r3, [pc, #144]	; (8001aa0 <Vertical_Normal_Mode+0xb8>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	7c1b      	ldrb	r3, [r3, #16]
 8001a14:	2b03      	cmp	r3, #3
 8001a16:	d838      	bhi.n	8001a8a <Vertical_Normal_Mode+0xa2>
 8001a18:	a201      	add	r2, pc, #4	; (adr r2, 8001a20 <Vertical_Normal_Mode+0x38>)
 8001a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a1e:	bf00      	nop
 8001a20:	08001a8b 	.word	0x08001a8b
 8001a24:	08001a31 	.word	0x08001a31
 8001a28:	08001a4f 	.word	0x08001a4f
 8001a2c:	08001a6d 	.word	0x08001a6d
		case INIT:
			break;
		case AUTO_RED:
			if (stim3->flag == 1){
 8001a30:	4b20      	ldr	r3, [pc, #128]	; (8001ab4 <Vertical_Normal_Mode+0xcc>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	799b      	ldrb	r3, [r3, #6]
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d129      	bne.n	8001a8e <Vertical_Normal_Mode+0xa6>
				stim3->Set_Default(stim3);
 8001a3a:	4b1e      	ldr	r3, [pc, #120]	; (8001ab4 <Vertical_Normal_Mode+0xcc>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	4a1c      	ldr	r2, [pc, #112]	; (8001ab4 <Vertical_Normal_Mode+0xcc>)
 8001a42:	6812      	ldr	r2, [r2, #0]
 8001a44:	4610      	mov	r0, r2
 8001a46:	4798      	blx	r3
				Intersection_7SEG_Display();
 8001a48:	f7fe fc2c 	bl	80002a4 <Intersection_7SEG_Display>
			}
			break;
 8001a4c:	e01f      	b.n	8001a8e <Vertical_Normal_Mode+0xa6>
		case AUTO_YELLOW:
			if (stim3->flag == 1){
 8001a4e:	4b19      	ldr	r3, [pc, #100]	; (8001ab4 <Vertical_Normal_Mode+0xcc>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	799b      	ldrb	r3, [r3, #6]
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d11c      	bne.n	8001a92 <Vertical_Normal_Mode+0xaa>
				stim3->Set_Default(stim3);
 8001a58:	4b16      	ldr	r3, [pc, #88]	; (8001ab4 <Vertical_Normal_Mode+0xcc>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	4a15      	ldr	r2, [pc, #84]	; (8001ab4 <Vertical_Normal_Mode+0xcc>)
 8001a60:	6812      	ldr	r2, [r2, #0]
 8001a62:	4610      	mov	r0, r2
 8001a64:	4798      	blx	r3
				Intersection_7SEG_Display();
 8001a66:	f7fe fc1d 	bl	80002a4 <Intersection_7SEG_Display>
			}
			break;
 8001a6a:	e012      	b.n	8001a92 <Vertical_Normal_Mode+0xaa>
		case AUTO_GREEN:
			if (stim3->flag == 1){
 8001a6c:	4b11      	ldr	r3, [pc, #68]	; (8001ab4 <Vertical_Normal_Mode+0xcc>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	799b      	ldrb	r3, [r3, #6]
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d10f      	bne.n	8001a96 <Vertical_Normal_Mode+0xae>
				stim3->Set_Default(stim3);
 8001a76:	4b0f      	ldr	r3, [pc, #60]	; (8001ab4 <Vertical_Normal_Mode+0xcc>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	4a0d      	ldr	r2, [pc, #52]	; (8001ab4 <Vertical_Normal_Mode+0xcc>)
 8001a7e:	6812      	ldr	r2, [r2, #0]
 8001a80:	4610      	mov	r0, r2
 8001a82:	4798      	blx	r3
				Intersection_7SEG_Display();
 8001a84:	f7fe fc0e 	bl	80002a4 <Intersection_7SEG_Display>
			}
			break;
 8001a88:	e005      	b.n	8001a96 <Vertical_Normal_Mode+0xae>
		default:
			break;
 8001a8a:	bf00      	nop
 8001a8c:	e004      	b.n	8001a98 <Vertical_Normal_Mode+0xb0>
			break;
 8001a8e:	bf00      	nop
 8001a90:	e002      	b.n	8001a98 <Vertical_Normal_Mode+0xb0>
			break;
 8001a92:	bf00      	nop
 8001a94:	e000      	b.n	8001a98 <Vertical_Normal_Mode+0xb0>
			break;
 8001a96:	bf00      	nop
		}
}
 8001a98:	bf00      	nop
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bdb0      	pop	{r4, r5, r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	200001a4 	.word	0x200001a4
 8001aa4:	200001a8 	.word	0x200001a8
 8001aa8:	200001b2 	.word	0x200001b2
 8001aac:	200001b0 	.word	0x200001b0
 8001ab0:	200001b4 	.word	0x200001b4
 8001ab4:	2000014c 	.word	0x2000014c

08001ab8 <Horizontal_Normal_Mode>:
void Horizontal_Normal_Mode(void){
 8001ab8:	b5b0      	push	{r4, r5, r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af02      	add	r7, sp, #8
	hTrafficLight->Normal_Run(hTrafficLight, hClock, H_RED_TIME, H_YELLOW_TIME, H_GREEN_TIME);
 8001abe:	4b2d      	ldr	r3, [pc, #180]	; (8001b74 <Horizontal_Normal_Mode+0xbc>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	695c      	ldr	r4, [r3, #20]
 8001ac4:	4b2b      	ldr	r3, [pc, #172]	; (8001b74 <Horizontal_Normal_Mode+0xbc>)
 8001ac6:	6818      	ldr	r0, [r3, #0]
 8001ac8:	4b2b      	ldr	r3, [pc, #172]	; (8001b78 <Horizontal_Normal_Mode+0xc0>)
 8001aca:	6819      	ldr	r1, [r3, #0]
 8001acc:	4b2b      	ldr	r3, [pc, #172]	; (8001b7c <Horizontal_Normal_Mode+0xc4>)
 8001ace:	881a      	ldrh	r2, [r3, #0]
 8001ad0:	4b2b      	ldr	r3, [pc, #172]	; (8001b80 <Horizontal_Normal_Mode+0xc8>)
 8001ad2:	881d      	ldrh	r5, [r3, #0]
 8001ad4:	4b2b      	ldr	r3, [pc, #172]	; (8001b84 <Horizontal_Normal_Mode+0xcc>)
 8001ad6:	881b      	ldrh	r3, [r3, #0]
 8001ad8:	9300      	str	r3, [sp, #0]
 8001ada:	462b      	mov	r3, r5
 8001adc:	47a0      	blx	r4
	switch (hTrafficLight->state){
 8001ade:	4b25      	ldr	r3, [pc, #148]	; (8001b74 <Horizontal_Normal_Mode+0xbc>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	7c1b      	ldrb	r3, [r3, #16]
 8001ae4:	2b04      	cmp	r3, #4
 8001ae6:	d83a      	bhi.n	8001b5e <Horizontal_Normal_Mode+0xa6>
 8001ae8:	a201      	add	r2, pc, #4	; (adr r2, 8001af0 <Horizontal_Normal_Mode+0x38>)
 8001aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001aee:	bf00      	nop
 8001af0:	08001b5f 	.word	0x08001b5f
 8001af4:	08001b05 	.word	0x08001b05
 8001af8:	08001b23 	.word	0x08001b23
 8001afc:	08001b41 	.word	0x08001b41
 8001b00:	08001b5f 	.word	0x08001b5f
		case INIT:
			break;
		case AUTO_RED:
			if (stim3->flag == 1){
 8001b04:	4b20      	ldr	r3, [pc, #128]	; (8001b88 <Horizontal_Normal_Mode+0xd0>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	799b      	ldrb	r3, [r3, #6]
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d129      	bne.n	8001b62 <Horizontal_Normal_Mode+0xaa>
				stim3->Set_Default(stim3);
 8001b0e:	4b1e      	ldr	r3, [pc, #120]	; (8001b88 <Horizontal_Normal_Mode+0xd0>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	4a1c      	ldr	r2, [pc, #112]	; (8001b88 <Horizontal_Normal_Mode+0xd0>)
 8001b16:	6812      	ldr	r2, [r2, #0]
 8001b18:	4610      	mov	r0, r2
 8001b1a:	4798      	blx	r3
				Intersection_7SEG_Display();
 8001b1c:	f7fe fbc2 	bl	80002a4 <Intersection_7SEG_Display>
			}
			break;
 8001b20:	e01f      	b.n	8001b62 <Horizontal_Normal_Mode+0xaa>
		case AUTO_YELLOW:
			if (stim3->flag == 1){
 8001b22:	4b19      	ldr	r3, [pc, #100]	; (8001b88 <Horizontal_Normal_Mode+0xd0>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	799b      	ldrb	r3, [r3, #6]
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d11c      	bne.n	8001b66 <Horizontal_Normal_Mode+0xae>
				stim3->Set_Default(stim3);
 8001b2c:	4b16      	ldr	r3, [pc, #88]	; (8001b88 <Horizontal_Normal_Mode+0xd0>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	4a15      	ldr	r2, [pc, #84]	; (8001b88 <Horizontal_Normal_Mode+0xd0>)
 8001b34:	6812      	ldr	r2, [r2, #0]
 8001b36:	4610      	mov	r0, r2
 8001b38:	4798      	blx	r3
				Intersection_7SEG_Display();
 8001b3a:	f7fe fbb3 	bl	80002a4 <Intersection_7SEG_Display>
			}
			break;
 8001b3e:	e012      	b.n	8001b66 <Horizontal_Normal_Mode+0xae>
		case AUTO_GREEN:
			if (stim3->flag == 1){
 8001b40:	4b11      	ldr	r3, [pc, #68]	; (8001b88 <Horizontal_Normal_Mode+0xd0>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	799b      	ldrb	r3, [r3, #6]
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d10f      	bne.n	8001b6a <Horizontal_Normal_Mode+0xb2>
				stim3->Set_Default(stim3);
 8001b4a:	4b0f      	ldr	r3, [pc, #60]	; (8001b88 <Horizontal_Normal_Mode+0xd0>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	4a0d      	ldr	r2, [pc, #52]	; (8001b88 <Horizontal_Normal_Mode+0xd0>)
 8001b52:	6812      	ldr	r2, [r2, #0]
 8001b54:	4610      	mov	r0, r2
 8001b56:	4798      	blx	r3
				Intersection_7SEG_Display();
 8001b58:	f7fe fba4 	bl	80002a4 <Intersection_7SEG_Display>
			}
			break;
 8001b5c:	e005      	b.n	8001b6a <Horizontal_Normal_Mode+0xb2>
		case EXIT:
			break;
		default:
			break;
 8001b5e:	bf00      	nop
 8001b60:	e004      	b.n	8001b6c <Horizontal_Normal_Mode+0xb4>
			break;
 8001b62:	bf00      	nop
 8001b64:	e002      	b.n	8001b6c <Horizontal_Normal_Mode+0xb4>
			break;
 8001b66:	bf00      	nop
 8001b68:	e000      	b.n	8001b6c <Horizontal_Normal_Mode+0xb4>
			break;
 8001b6a:	bf00      	nop
	}
}
 8001b6c:	bf00      	nop
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bdb0      	pop	{r4, r5, r7, pc}
 8001b72:	bf00      	nop
 8001b74:	200001a0 	.word	0x200001a0
 8001b78:	200001ac 	.word	0x200001ac
 8001b7c:	200001b8 	.word	0x200001b8
 8001b80:	200001b6 	.word	0x200001b6
 8001b84:	200001ba 	.word	0x200001ba
 8001b88:	2000014c 	.word	0x2000014c

08001b8c <Intersection_Normal_Mode>:

void Intersection_Normal_Mode(void){
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
	Vertical_Normal_Mode();
 8001b90:	f7ff ff2a 	bl	80019e8 <Vertical_Normal_Mode>
	Horizontal_Normal_Mode();
 8001b94:	f7ff ff90 	bl	8001ab8 <Horizontal_Normal_Mode>
}
 8001b98:	bf00      	nop
 8001b9a:	bd80      	pop	{r7, pc}

08001b9c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b9c:	480c      	ldr	r0, [pc, #48]	; (8001bd0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b9e:	490d      	ldr	r1, [pc, #52]	; (8001bd4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ba0:	4a0d      	ldr	r2, [pc, #52]	; (8001bd8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ba2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ba4:	e002      	b.n	8001bac <LoopCopyDataInit>

08001ba6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ba6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ba8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001baa:	3304      	adds	r3, #4

08001bac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bb0:	d3f9      	bcc.n	8001ba6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bb2:	4a0a      	ldr	r2, [pc, #40]	; (8001bdc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001bb4:	4c0a      	ldr	r4, [pc, #40]	; (8001be0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001bb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bb8:	e001      	b.n	8001bbe <LoopFillZerobss>

08001bba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bbc:	3204      	adds	r2, #4

08001bbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bc0:	d3fb      	bcc.n	8001bba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001bc2:	f7ff fdd7 	bl	8001774 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bc6:	f001 fb15 	bl	80031f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001bca:	f7ff fa1f 	bl	800100c <main>
  bx lr
 8001bce:	4770      	bx	lr
  ldr r0, =_sdata
 8001bd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bd4:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8001bd8:	08003400 	.word	0x08003400
  ldr r2, =_sbss
 8001bdc:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8001be0:	200001d0 	.word	0x200001d0

08001be4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001be4:	e7fe      	b.n	8001be4 <ADC1_2_IRQHandler>
	...

08001be8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bec:	4b08      	ldr	r3, [pc, #32]	; (8001c10 <HAL_Init+0x28>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a07      	ldr	r2, [pc, #28]	; (8001c10 <HAL_Init+0x28>)
 8001bf2:	f043 0310 	orr.w	r3, r3, #16
 8001bf6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bf8:	2003      	movs	r0, #3
 8001bfa:	f000 f923 	bl	8001e44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bfe:	200f      	movs	r0, #15
 8001c00:	f000 f808 	bl	8001c14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c04:	f7ff fd2c 	bl	8001660 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c08:	2300      	movs	r3, #0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	40022000 	.word	0x40022000

08001c14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c1c:	4b12      	ldr	r3, [pc, #72]	; (8001c68 <HAL_InitTick+0x54>)
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	4b12      	ldr	r3, [pc, #72]	; (8001c6c <HAL_InitTick+0x58>)
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	4619      	mov	r1, r3
 8001c26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c32:	4618      	mov	r0, r3
 8001c34:	f000 f93b 	bl	8001eae <HAL_SYSTICK_Config>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e00e      	b.n	8001c60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2b0f      	cmp	r3, #15
 8001c46:	d80a      	bhi.n	8001c5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c48:	2200      	movs	r2, #0
 8001c4a:	6879      	ldr	r1, [r7, #4]
 8001c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c50:	f000 f903 	bl	8001e5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c54:	4a06      	ldr	r2, [pc, #24]	; (8001c70 <HAL_InitTick+0x5c>)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	e000      	b.n	8001c60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3708      	adds	r7, #8
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	20000064 	.word	0x20000064
 8001c6c:	20000094 	.word	0x20000094
 8001c70:	20000090 	.word	0x20000090

08001c74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c78:	4b05      	ldr	r3, [pc, #20]	; (8001c90 <HAL_IncTick+0x1c>)
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	4b05      	ldr	r3, [pc, #20]	; (8001c94 <HAL_IncTick+0x20>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4413      	add	r3, r2
 8001c84:	4a03      	ldr	r2, [pc, #12]	; (8001c94 <HAL_IncTick+0x20>)
 8001c86:	6013      	str	r3, [r2, #0]
}
 8001c88:	bf00      	nop
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bc80      	pop	{r7}
 8001c8e:	4770      	bx	lr
 8001c90:	20000094 	.word	0x20000094
 8001c94:	200001bc 	.word	0x200001bc

08001c98 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c9c:	4b02      	ldr	r3, [pc, #8]	; (8001ca8 <HAL_GetTick+0x10>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bc80      	pop	{r7}
 8001ca6:	4770      	bx	lr
 8001ca8:	200001bc 	.word	0x200001bc

08001cac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b085      	sub	sp, #20
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f003 0307 	and.w	r3, r3, #7
 8001cba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cbc:	4b0c      	ldr	r3, [pc, #48]	; (8001cf0 <__NVIC_SetPriorityGrouping+0x44>)
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cc2:	68ba      	ldr	r2, [r7, #8]
 8001cc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cc8:	4013      	ands	r3, r2
 8001cca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cde:	4a04      	ldr	r2, [pc, #16]	; (8001cf0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	60d3      	str	r3, [r2, #12]
}
 8001ce4:	bf00      	nop
 8001ce6:	3714      	adds	r7, #20
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bc80      	pop	{r7}
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	e000ed00 	.word	0xe000ed00

08001cf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cf8:	4b04      	ldr	r3, [pc, #16]	; (8001d0c <__NVIC_GetPriorityGrouping+0x18>)
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	0a1b      	lsrs	r3, r3, #8
 8001cfe:	f003 0307 	and.w	r3, r3, #7
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bc80      	pop	{r7}
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	e000ed00 	.word	0xe000ed00

08001d10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	4603      	mov	r3, r0
 8001d18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	db0b      	blt.n	8001d3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d22:	79fb      	ldrb	r3, [r7, #7]
 8001d24:	f003 021f 	and.w	r2, r3, #31
 8001d28:	4906      	ldr	r1, [pc, #24]	; (8001d44 <__NVIC_EnableIRQ+0x34>)
 8001d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d2e:	095b      	lsrs	r3, r3, #5
 8001d30:	2001      	movs	r0, #1
 8001d32:	fa00 f202 	lsl.w	r2, r0, r2
 8001d36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d3a:	bf00      	nop
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bc80      	pop	{r7}
 8001d42:	4770      	bx	lr
 8001d44:	e000e100 	.word	0xe000e100

08001d48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	4603      	mov	r3, r0
 8001d50:	6039      	str	r1, [r7, #0]
 8001d52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	db0a      	blt.n	8001d72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	b2da      	uxtb	r2, r3
 8001d60:	490c      	ldr	r1, [pc, #48]	; (8001d94 <__NVIC_SetPriority+0x4c>)
 8001d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d66:	0112      	lsls	r2, r2, #4
 8001d68:	b2d2      	uxtb	r2, r2
 8001d6a:	440b      	add	r3, r1
 8001d6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d70:	e00a      	b.n	8001d88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	b2da      	uxtb	r2, r3
 8001d76:	4908      	ldr	r1, [pc, #32]	; (8001d98 <__NVIC_SetPriority+0x50>)
 8001d78:	79fb      	ldrb	r3, [r7, #7]
 8001d7a:	f003 030f 	and.w	r3, r3, #15
 8001d7e:	3b04      	subs	r3, #4
 8001d80:	0112      	lsls	r2, r2, #4
 8001d82:	b2d2      	uxtb	r2, r2
 8001d84:	440b      	add	r3, r1
 8001d86:	761a      	strb	r2, [r3, #24]
}
 8001d88:	bf00      	nop
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bc80      	pop	{r7}
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	e000e100 	.word	0xe000e100
 8001d98:	e000ed00 	.word	0xe000ed00

08001d9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b089      	sub	sp, #36	; 0x24
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	60f8      	str	r0, [r7, #12]
 8001da4:	60b9      	str	r1, [r7, #8]
 8001da6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	f003 0307 	and.w	r3, r3, #7
 8001dae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	f1c3 0307 	rsb	r3, r3, #7
 8001db6:	2b04      	cmp	r3, #4
 8001db8:	bf28      	it	cs
 8001dba:	2304      	movcs	r3, #4
 8001dbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	3304      	adds	r3, #4
 8001dc2:	2b06      	cmp	r3, #6
 8001dc4:	d902      	bls.n	8001dcc <NVIC_EncodePriority+0x30>
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	3b03      	subs	r3, #3
 8001dca:	e000      	b.n	8001dce <NVIC_EncodePriority+0x32>
 8001dcc:	2300      	movs	r3, #0
 8001dce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8001dd4:	69bb      	ldr	r3, [r7, #24]
 8001dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dda:	43da      	mvns	r2, r3
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	401a      	ands	r2, r3
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001de4:	f04f 31ff 	mov.w	r1, #4294967295
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	fa01 f303 	lsl.w	r3, r1, r3
 8001dee:	43d9      	mvns	r1, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001df4:	4313      	orrs	r3, r2
         );
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3724      	adds	r7, #36	; 0x24
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bc80      	pop	{r7}
 8001dfe:	4770      	bx	lr

08001e00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	3b01      	subs	r3, #1
 8001e0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e10:	d301      	bcc.n	8001e16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e12:	2301      	movs	r3, #1
 8001e14:	e00f      	b.n	8001e36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e16:	4a0a      	ldr	r2, [pc, #40]	; (8001e40 <SysTick_Config+0x40>)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	3b01      	subs	r3, #1
 8001e1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e1e:	210f      	movs	r1, #15
 8001e20:	f04f 30ff 	mov.w	r0, #4294967295
 8001e24:	f7ff ff90 	bl	8001d48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e28:	4b05      	ldr	r3, [pc, #20]	; (8001e40 <SysTick_Config+0x40>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e2e:	4b04      	ldr	r3, [pc, #16]	; (8001e40 <SysTick_Config+0x40>)
 8001e30:	2207      	movs	r2, #7
 8001e32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e34:	2300      	movs	r3, #0
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	e000e010 	.word	0xe000e010

08001e44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f7ff ff2d 	bl	8001cac <__NVIC_SetPriorityGrouping>
}
 8001e52:	bf00      	nop
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	b086      	sub	sp, #24
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	4603      	mov	r3, r0
 8001e62:	60b9      	str	r1, [r7, #8]
 8001e64:	607a      	str	r2, [r7, #4]
 8001e66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e6c:	f7ff ff42 	bl	8001cf4 <__NVIC_GetPriorityGrouping>
 8001e70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	68b9      	ldr	r1, [r7, #8]
 8001e76:	6978      	ldr	r0, [r7, #20]
 8001e78:	f7ff ff90 	bl	8001d9c <NVIC_EncodePriority>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e82:	4611      	mov	r1, r2
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7ff ff5f 	bl	8001d48 <__NVIC_SetPriority>
}
 8001e8a:	bf00      	nop
 8001e8c:	3718      	adds	r7, #24
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}

08001e92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e92:	b580      	push	{r7, lr}
 8001e94:	b082      	sub	sp, #8
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	4603      	mov	r3, r0
 8001e9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7ff ff35 	bl	8001d10 <__NVIC_EnableIRQ>
}
 8001ea6:	bf00      	nop
 8001ea8:	3708      	adds	r7, #8
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}

08001eae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eae:	b580      	push	{r7, lr}
 8001eb0:	b082      	sub	sp, #8
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f7ff ffa2 	bl	8001e00 <SysTick_Config>
 8001ebc:	4603      	mov	r3, r0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
	...

08001ec8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b08b      	sub	sp, #44	; 0x2c
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001eda:	e161      	b.n	80021a0 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001edc:	2201      	movs	r2, #1
 8001ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	69fa      	ldr	r2, [r7, #28]
 8001eec:	4013      	ands	r3, r2
 8001eee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ef0:	69ba      	ldr	r2, [r7, #24]
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	f040 8150 	bne.w	800219a <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	4a97      	ldr	r2, [pc, #604]	; (800215c <HAL_GPIO_Init+0x294>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d05e      	beq.n	8001fc2 <HAL_GPIO_Init+0xfa>
 8001f04:	4a95      	ldr	r2, [pc, #596]	; (800215c <HAL_GPIO_Init+0x294>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d875      	bhi.n	8001ff6 <HAL_GPIO_Init+0x12e>
 8001f0a:	4a95      	ldr	r2, [pc, #596]	; (8002160 <HAL_GPIO_Init+0x298>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d058      	beq.n	8001fc2 <HAL_GPIO_Init+0xfa>
 8001f10:	4a93      	ldr	r2, [pc, #588]	; (8002160 <HAL_GPIO_Init+0x298>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d86f      	bhi.n	8001ff6 <HAL_GPIO_Init+0x12e>
 8001f16:	4a93      	ldr	r2, [pc, #588]	; (8002164 <HAL_GPIO_Init+0x29c>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d052      	beq.n	8001fc2 <HAL_GPIO_Init+0xfa>
 8001f1c:	4a91      	ldr	r2, [pc, #580]	; (8002164 <HAL_GPIO_Init+0x29c>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d869      	bhi.n	8001ff6 <HAL_GPIO_Init+0x12e>
 8001f22:	4a91      	ldr	r2, [pc, #580]	; (8002168 <HAL_GPIO_Init+0x2a0>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d04c      	beq.n	8001fc2 <HAL_GPIO_Init+0xfa>
 8001f28:	4a8f      	ldr	r2, [pc, #572]	; (8002168 <HAL_GPIO_Init+0x2a0>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d863      	bhi.n	8001ff6 <HAL_GPIO_Init+0x12e>
 8001f2e:	4a8f      	ldr	r2, [pc, #572]	; (800216c <HAL_GPIO_Init+0x2a4>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d046      	beq.n	8001fc2 <HAL_GPIO_Init+0xfa>
 8001f34:	4a8d      	ldr	r2, [pc, #564]	; (800216c <HAL_GPIO_Init+0x2a4>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d85d      	bhi.n	8001ff6 <HAL_GPIO_Init+0x12e>
 8001f3a:	2b12      	cmp	r3, #18
 8001f3c:	d82a      	bhi.n	8001f94 <HAL_GPIO_Init+0xcc>
 8001f3e:	2b12      	cmp	r3, #18
 8001f40:	d859      	bhi.n	8001ff6 <HAL_GPIO_Init+0x12e>
 8001f42:	a201      	add	r2, pc, #4	; (adr r2, 8001f48 <HAL_GPIO_Init+0x80>)
 8001f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f48:	08001fc3 	.word	0x08001fc3
 8001f4c:	08001f9d 	.word	0x08001f9d
 8001f50:	08001faf 	.word	0x08001faf
 8001f54:	08001ff1 	.word	0x08001ff1
 8001f58:	08001ff7 	.word	0x08001ff7
 8001f5c:	08001ff7 	.word	0x08001ff7
 8001f60:	08001ff7 	.word	0x08001ff7
 8001f64:	08001ff7 	.word	0x08001ff7
 8001f68:	08001ff7 	.word	0x08001ff7
 8001f6c:	08001ff7 	.word	0x08001ff7
 8001f70:	08001ff7 	.word	0x08001ff7
 8001f74:	08001ff7 	.word	0x08001ff7
 8001f78:	08001ff7 	.word	0x08001ff7
 8001f7c:	08001ff7 	.word	0x08001ff7
 8001f80:	08001ff7 	.word	0x08001ff7
 8001f84:	08001ff7 	.word	0x08001ff7
 8001f88:	08001ff7 	.word	0x08001ff7
 8001f8c:	08001fa5 	.word	0x08001fa5
 8001f90:	08001fb9 	.word	0x08001fb9
 8001f94:	4a76      	ldr	r2, [pc, #472]	; (8002170 <HAL_GPIO_Init+0x2a8>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d013      	beq.n	8001fc2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f9a:	e02c      	b.n	8001ff6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	623b      	str	r3, [r7, #32]
          break;
 8001fa2:	e029      	b.n	8001ff8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	3304      	adds	r3, #4
 8001faa:	623b      	str	r3, [r7, #32]
          break;
 8001fac:	e024      	b.n	8001ff8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	68db      	ldr	r3, [r3, #12]
 8001fb2:	3308      	adds	r3, #8
 8001fb4:	623b      	str	r3, [r7, #32]
          break;
 8001fb6:	e01f      	b.n	8001ff8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	330c      	adds	r3, #12
 8001fbe:	623b      	str	r3, [r7, #32]
          break;
 8001fc0:	e01a      	b.n	8001ff8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d102      	bne.n	8001fd0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001fca:	2304      	movs	r3, #4
 8001fcc:	623b      	str	r3, [r7, #32]
          break;
 8001fce:	e013      	b.n	8001ff8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d105      	bne.n	8001fe4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fd8:	2308      	movs	r3, #8
 8001fda:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	69fa      	ldr	r2, [r7, #28]
 8001fe0:	611a      	str	r2, [r3, #16]
          break;
 8001fe2:	e009      	b.n	8001ff8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fe4:	2308      	movs	r3, #8
 8001fe6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	69fa      	ldr	r2, [r7, #28]
 8001fec:	615a      	str	r2, [r3, #20]
          break;
 8001fee:	e003      	b.n	8001ff8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	623b      	str	r3, [r7, #32]
          break;
 8001ff4:	e000      	b.n	8001ff8 <HAL_GPIO_Init+0x130>
          break;
 8001ff6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ff8:	69bb      	ldr	r3, [r7, #24]
 8001ffa:	2bff      	cmp	r3, #255	; 0xff
 8001ffc:	d801      	bhi.n	8002002 <HAL_GPIO_Init+0x13a>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	e001      	b.n	8002006 <HAL_GPIO_Init+0x13e>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	3304      	adds	r3, #4
 8002006:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002008:	69bb      	ldr	r3, [r7, #24]
 800200a:	2bff      	cmp	r3, #255	; 0xff
 800200c:	d802      	bhi.n	8002014 <HAL_GPIO_Init+0x14c>
 800200e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	e002      	b.n	800201a <HAL_GPIO_Init+0x152>
 8002014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002016:	3b08      	subs	r3, #8
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	210f      	movs	r1, #15
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	fa01 f303 	lsl.w	r3, r1, r3
 8002028:	43db      	mvns	r3, r3
 800202a:	401a      	ands	r2, r3
 800202c:	6a39      	ldr	r1, [r7, #32]
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	fa01 f303 	lsl.w	r3, r1, r3
 8002034:	431a      	orrs	r2, r3
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002042:	2b00      	cmp	r3, #0
 8002044:	f000 80a9 	beq.w	800219a <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002048:	4b4a      	ldr	r3, [pc, #296]	; (8002174 <HAL_GPIO_Init+0x2ac>)
 800204a:	699b      	ldr	r3, [r3, #24]
 800204c:	4a49      	ldr	r2, [pc, #292]	; (8002174 <HAL_GPIO_Init+0x2ac>)
 800204e:	f043 0301 	orr.w	r3, r3, #1
 8002052:	6193      	str	r3, [r2, #24]
 8002054:	4b47      	ldr	r3, [pc, #284]	; (8002174 <HAL_GPIO_Init+0x2ac>)
 8002056:	699b      	ldr	r3, [r3, #24]
 8002058:	f003 0301 	and.w	r3, r3, #1
 800205c:	60bb      	str	r3, [r7, #8]
 800205e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002060:	4a45      	ldr	r2, [pc, #276]	; (8002178 <HAL_GPIO_Init+0x2b0>)
 8002062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002064:	089b      	lsrs	r3, r3, #2
 8002066:	3302      	adds	r3, #2
 8002068:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800206c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800206e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002070:	f003 0303 	and.w	r3, r3, #3
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	220f      	movs	r2, #15
 8002078:	fa02 f303 	lsl.w	r3, r2, r3
 800207c:	43db      	mvns	r3, r3
 800207e:	68fa      	ldr	r2, [r7, #12]
 8002080:	4013      	ands	r3, r2
 8002082:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	4a3d      	ldr	r2, [pc, #244]	; (800217c <HAL_GPIO_Init+0x2b4>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d00d      	beq.n	80020a8 <HAL_GPIO_Init+0x1e0>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	4a3c      	ldr	r2, [pc, #240]	; (8002180 <HAL_GPIO_Init+0x2b8>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d007      	beq.n	80020a4 <HAL_GPIO_Init+0x1dc>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	4a3b      	ldr	r2, [pc, #236]	; (8002184 <HAL_GPIO_Init+0x2bc>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d101      	bne.n	80020a0 <HAL_GPIO_Init+0x1d8>
 800209c:	2302      	movs	r3, #2
 800209e:	e004      	b.n	80020aa <HAL_GPIO_Init+0x1e2>
 80020a0:	2303      	movs	r3, #3
 80020a2:	e002      	b.n	80020aa <HAL_GPIO_Init+0x1e2>
 80020a4:	2301      	movs	r3, #1
 80020a6:	e000      	b.n	80020aa <HAL_GPIO_Init+0x1e2>
 80020a8:	2300      	movs	r3, #0
 80020aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020ac:	f002 0203 	and.w	r2, r2, #3
 80020b0:	0092      	lsls	r2, r2, #2
 80020b2:	4093      	lsls	r3, r2
 80020b4:	68fa      	ldr	r2, [r7, #12]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80020ba:	492f      	ldr	r1, [pc, #188]	; (8002178 <HAL_GPIO_Init+0x2b0>)
 80020bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020be:	089b      	lsrs	r3, r3, #2
 80020c0:	3302      	adds	r3, #2
 80020c2:	68fa      	ldr	r2, [r7, #12]
 80020c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d006      	beq.n	80020e2 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80020d4:	4b2c      	ldr	r3, [pc, #176]	; (8002188 <HAL_GPIO_Init+0x2c0>)
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	492b      	ldr	r1, [pc, #172]	; (8002188 <HAL_GPIO_Init+0x2c0>)
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	4313      	orrs	r3, r2
 80020de:	600b      	str	r3, [r1, #0]
 80020e0:	e006      	b.n	80020f0 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80020e2:	4b29      	ldr	r3, [pc, #164]	; (8002188 <HAL_GPIO_Init+0x2c0>)
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	69bb      	ldr	r3, [r7, #24]
 80020e8:	43db      	mvns	r3, r3
 80020ea:	4927      	ldr	r1, [pc, #156]	; (8002188 <HAL_GPIO_Init+0x2c0>)
 80020ec:	4013      	ands	r3, r2
 80020ee:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d006      	beq.n	800210a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80020fc:	4b22      	ldr	r3, [pc, #136]	; (8002188 <HAL_GPIO_Init+0x2c0>)
 80020fe:	685a      	ldr	r2, [r3, #4]
 8002100:	4921      	ldr	r1, [pc, #132]	; (8002188 <HAL_GPIO_Init+0x2c0>)
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	4313      	orrs	r3, r2
 8002106:	604b      	str	r3, [r1, #4]
 8002108:	e006      	b.n	8002118 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800210a:	4b1f      	ldr	r3, [pc, #124]	; (8002188 <HAL_GPIO_Init+0x2c0>)
 800210c:	685a      	ldr	r2, [r3, #4]
 800210e:	69bb      	ldr	r3, [r7, #24]
 8002110:	43db      	mvns	r3, r3
 8002112:	491d      	ldr	r1, [pc, #116]	; (8002188 <HAL_GPIO_Init+0x2c0>)
 8002114:	4013      	ands	r3, r2
 8002116:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002120:	2b00      	cmp	r3, #0
 8002122:	d006      	beq.n	8002132 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002124:	4b18      	ldr	r3, [pc, #96]	; (8002188 <HAL_GPIO_Init+0x2c0>)
 8002126:	689a      	ldr	r2, [r3, #8]
 8002128:	4917      	ldr	r1, [pc, #92]	; (8002188 <HAL_GPIO_Init+0x2c0>)
 800212a:	69bb      	ldr	r3, [r7, #24]
 800212c:	4313      	orrs	r3, r2
 800212e:	608b      	str	r3, [r1, #8]
 8002130:	e006      	b.n	8002140 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002132:	4b15      	ldr	r3, [pc, #84]	; (8002188 <HAL_GPIO_Init+0x2c0>)
 8002134:	689a      	ldr	r2, [r3, #8]
 8002136:	69bb      	ldr	r3, [r7, #24]
 8002138:	43db      	mvns	r3, r3
 800213a:	4913      	ldr	r1, [pc, #76]	; (8002188 <HAL_GPIO_Init+0x2c0>)
 800213c:	4013      	ands	r3, r2
 800213e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002148:	2b00      	cmp	r3, #0
 800214a:	d01f      	beq.n	800218c <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800214c:	4b0e      	ldr	r3, [pc, #56]	; (8002188 <HAL_GPIO_Init+0x2c0>)
 800214e:	68da      	ldr	r2, [r3, #12]
 8002150:	490d      	ldr	r1, [pc, #52]	; (8002188 <HAL_GPIO_Init+0x2c0>)
 8002152:	69bb      	ldr	r3, [r7, #24]
 8002154:	4313      	orrs	r3, r2
 8002156:	60cb      	str	r3, [r1, #12]
 8002158:	e01f      	b.n	800219a <HAL_GPIO_Init+0x2d2>
 800215a:	bf00      	nop
 800215c:	10320000 	.word	0x10320000
 8002160:	10310000 	.word	0x10310000
 8002164:	10220000 	.word	0x10220000
 8002168:	10210000 	.word	0x10210000
 800216c:	10120000 	.word	0x10120000
 8002170:	10110000 	.word	0x10110000
 8002174:	40021000 	.word	0x40021000
 8002178:	40010000 	.word	0x40010000
 800217c:	40010800 	.word	0x40010800
 8002180:	40010c00 	.word	0x40010c00
 8002184:	40011000 	.word	0x40011000
 8002188:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800218c:	4b0b      	ldr	r3, [pc, #44]	; (80021bc <HAL_GPIO_Init+0x2f4>)
 800218e:	68da      	ldr	r2, [r3, #12]
 8002190:	69bb      	ldr	r3, [r7, #24]
 8002192:	43db      	mvns	r3, r3
 8002194:	4909      	ldr	r1, [pc, #36]	; (80021bc <HAL_GPIO_Init+0x2f4>)
 8002196:	4013      	ands	r3, r2
 8002198:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800219a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219c:	3301      	adds	r3, #1
 800219e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a6:	fa22 f303 	lsr.w	r3, r2, r3
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	f47f ae96 	bne.w	8001edc <HAL_GPIO_Init+0x14>
  }
}
 80021b0:	bf00      	nop
 80021b2:	bf00      	nop
 80021b4:	372c      	adds	r7, #44	; 0x2c
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bc80      	pop	{r7}
 80021ba:	4770      	bx	lr
 80021bc:	40010400 	.word	0x40010400

080021c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b085      	sub	sp, #20
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	460b      	mov	r3, r1
 80021ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	689a      	ldr	r2, [r3, #8]
 80021d0:	887b      	ldrh	r3, [r7, #2]
 80021d2:	4013      	ands	r3, r2
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d002      	beq.n	80021de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80021d8:	2301      	movs	r3, #1
 80021da:	73fb      	strb	r3, [r7, #15]
 80021dc:	e001      	b.n	80021e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021de:	2300      	movs	r3, #0
 80021e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80021e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3714      	adds	r7, #20
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bc80      	pop	{r7}
 80021ec:	4770      	bx	lr

080021ee <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021ee:	b480      	push	{r7}
 80021f0:	b083      	sub	sp, #12
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	6078      	str	r0, [r7, #4]
 80021f6:	460b      	mov	r3, r1
 80021f8:	807b      	strh	r3, [r7, #2]
 80021fa:	4613      	mov	r3, r2
 80021fc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021fe:	787b      	ldrb	r3, [r7, #1]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d003      	beq.n	800220c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002204:	887a      	ldrh	r2, [r7, #2]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800220a:	e003      	b.n	8002214 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800220c:	887b      	ldrh	r3, [r7, #2]
 800220e:	041a      	lsls	r2, r3, #16
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	611a      	str	r2, [r3, #16]
}
 8002214:	bf00      	nop
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	bc80      	pop	{r7}
 800221c:	4770      	bx	lr

0800221e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800221e:	b480      	push	{r7}
 8002220:	b085      	sub	sp, #20
 8002222:	af00      	add	r7, sp, #0
 8002224:	6078      	str	r0, [r7, #4]
 8002226:	460b      	mov	r3, r1
 8002228:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002230:	887a      	ldrh	r2, [r7, #2]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	4013      	ands	r3, r2
 8002236:	041a      	lsls	r2, r3, #16
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	43d9      	mvns	r1, r3
 800223c:	887b      	ldrh	r3, [r7, #2]
 800223e:	400b      	ands	r3, r1
 8002240:	431a      	orrs	r2, r3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	611a      	str	r2, [r3, #16]
}
 8002246:	bf00      	nop
 8002248:	3714      	adds	r7, #20
 800224a:	46bd      	mov	sp, r7
 800224c:	bc80      	pop	{r7}
 800224e:	4770      	bx	lr

08002250 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b086      	sub	sp, #24
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d101      	bne.n	8002262 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e272      	b.n	8002748 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0301 	and.w	r3, r3, #1
 800226a:	2b00      	cmp	r3, #0
 800226c:	f000 8087 	beq.w	800237e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002270:	4b92      	ldr	r3, [pc, #584]	; (80024bc <HAL_RCC_OscConfig+0x26c>)
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f003 030c 	and.w	r3, r3, #12
 8002278:	2b04      	cmp	r3, #4
 800227a:	d00c      	beq.n	8002296 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800227c:	4b8f      	ldr	r3, [pc, #572]	; (80024bc <HAL_RCC_OscConfig+0x26c>)
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f003 030c 	and.w	r3, r3, #12
 8002284:	2b08      	cmp	r3, #8
 8002286:	d112      	bne.n	80022ae <HAL_RCC_OscConfig+0x5e>
 8002288:	4b8c      	ldr	r3, [pc, #560]	; (80024bc <HAL_RCC_OscConfig+0x26c>)
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002290:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002294:	d10b      	bne.n	80022ae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002296:	4b89      	ldr	r3, [pc, #548]	; (80024bc <HAL_RCC_OscConfig+0x26c>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d06c      	beq.n	800237c <HAL_RCC_OscConfig+0x12c>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d168      	bne.n	800237c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e24c      	b.n	8002748 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022b6:	d106      	bne.n	80022c6 <HAL_RCC_OscConfig+0x76>
 80022b8:	4b80      	ldr	r3, [pc, #512]	; (80024bc <HAL_RCC_OscConfig+0x26c>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a7f      	ldr	r2, [pc, #508]	; (80024bc <HAL_RCC_OscConfig+0x26c>)
 80022be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022c2:	6013      	str	r3, [r2, #0]
 80022c4:	e02e      	b.n	8002324 <HAL_RCC_OscConfig+0xd4>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d10c      	bne.n	80022e8 <HAL_RCC_OscConfig+0x98>
 80022ce:	4b7b      	ldr	r3, [pc, #492]	; (80024bc <HAL_RCC_OscConfig+0x26c>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a7a      	ldr	r2, [pc, #488]	; (80024bc <HAL_RCC_OscConfig+0x26c>)
 80022d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022d8:	6013      	str	r3, [r2, #0]
 80022da:	4b78      	ldr	r3, [pc, #480]	; (80024bc <HAL_RCC_OscConfig+0x26c>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a77      	ldr	r2, [pc, #476]	; (80024bc <HAL_RCC_OscConfig+0x26c>)
 80022e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022e4:	6013      	str	r3, [r2, #0]
 80022e6:	e01d      	b.n	8002324 <HAL_RCC_OscConfig+0xd4>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022f0:	d10c      	bne.n	800230c <HAL_RCC_OscConfig+0xbc>
 80022f2:	4b72      	ldr	r3, [pc, #456]	; (80024bc <HAL_RCC_OscConfig+0x26c>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a71      	ldr	r2, [pc, #452]	; (80024bc <HAL_RCC_OscConfig+0x26c>)
 80022f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022fc:	6013      	str	r3, [r2, #0]
 80022fe:	4b6f      	ldr	r3, [pc, #444]	; (80024bc <HAL_RCC_OscConfig+0x26c>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a6e      	ldr	r2, [pc, #440]	; (80024bc <HAL_RCC_OscConfig+0x26c>)
 8002304:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002308:	6013      	str	r3, [r2, #0]
 800230a:	e00b      	b.n	8002324 <HAL_RCC_OscConfig+0xd4>
 800230c:	4b6b      	ldr	r3, [pc, #428]	; (80024bc <HAL_RCC_OscConfig+0x26c>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a6a      	ldr	r2, [pc, #424]	; (80024bc <HAL_RCC_OscConfig+0x26c>)
 8002312:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002316:	6013      	str	r3, [r2, #0]
 8002318:	4b68      	ldr	r3, [pc, #416]	; (80024bc <HAL_RCC_OscConfig+0x26c>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a67      	ldr	r2, [pc, #412]	; (80024bc <HAL_RCC_OscConfig+0x26c>)
 800231e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002322:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d013      	beq.n	8002354 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800232c:	f7ff fcb4 	bl	8001c98 <HAL_GetTick>
 8002330:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002332:	e008      	b.n	8002346 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002334:	f7ff fcb0 	bl	8001c98 <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	2b64      	cmp	r3, #100	; 0x64
 8002340:	d901      	bls.n	8002346 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002342:	2303      	movs	r3, #3
 8002344:	e200      	b.n	8002748 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002346:	4b5d      	ldr	r3, [pc, #372]	; (80024bc <HAL_RCC_OscConfig+0x26c>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d0f0      	beq.n	8002334 <HAL_RCC_OscConfig+0xe4>
 8002352:	e014      	b.n	800237e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002354:	f7ff fca0 	bl	8001c98 <HAL_GetTick>
 8002358:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800235a:	e008      	b.n	800236e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800235c:	f7ff fc9c 	bl	8001c98 <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	2b64      	cmp	r3, #100	; 0x64
 8002368:	d901      	bls.n	800236e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800236a:	2303      	movs	r3, #3
 800236c:	e1ec      	b.n	8002748 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800236e:	4b53      	ldr	r3, [pc, #332]	; (80024bc <HAL_RCC_OscConfig+0x26c>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d1f0      	bne.n	800235c <HAL_RCC_OscConfig+0x10c>
 800237a:	e000      	b.n	800237e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800237c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0302 	and.w	r3, r3, #2
 8002386:	2b00      	cmp	r3, #0
 8002388:	d063      	beq.n	8002452 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800238a:	4b4c      	ldr	r3, [pc, #304]	; (80024bc <HAL_RCC_OscConfig+0x26c>)
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f003 030c 	and.w	r3, r3, #12
 8002392:	2b00      	cmp	r3, #0
 8002394:	d00b      	beq.n	80023ae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002396:	4b49      	ldr	r3, [pc, #292]	; (80024bc <HAL_RCC_OscConfig+0x26c>)
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	f003 030c 	and.w	r3, r3, #12
 800239e:	2b08      	cmp	r3, #8
 80023a0:	d11c      	bne.n	80023dc <HAL_RCC_OscConfig+0x18c>
 80023a2:	4b46      	ldr	r3, [pc, #280]	; (80024bc <HAL_RCC_OscConfig+0x26c>)
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d116      	bne.n	80023dc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023ae:	4b43      	ldr	r3, [pc, #268]	; (80024bc <HAL_RCC_OscConfig+0x26c>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0302 	and.w	r3, r3, #2
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d005      	beq.n	80023c6 <HAL_RCC_OscConfig+0x176>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	691b      	ldr	r3, [r3, #16]
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d001      	beq.n	80023c6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e1c0      	b.n	8002748 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023c6:	4b3d      	ldr	r3, [pc, #244]	; (80024bc <HAL_RCC_OscConfig+0x26c>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	695b      	ldr	r3, [r3, #20]
 80023d2:	00db      	lsls	r3, r3, #3
 80023d4:	4939      	ldr	r1, [pc, #228]	; (80024bc <HAL_RCC_OscConfig+0x26c>)
 80023d6:	4313      	orrs	r3, r2
 80023d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023da:	e03a      	b.n	8002452 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	691b      	ldr	r3, [r3, #16]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d020      	beq.n	8002426 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023e4:	4b36      	ldr	r3, [pc, #216]	; (80024c0 <HAL_RCC_OscConfig+0x270>)
 80023e6:	2201      	movs	r2, #1
 80023e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ea:	f7ff fc55 	bl	8001c98 <HAL_GetTick>
 80023ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023f0:	e008      	b.n	8002404 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023f2:	f7ff fc51 	bl	8001c98 <HAL_GetTick>
 80023f6:	4602      	mov	r2, r0
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	2b02      	cmp	r3, #2
 80023fe:	d901      	bls.n	8002404 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002400:	2303      	movs	r3, #3
 8002402:	e1a1      	b.n	8002748 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002404:	4b2d      	ldr	r3, [pc, #180]	; (80024bc <HAL_RCC_OscConfig+0x26c>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0302 	and.w	r3, r3, #2
 800240c:	2b00      	cmp	r3, #0
 800240e:	d0f0      	beq.n	80023f2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002410:	4b2a      	ldr	r3, [pc, #168]	; (80024bc <HAL_RCC_OscConfig+0x26c>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	695b      	ldr	r3, [r3, #20]
 800241c:	00db      	lsls	r3, r3, #3
 800241e:	4927      	ldr	r1, [pc, #156]	; (80024bc <HAL_RCC_OscConfig+0x26c>)
 8002420:	4313      	orrs	r3, r2
 8002422:	600b      	str	r3, [r1, #0]
 8002424:	e015      	b.n	8002452 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002426:	4b26      	ldr	r3, [pc, #152]	; (80024c0 <HAL_RCC_OscConfig+0x270>)
 8002428:	2200      	movs	r2, #0
 800242a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800242c:	f7ff fc34 	bl	8001c98 <HAL_GetTick>
 8002430:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002432:	e008      	b.n	8002446 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002434:	f7ff fc30 	bl	8001c98 <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	2b02      	cmp	r3, #2
 8002440:	d901      	bls.n	8002446 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	e180      	b.n	8002748 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002446:	4b1d      	ldr	r3, [pc, #116]	; (80024bc <HAL_RCC_OscConfig+0x26c>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0302 	and.w	r3, r3, #2
 800244e:	2b00      	cmp	r3, #0
 8002450:	d1f0      	bne.n	8002434 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0308 	and.w	r3, r3, #8
 800245a:	2b00      	cmp	r3, #0
 800245c:	d03a      	beq.n	80024d4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	699b      	ldr	r3, [r3, #24]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d019      	beq.n	800249a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002466:	4b17      	ldr	r3, [pc, #92]	; (80024c4 <HAL_RCC_OscConfig+0x274>)
 8002468:	2201      	movs	r2, #1
 800246a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800246c:	f7ff fc14 	bl	8001c98 <HAL_GetTick>
 8002470:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002472:	e008      	b.n	8002486 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002474:	f7ff fc10 	bl	8001c98 <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	2b02      	cmp	r3, #2
 8002480:	d901      	bls.n	8002486 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e160      	b.n	8002748 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002486:	4b0d      	ldr	r3, [pc, #52]	; (80024bc <HAL_RCC_OscConfig+0x26c>)
 8002488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248a:	f003 0302 	and.w	r3, r3, #2
 800248e:	2b00      	cmp	r3, #0
 8002490:	d0f0      	beq.n	8002474 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002492:	2001      	movs	r0, #1
 8002494:	f000 faa6 	bl	80029e4 <RCC_Delay>
 8002498:	e01c      	b.n	80024d4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800249a:	4b0a      	ldr	r3, [pc, #40]	; (80024c4 <HAL_RCC_OscConfig+0x274>)
 800249c:	2200      	movs	r2, #0
 800249e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024a0:	f7ff fbfa 	bl	8001c98 <HAL_GetTick>
 80024a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024a6:	e00f      	b.n	80024c8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024a8:	f7ff fbf6 	bl	8001c98 <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d908      	bls.n	80024c8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e146      	b.n	8002748 <HAL_RCC_OscConfig+0x4f8>
 80024ba:	bf00      	nop
 80024bc:	40021000 	.word	0x40021000
 80024c0:	42420000 	.word	0x42420000
 80024c4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024c8:	4b92      	ldr	r3, [pc, #584]	; (8002714 <HAL_RCC_OscConfig+0x4c4>)
 80024ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024cc:	f003 0302 	and.w	r3, r3, #2
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d1e9      	bne.n	80024a8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0304 	and.w	r3, r3, #4
 80024dc:	2b00      	cmp	r3, #0
 80024de:	f000 80a6 	beq.w	800262e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024e2:	2300      	movs	r3, #0
 80024e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024e6:	4b8b      	ldr	r3, [pc, #556]	; (8002714 <HAL_RCC_OscConfig+0x4c4>)
 80024e8:	69db      	ldr	r3, [r3, #28]
 80024ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d10d      	bne.n	800250e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024f2:	4b88      	ldr	r3, [pc, #544]	; (8002714 <HAL_RCC_OscConfig+0x4c4>)
 80024f4:	69db      	ldr	r3, [r3, #28]
 80024f6:	4a87      	ldr	r2, [pc, #540]	; (8002714 <HAL_RCC_OscConfig+0x4c4>)
 80024f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024fc:	61d3      	str	r3, [r2, #28]
 80024fe:	4b85      	ldr	r3, [pc, #532]	; (8002714 <HAL_RCC_OscConfig+0x4c4>)
 8002500:	69db      	ldr	r3, [r3, #28]
 8002502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002506:	60bb      	str	r3, [r7, #8]
 8002508:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800250a:	2301      	movs	r3, #1
 800250c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800250e:	4b82      	ldr	r3, [pc, #520]	; (8002718 <HAL_RCC_OscConfig+0x4c8>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002516:	2b00      	cmp	r3, #0
 8002518:	d118      	bne.n	800254c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800251a:	4b7f      	ldr	r3, [pc, #508]	; (8002718 <HAL_RCC_OscConfig+0x4c8>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a7e      	ldr	r2, [pc, #504]	; (8002718 <HAL_RCC_OscConfig+0x4c8>)
 8002520:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002524:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002526:	f7ff fbb7 	bl	8001c98 <HAL_GetTick>
 800252a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800252c:	e008      	b.n	8002540 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800252e:	f7ff fbb3 	bl	8001c98 <HAL_GetTick>
 8002532:	4602      	mov	r2, r0
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	2b64      	cmp	r3, #100	; 0x64
 800253a:	d901      	bls.n	8002540 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800253c:	2303      	movs	r3, #3
 800253e:	e103      	b.n	8002748 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002540:	4b75      	ldr	r3, [pc, #468]	; (8002718 <HAL_RCC_OscConfig+0x4c8>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002548:	2b00      	cmp	r3, #0
 800254a:	d0f0      	beq.n	800252e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	2b01      	cmp	r3, #1
 8002552:	d106      	bne.n	8002562 <HAL_RCC_OscConfig+0x312>
 8002554:	4b6f      	ldr	r3, [pc, #444]	; (8002714 <HAL_RCC_OscConfig+0x4c4>)
 8002556:	6a1b      	ldr	r3, [r3, #32]
 8002558:	4a6e      	ldr	r2, [pc, #440]	; (8002714 <HAL_RCC_OscConfig+0x4c4>)
 800255a:	f043 0301 	orr.w	r3, r3, #1
 800255e:	6213      	str	r3, [r2, #32]
 8002560:	e02d      	b.n	80025be <HAL_RCC_OscConfig+0x36e>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d10c      	bne.n	8002584 <HAL_RCC_OscConfig+0x334>
 800256a:	4b6a      	ldr	r3, [pc, #424]	; (8002714 <HAL_RCC_OscConfig+0x4c4>)
 800256c:	6a1b      	ldr	r3, [r3, #32]
 800256e:	4a69      	ldr	r2, [pc, #420]	; (8002714 <HAL_RCC_OscConfig+0x4c4>)
 8002570:	f023 0301 	bic.w	r3, r3, #1
 8002574:	6213      	str	r3, [r2, #32]
 8002576:	4b67      	ldr	r3, [pc, #412]	; (8002714 <HAL_RCC_OscConfig+0x4c4>)
 8002578:	6a1b      	ldr	r3, [r3, #32]
 800257a:	4a66      	ldr	r2, [pc, #408]	; (8002714 <HAL_RCC_OscConfig+0x4c4>)
 800257c:	f023 0304 	bic.w	r3, r3, #4
 8002580:	6213      	str	r3, [r2, #32]
 8002582:	e01c      	b.n	80025be <HAL_RCC_OscConfig+0x36e>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	2b05      	cmp	r3, #5
 800258a:	d10c      	bne.n	80025a6 <HAL_RCC_OscConfig+0x356>
 800258c:	4b61      	ldr	r3, [pc, #388]	; (8002714 <HAL_RCC_OscConfig+0x4c4>)
 800258e:	6a1b      	ldr	r3, [r3, #32]
 8002590:	4a60      	ldr	r2, [pc, #384]	; (8002714 <HAL_RCC_OscConfig+0x4c4>)
 8002592:	f043 0304 	orr.w	r3, r3, #4
 8002596:	6213      	str	r3, [r2, #32]
 8002598:	4b5e      	ldr	r3, [pc, #376]	; (8002714 <HAL_RCC_OscConfig+0x4c4>)
 800259a:	6a1b      	ldr	r3, [r3, #32]
 800259c:	4a5d      	ldr	r2, [pc, #372]	; (8002714 <HAL_RCC_OscConfig+0x4c4>)
 800259e:	f043 0301 	orr.w	r3, r3, #1
 80025a2:	6213      	str	r3, [r2, #32]
 80025a4:	e00b      	b.n	80025be <HAL_RCC_OscConfig+0x36e>
 80025a6:	4b5b      	ldr	r3, [pc, #364]	; (8002714 <HAL_RCC_OscConfig+0x4c4>)
 80025a8:	6a1b      	ldr	r3, [r3, #32]
 80025aa:	4a5a      	ldr	r2, [pc, #360]	; (8002714 <HAL_RCC_OscConfig+0x4c4>)
 80025ac:	f023 0301 	bic.w	r3, r3, #1
 80025b0:	6213      	str	r3, [r2, #32]
 80025b2:	4b58      	ldr	r3, [pc, #352]	; (8002714 <HAL_RCC_OscConfig+0x4c4>)
 80025b4:	6a1b      	ldr	r3, [r3, #32]
 80025b6:	4a57      	ldr	r2, [pc, #348]	; (8002714 <HAL_RCC_OscConfig+0x4c4>)
 80025b8:	f023 0304 	bic.w	r3, r3, #4
 80025bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d015      	beq.n	80025f2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025c6:	f7ff fb67 	bl	8001c98 <HAL_GetTick>
 80025ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025cc:	e00a      	b.n	80025e4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025ce:	f7ff fb63 	bl	8001c98 <HAL_GetTick>
 80025d2:	4602      	mov	r2, r0
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80025dc:	4293      	cmp	r3, r2
 80025de:	d901      	bls.n	80025e4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80025e0:	2303      	movs	r3, #3
 80025e2:	e0b1      	b.n	8002748 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025e4:	4b4b      	ldr	r3, [pc, #300]	; (8002714 <HAL_RCC_OscConfig+0x4c4>)
 80025e6:	6a1b      	ldr	r3, [r3, #32]
 80025e8:	f003 0302 	and.w	r3, r3, #2
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d0ee      	beq.n	80025ce <HAL_RCC_OscConfig+0x37e>
 80025f0:	e014      	b.n	800261c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025f2:	f7ff fb51 	bl	8001c98 <HAL_GetTick>
 80025f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025f8:	e00a      	b.n	8002610 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025fa:	f7ff fb4d 	bl	8001c98 <HAL_GetTick>
 80025fe:	4602      	mov	r2, r0
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	f241 3288 	movw	r2, #5000	; 0x1388
 8002608:	4293      	cmp	r3, r2
 800260a:	d901      	bls.n	8002610 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800260c:	2303      	movs	r3, #3
 800260e:	e09b      	b.n	8002748 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002610:	4b40      	ldr	r3, [pc, #256]	; (8002714 <HAL_RCC_OscConfig+0x4c4>)
 8002612:	6a1b      	ldr	r3, [r3, #32]
 8002614:	f003 0302 	and.w	r3, r3, #2
 8002618:	2b00      	cmp	r3, #0
 800261a:	d1ee      	bne.n	80025fa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800261c:	7dfb      	ldrb	r3, [r7, #23]
 800261e:	2b01      	cmp	r3, #1
 8002620:	d105      	bne.n	800262e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002622:	4b3c      	ldr	r3, [pc, #240]	; (8002714 <HAL_RCC_OscConfig+0x4c4>)
 8002624:	69db      	ldr	r3, [r3, #28]
 8002626:	4a3b      	ldr	r2, [pc, #236]	; (8002714 <HAL_RCC_OscConfig+0x4c4>)
 8002628:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800262c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	69db      	ldr	r3, [r3, #28]
 8002632:	2b00      	cmp	r3, #0
 8002634:	f000 8087 	beq.w	8002746 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002638:	4b36      	ldr	r3, [pc, #216]	; (8002714 <HAL_RCC_OscConfig+0x4c4>)
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f003 030c 	and.w	r3, r3, #12
 8002640:	2b08      	cmp	r3, #8
 8002642:	d061      	beq.n	8002708 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	69db      	ldr	r3, [r3, #28]
 8002648:	2b02      	cmp	r3, #2
 800264a:	d146      	bne.n	80026da <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800264c:	4b33      	ldr	r3, [pc, #204]	; (800271c <HAL_RCC_OscConfig+0x4cc>)
 800264e:	2200      	movs	r2, #0
 8002650:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002652:	f7ff fb21 	bl	8001c98 <HAL_GetTick>
 8002656:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002658:	e008      	b.n	800266c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800265a:	f7ff fb1d 	bl	8001c98 <HAL_GetTick>
 800265e:	4602      	mov	r2, r0
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	2b02      	cmp	r3, #2
 8002666:	d901      	bls.n	800266c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002668:	2303      	movs	r3, #3
 800266a:	e06d      	b.n	8002748 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800266c:	4b29      	ldr	r3, [pc, #164]	; (8002714 <HAL_RCC_OscConfig+0x4c4>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d1f0      	bne.n	800265a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6a1b      	ldr	r3, [r3, #32]
 800267c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002680:	d108      	bne.n	8002694 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002682:	4b24      	ldr	r3, [pc, #144]	; (8002714 <HAL_RCC_OscConfig+0x4c4>)
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	4921      	ldr	r1, [pc, #132]	; (8002714 <HAL_RCC_OscConfig+0x4c4>)
 8002690:	4313      	orrs	r3, r2
 8002692:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002694:	4b1f      	ldr	r3, [pc, #124]	; (8002714 <HAL_RCC_OscConfig+0x4c4>)
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6a19      	ldr	r1, [r3, #32]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a4:	430b      	orrs	r3, r1
 80026a6:	491b      	ldr	r1, [pc, #108]	; (8002714 <HAL_RCC_OscConfig+0x4c4>)
 80026a8:	4313      	orrs	r3, r2
 80026aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026ac:	4b1b      	ldr	r3, [pc, #108]	; (800271c <HAL_RCC_OscConfig+0x4cc>)
 80026ae:	2201      	movs	r2, #1
 80026b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b2:	f7ff faf1 	bl	8001c98 <HAL_GetTick>
 80026b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026b8:	e008      	b.n	80026cc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026ba:	f7ff faed 	bl	8001c98 <HAL_GetTick>
 80026be:	4602      	mov	r2, r0
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	d901      	bls.n	80026cc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80026c8:	2303      	movs	r3, #3
 80026ca:	e03d      	b.n	8002748 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026cc:	4b11      	ldr	r3, [pc, #68]	; (8002714 <HAL_RCC_OscConfig+0x4c4>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d0f0      	beq.n	80026ba <HAL_RCC_OscConfig+0x46a>
 80026d8:	e035      	b.n	8002746 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026da:	4b10      	ldr	r3, [pc, #64]	; (800271c <HAL_RCC_OscConfig+0x4cc>)
 80026dc:	2200      	movs	r2, #0
 80026de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e0:	f7ff fada 	bl	8001c98 <HAL_GetTick>
 80026e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026e6:	e008      	b.n	80026fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026e8:	f7ff fad6 	bl	8001c98 <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d901      	bls.n	80026fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e026      	b.n	8002748 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026fa:	4b06      	ldr	r3, [pc, #24]	; (8002714 <HAL_RCC_OscConfig+0x4c4>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d1f0      	bne.n	80026e8 <HAL_RCC_OscConfig+0x498>
 8002706:	e01e      	b.n	8002746 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	69db      	ldr	r3, [r3, #28]
 800270c:	2b01      	cmp	r3, #1
 800270e:	d107      	bne.n	8002720 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e019      	b.n	8002748 <HAL_RCC_OscConfig+0x4f8>
 8002714:	40021000 	.word	0x40021000
 8002718:	40007000 	.word	0x40007000
 800271c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002720:	4b0b      	ldr	r3, [pc, #44]	; (8002750 <HAL_RCC_OscConfig+0x500>)
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6a1b      	ldr	r3, [r3, #32]
 8002730:	429a      	cmp	r2, r3
 8002732:	d106      	bne.n	8002742 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800273e:	429a      	cmp	r2, r3
 8002740:	d001      	beq.n	8002746 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e000      	b.n	8002748 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002746:	2300      	movs	r3, #0
}
 8002748:	4618      	mov	r0, r3
 800274a:	3718      	adds	r7, #24
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}
 8002750:	40021000 	.word	0x40021000

08002754 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d101      	bne.n	8002768 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e0d0      	b.n	800290a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002768:	4b6a      	ldr	r3, [pc, #424]	; (8002914 <HAL_RCC_ClockConfig+0x1c0>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0307 	and.w	r3, r3, #7
 8002770:	683a      	ldr	r2, [r7, #0]
 8002772:	429a      	cmp	r2, r3
 8002774:	d910      	bls.n	8002798 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002776:	4b67      	ldr	r3, [pc, #412]	; (8002914 <HAL_RCC_ClockConfig+0x1c0>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f023 0207 	bic.w	r2, r3, #7
 800277e:	4965      	ldr	r1, [pc, #404]	; (8002914 <HAL_RCC_ClockConfig+0x1c0>)
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	4313      	orrs	r3, r2
 8002784:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002786:	4b63      	ldr	r3, [pc, #396]	; (8002914 <HAL_RCC_ClockConfig+0x1c0>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0307 	and.w	r3, r3, #7
 800278e:	683a      	ldr	r2, [r7, #0]
 8002790:	429a      	cmp	r2, r3
 8002792:	d001      	beq.n	8002798 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e0b8      	b.n	800290a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0302 	and.w	r3, r3, #2
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d020      	beq.n	80027e6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0304 	and.w	r3, r3, #4
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d005      	beq.n	80027bc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027b0:	4b59      	ldr	r3, [pc, #356]	; (8002918 <HAL_RCC_ClockConfig+0x1c4>)
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	4a58      	ldr	r2, [pc, #352]	; (8002918 <HAL_RCC_ClockConfig+0x1c4>)
 80027b6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80027ba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0308 	and.w	r3, r3, #8
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d005      	beq.n	80027d4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027c8:	4b53      	ldr	r3, [pc, #332]	; (8002918 <HAL_RCC_ClockConfig+0x1c4>)
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	4a52      	ldr	r2, [pc, #328]	; (8002918 <HAL_RCC_ClockConfig+0x1c4>)
 80027ce:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80027d2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027d4:	4b50      	ldr	r3, [pc, #320]	; (8002918 <HAL_RCC_ClockConfig+0x1c4>)
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	494d      	ldr	r1, [pc, #308]	; (8002918 <HAL_RCC_ClockConfig+0x1c4>)
 80027e2:	4313      	orrs	r3, r2
 80027e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0301 	and.w	r3, r3, #1
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d040      	beq.n	8002874 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d107      	bne.n	800280a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027fa:	4b47      	ldr	r3, [pc, #284]	; (8002918 <HAL_RCC_ClockConfig+0x1c4>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d115      	bne.n	8002832 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e07f      	b.n	800290a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	2b02      	cmp	r3, #2
 8002810:	d107      	bne.n	8002822 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002812:	4b41      	ldr	r3, [pc, #260]	; (8002918 <HAL_RCC_ClockConfig+0x1c4>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d109      	bne.n	8002832 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e073      	b.n	800290a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002822:	4b3d      	ldr	r3, [pc, #244]	; (8002918 <HAL_RCC_ClockConfig+0x1c4>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 0302 	and.w	r3, r3, #2
 800282a:	2b00      	cmp	r3, #0
 800282c:	d101      	bne.n	8002832 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e06b      	b.n	800290a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002832:	4b39      	ldr	r3, [pc, #228]	; (8002918 <HAL_RCC_ClockConfig+0x1c4>)
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	f023 0203 	bic.w	r2, r3, #3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	4936      	ldr	r1, [pc, #216]	; (8002918 <HAL_RCC_ClockConfig+0x1c4>)
 8002840:	4313      	orrs	r3, r2
 8002842:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002844:	f7ff fa28 	bl	8001c98 <HAL_GetTick>
 8002848:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800284a:	e00a      	b.n	8002862 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800284c:	f7ff fa24 	bl	8001c98 <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	f241 3288 	movw	r2, #5000	; 0x1388
 800285a:	4293      	cmp	r3, r2
 800285c:	d901      	bls.n	8002862 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	e053      	b.n	800290a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002862:	4b2d      	ldr	r3, [pc, #180]	; (8002918 <HAL_RCC_ClockConfig+0x1c4>)
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	f003 020c 	and.w	r2, r3, #12
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	429a      	cmp	r2, r3
 8002872:	d1eb      	bne.n	800284c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002874:	4b27      	ldr	r3, [pc, #156]	; (8002914 <HAL_RCC_ClockConfig+0x1c0>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0307 	and.w	r3, r3, #7
 800287c:	683a      	ldr	r2, [r7, #0]
 800287e:	429a      	cmp	r2, r3
 8002880:	d210      	bcs.n	80028a4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002882:	4b24      	ldr	r3, [pc, #144]	; (8002914 <HAL_RCC_ClockConfig+0x1c0>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f023 0207 	bic.w	r2, r3, #7
 800288a:	4922      	ldr	r1, [pc, #136]	; (8002914 <HAL_RCC_ClockConfig+0x1c0>)
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	4313      	orrs	r3, r2
 8002890:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002892:	4b20      	ldr	r3, [pc, #128]	; (8002914 <HAL_RCC_ClockConfig+0x1c0>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0307 	and.w	r3, r3, #7
 800289a:	683a      	ldr	r2, [r7, #0]
 800289c:	429a      	cmp	r2, r3
 800289e:	d001      	beq.n	80028a4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e032      	b.n	800290a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 0304 	and.w	r3, r3, #4
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d008      	beq.n	80028c2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028b0:	4b19      	ldr	r3, [pc, #100]	; (8002918 <HAL_RCC_ClockConfig+0x1c4>)
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	4916      	ldr	r1, [pc, #88]	; (8002918 <HAL_RCC_ClockConfig+0x1c4>)
 80028be:	4313      	orrs	r3, r2
 80028c0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0308 	and.w	r3, r3, #8
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d009      	beq.n	80028e2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80028ce:	4b12      	ldr	r3, [pc, #72]	; (8002918 <HAL_RCC_ClockConfig+0x1c4>)
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	691b      	ldr	r3, [r3, #16]
 80028da:	00db      	lsls	r3, r3, #3
 80028dc:	490e      	ldr	r1, [pc, #56]	; (8002918 <HAL_RCC_ClockConfig+0x1c4>)
 80028de:	4313      	orrs	r3, r2
 80028e0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80028e2:	f000 f821 	bl	8002928 <HAL_RCC_GetSysClockFreq>
 80028e6:	4602      	mov	r2, r0
 80028e8:	4b0b      	ldr	r3, [pc, #44]	; (8002918 <HAL_RCC_ClockConfig+0x1c4>)
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	091b      	lsrs	r3, r3, #4
 80028ee:	f003 030f 	and.w	r3, r3, #15
 80028f2:	490a      	ldr	r1, [pc, #40]	; (800291c <HAL_RCC_ClockConfig+0x1c8>)
 80028f4:	5ccb      	ldrb	r3, [r1, r3]
 80028f6:	fa22 f303 	lsr.w	r3, r2, r3
 80028fa:	4a09      	ldr	r2, [pc, #36]	; (8002920 <HAL_RCC_ClockConfig+0x1cc>)
 80028fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80028fe:	4b09      	ldr	r3, [pc, #36]	; (8002924 <HAL_RCC_ClockConfig+0x1d0>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4618      	mov	r0, r3
 8002904:	f7ff f986 	bl	8001c14 <HAL_InitTick>

  return HAL_OK;
 8002908:	2300      	movs	r3, #0
}
 800290a:	4618      	mov	r0, r3
 800290c:	3710      	adds	r7, #16
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	40022000 	.word	0x40022000
 8002918:	40021000 	.word	0x40021000
 800291c:	080033e8 	.word	0x080033e8
 8002920:	20000064 	.word	0x20000064
 8002924:	20000090 	.word	0x20000090

08002928 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002928:	b490      	push	{r4, r7}
 800292a:	b08a      	sub	sp, #40	; 0x28
 800292c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800292e:	4b29      	ldr	r3, [pc, #164]	; (80029d4 <HAL_RCC_GetSysClockFreq+0xac>)
 8002930:	1d3c      	adds	r4, r7, #4
 8002932:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002934:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002938:	f240 2301 	movw	r3, #513	; 0x201
 800293c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800293e:	2300      	movs	r3, #0
 8002940:	61fb      	str	r3, [r7, #28]
 8002942:	2300      	movs	r3, #0
 8002944:	61bb      	str	r3, [r7, #24]
 8002946:	2300      	movs	r3, #0
 8002948:	627b      	str	r3, [r7, #36]	; 0x24
 800294a:	2300      	movs	r3, #0
 800294c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800294e:	2300      	movs	r3, #0
 8002950:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002952:	4b21      	ldr	r3, [pc, #132]	; (80029d8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	f003 030c 	and.w	r3, r3, #12
 800295e:	2b04      	cmp	r3, #4
 8002960:	d002      	beq.n	8002968 <HAL_RCC_GetSysClockFreq+0x40>
 8002962:	2b08      	cmp	r3, #8
 8002964:	d003      	beq.n	800296e <HAL_RCC_GetSysClockFreq+0x46>
 8002966:	e02b      	b.n	80029c0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002968:	4b1c      	ldr	r3, [pc, #112]	; (80029dc <HAL_RCC_GetSysClockFreq+0xb4>)
 800296a:	623b      	str	r3, [r7, #32]
      break;
 800296c:	e02b      	b.n	80029c6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	0c9b      	lsrs	r3, r3, #18
 8002972:	f003 030f 	and.w	r3, r3, #15
 8002976:	3328      	adds	r3, #40	; 0x28
 8002978:	443b      	add	r3, r7
 800297a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800297e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d012      	beq.n	80029b0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800298a:	4b13      	ldr	r3, [pc, #76]	; (80029d8 <HAL_RCC_GetSysClockFreq+0xb0>)
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	0c5b      	lsrs	r3, r3, #17
 8002990:	f003 0301 	and.w	r3, r3, #1
 8002994:	3328      	adds	r3, #40	; 0x28
 8002996:	443b      	add	r3, r7
 8002998:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800299c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	4a0e      	ldr	r2, [pc, #56]	; (80029dc <HAL_RCC_GetSysClockFreq+0xb4>)
 80029a2:	fb03 f202 	mul.w	r2, r3, r2
 80029a6:	69bb      	ldr	r3, [r7, #24]
 80029a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ac:	627b      	str	r3, [r7, #36]	; 0x24
 80029ae:	e004      	b.n	80029ba <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	4a0b      	ldr	r2, [pc, #44]	; (80029e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029b4:	fb02 f303 	mul.w	r3, r2, r3
 80029b8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80029ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029bc:	623b      	str	r3, [r7, #32]
      break;
 80029be:	e002      	b.n	80029c6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80029c0:	4b06      	ldr	r3, [pc, #24]	; (80029dc <HAL_RCC_GetSysClockFreq+0xb4>)
 80029c2:	623b      	str	r3, [r7, #32]
      break;
 80029c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029c6:	6a3b      	ldr	r3, [r7, #32]
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3728      	adds	r7, #40	; 0x28
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bc90      	pop	{r4, r7}
 80029d0:	4770      	bx	lr
 80029d2:	bf00      	nop
 80029d4:	080033d8 	.word	0x080033d8
 80029d8:	40021000 	.word	0x40021000
 80029dc:	007a1200 	.word	0x007a1200
 80029e0:	003d0900 	.word	0x003d0900

080029e4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b085      	sub	sp, #20
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80029ec:	4b0a      	ldr	r3, [pc, #40]	; (8002a18 <RCC_Delay+0x34>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a0a      	ldr	r2, [pc, #40]	; (8002a1c <RCC_Delay+0x38>)
 80029f2:	fba2 2303 	umull	r2, r3, r2, r3
 80029f6:	0a5b      	lsrs	r3, r3, #9
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	fb02 f303 	mul.w	r3, r2, r3
 80029fe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002a00:	bf00      	nop
  }
  while (Delay --);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	1e5a      	subs	r2, r3, #1
 8002a06:	60fa      	str	r2, [r7, #12]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d1f9      	bne.n	8002a00 <RCC_Delay+0x1c>
}
 8002a0c:	bf00      	nop
 8002a0e:	bf00      	nop
 8002a10:	3714      	adds	r7, #20
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bc80      	pop	{r7}
 8002a16:	4770      	bx	lr
 8002a18:	20000064 	.word	0x20000064
 8002a1c:	10624dd3 	.word	0x10624dd3

08002a20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b082      	sub	sp, #8
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d101      	bne.n	8002a32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e041      	b.n	8002ab6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d106      	bne.n	8002a4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f7fe fee6 	bl	8001818 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2202      	movs	r2, #2
 8002a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	3304      	adds	r3, #4
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	4610      	mov	r0, r2
 8002a60:	f000 fa6a 	bl	8002f38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2201      	movs	r2, #1
 8002a98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ab4:	2300      	movs	r3, #0
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3708      	adds	r7, #8
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
	...

08002ac0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b085      	sub	sp, #20
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d001      	beq.n	8002ad8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e035      	b.n	8002b44 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2202      	movs	r2, #2
 8002adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	68da      	ldr	r2, [r3, #12]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f042 0201 	orr.w	r2, r2, #1
 8002aee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a16      	ldr	r2, [pc, #88]	; (8002b50 <HAL_TIM_Base_Start_IT+0x90>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d009      	beq.n	8002b0e <HAL_TIM_Base_Start_IT+0x4e>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b02:	d004      	beq.n	8002b0e <HAL_TIM_Base_Start_IT+0x4e>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a12      	ldr	r2, [pc, #72]	; (8002b54 <HAL_TIM_Base_Start_IT+0x94>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d111      	bne.n	8002b32 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	f003 0307 	and.w	r3, r3, #7
 8002b18:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2b06      	cmp	r3, #6
 8002b1e:	d010      	beq.n	8002b42 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f042 0201 	orr.w	r2, r2, #1
 8002b2e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b30:	e007      	b.n	8002b42 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f042 0201 	orr.w	r2, r2, #1
 8002b40:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b42:	2300      	movs	r3, #0
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3714      	adds	r7, #20
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bc80      	pop	{r7}
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop
 8002b50:	40012c00 	.word	0x40012c00
 8002b54:	40000400 	.word	0x40000400

08002b58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	691b      	ldr	r3, [r3, #16]
 8002b66:	f003 0302 	and.w	r3, r3, #2
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d122      	bne.n	8002bb4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	f003 0302 	and.w	r3, r3, #2
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d11b      	bne.n	8002bb4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f06f 0202 	mvn.w	r2, #2
 8002b84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2201      	movs	r2, #1
 8002b8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	699b      	ldr	r3, [r3, #24]
 8002b92:	f003 0303 	and.w	r3, r3, #3
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d003      	beq.n	8002ba2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f000 f9b1 	bl	8002f02 <HAL_TIM_IC_CaptureCallback>
 8002ba0:	e005      	b.n	8002bae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f000 f9a4 	bl	8002ef0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f000 f9b3 	bl	8002f14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	691b      	ldr	r3, [r3, #16]
 8002bba:	f003 0304 	and.w	r3, r3, #4
 8002bbe:	2b04      	cmp	r3, #4
 8002bc0:	d122      	bne.n	8002c08 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	f003 0304 	and.w	r3, r3, #4
 8002bcc:	2b04      	cmp	r3, #4
 8002bce:	d11b      	bne.n	8002c08 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f06f 0204 	mvn.w	r2, #4
 8002bd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2202      	movs	r2, #2
 8002bde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	699b      	ldr	r3, [r3, #24]
 8002be6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d003      	beq.n	8002bf6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f000 f987 	bl	8002f02 <HAL_TIM_IC_CaptureCallback>
 8002bf4:	e005      	b.n	8002c02 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f000 f97a 	bl	8002ef0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f000 f989 	bl	8002f14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	691b      	ldr	r3, [r3, #16]
 8002c0e:	f003 0308 	and.w	r3, r3, #8
 8002c12:	2b08      	cmp	r3, #8
 8002c14:	d122      	bne.n	8002c5c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	f003 0308 	and.w	r3, r3, #8
 8002c20:	2b08      	cmp	r3, #8
 8002c22:	d11b      	bne.n	8002c5c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f06f 0208 	mvn.w	r2, #8
 8002c2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2204      	movs	r2, #4
 8002c32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	69db      	ldr	r3, [r3, #28]
 8002c3a:	f003 0303 	and.w	r3, r3, #3
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d003      	beq.n	8002c4a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f000 f95d 	bl	8002f02 <HAL_TIM_IC_CaptureCallback>
 8002c48:	e005      	b.n	8002c56 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f000 f950 	bl	8002ef0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f000 f95f 	bl	8002f14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	691b      	ldr	r3, [r3, #16]
 8002c62:	f003 0310 	and.w	r3, r3, #16
 8002c66:	2b10      	cmp	r3, #16
 8002c68:	d122      	bne.n	8002cb0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	f003 0310 	and.w	r3, r3, #16
 8002c74:	2b10      	cmp	r3, #16
 8002c76:	d11b      	bne.n	8002cb0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f06f 0210 	mvn.w	r2, #16
 8002c80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2208      	movs	r2, #8
 8002c86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	69db      	ldr	r3, [r3, #28]
 8002c8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d003      	beq.n	8002c9e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f000 f933 	bl	8002f02 <HAL_TIM_IC_CaptureCallback>
 8002c9c:	e005      	b.n	8002caa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f000 f926 	bl	8002ef0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f000 f935 	bl	8002f14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	691b      	ldr	r3, [r3, #16]
 8002cb6:	f003 0301 	and.w	r3, r3, #1
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d10e      	bne.n	8002cdc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	f003 0301 	and.w	r3, r3, #1
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d107      	bne.n	8002cdc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f06f 0201 	mvn.w	r2, #1
 8002cd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f7fe fa0c 	bl	80010f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	691b      	ldr	r3, [r3, #16]
 8002ce2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ce6:	2b80      	cmp	r3, #128	; 0x80
 8002ce8:	d10e      	bne.n	8002d08 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cf4:	2b80      	cmp	r3, #128	; 0x80
 8002cf6:	d107      	bne.n	8002d08 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002d00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f000 fa67 	bl	80031d6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	691b      	ldr	r3, [r3, #16]
 8002d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d12:	2b40      	cmp	r3, #64	; 0x40
 8002d14:	d10e      	bne.n	8002d34 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d20:	2b40      	cmp	r3, #64	; 0x40
 8002d22:	d107      	bne.n	8002d34 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002d2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f000 f8f9 	bl	8002f26 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	691b      	ldr	r3, [r3, #16]
 8002d3a:	f003 0320 	and.w	r3, r3, #32
 8002d3e:	2b20      	cmp	r3, #32
 8002d40:	d10e      	bne.n	8002d60 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	f003 0320 	and.w	r3, r3, #32
 8002d4c:	2b20      	cmp	r3, #32
 8002d4e:	d107      	bne.n	8002d60 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f06f 0220 	mvn.w	r2, #32
 8002d58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f000 fa32 	bl	80031c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d60:	bf00      	nop
 8002d62:	3708      	adds	r7, #8
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b084      	sub	sp, #16
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d101      	bne.n	8002d80 <HAL_TIM_ConfigClockSource+0x18>
 8002d7c:	2302      	movs	r3, #2
 8002d7e:	e0b3      	b.n	8002ee8 <HAL_TIM_ConfigClockSource+0x180>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2202      	movs	r2, #2
 8002d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002d9e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002da6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	68fa      	ldr	r2, [r7, #12]
 8002dae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002db8:	d03e      	beq.n	8002e38 <HAL_TIM_ConfigClockSource+0xd0>
 8002dba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dbe:	f200 8087 	bhi.w	8002ed0 <HAL_TIM_ConfigClockSource+0x168>
 8002dc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dc6:	f000 8085 	beq.w	8002ed4 <HAL_TIM_ConfigClockSource+0x16c>
 8002dca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dce:	d87f      	bhi.n	8002ed0 <HAL_TIM_ConfigClockSource+0x168>
 8002dd0:	2b70      	cmp	r3, #112	; 0x70
 8002dd2:	d01a      	beq.n	8002e0a <HAL_TIM_ConfigClockSource+0xa2>
 8002dd4:	2b70      	cmp	r3, #112	; 0x70
 8002dd6:	d87b      	bhi.n	8002ed0 <HAL_TIM_ConfigClockSource+0x168>
 8002dd8:	2b60      	cmp	r3, #96	; 0x60
 8002dda:	d050      	beq.n	8002e7e <HAL_TIM_ConfigClockSource+0x116>
 8002ddc:	2b60      	cmp	r3, #96	; 0x60
 8002dde:	d877      	bhi.n	8002ed0 <HAL_TIM_ConfigClockSource+0x168>
 8002de0:	2b50      	cmp	r3, #80	; 0x50
 8002de2:	d03c      	beq.n	8002e5e <HAL_TIM_ConfigClockSource+0xf6>
 8002de4:	2b50      	cmp	r3, #80	; 0x50
 8002de6:	d873      	bhi.n	8002ed0 <HAL_TIM_ConfigClockSource+0x168>
 8002de8:	2b40      	cmp	r3, #64	; 0x40
 8002dea:	d058      	beq.n	8002e9e <HAL_TIM_ConfigClockSource+0x136>
 8002dec:	2b40      	cmp	r3, #64	; 0x40
 8002dee:	d86f      	bhi.n	8002ed0 <HAL_TIM_ConfigClockSource+0x168>
 8002df0:	2b30      	cmp	r3, #48	; 0x30
 8002df2:	d064      	beq.n	8002ebe <HAL_TIM_ConfigClockSource+0x156>
 8002df4:	2b30      	cmp	r3, #48	; 0x30
 8002df6:	d86b      	bhi.n	8002ed0 <HAL_TIM_ConfigClockSource+0x168>
 8002df8:	2b20      	cmp	r3, #32
 8002dfa:	d060      	beq.n	8002ebe <HAL_TIM_ConfigClockSource+0x156>
 8002dfc:	2b20      	cmp	r3, #32
 8002dfe:	d867      	bhi.n	8002ed0 <HAL_TIM_ConfigClockSource+0x168>
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d05c      	beq.n	8002ebe <HAL_TIM_ConfigClockSource+0x156>
 8002e04:	2b10      	cmp	r3, #16
 8002e06:	d05a      	beq.n	8002ebe <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002e08:	e062      	b.n	8002ed0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6818      	ldr	r0, [r3, #0]
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	6899      	ldr	r1, [r3, #8]
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	685a      	ldr	r2, [r3, #4]
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	f000 f95c 	bl	80030d6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002e2c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	68fa      	ldr	r2, [r7, #12]
 8002e34:	609a      	str	r2, [r3, #8]
      break;
 8002e36:	e04e      	b.n	8002ed6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6818      	ldr	r0, [r3, #0]
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	6899      	ldr	r1, [r3, #8]
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	685a      	ldr	r2, [r3, #4]
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	f000 f945 	bl	80030d6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	689a      	ldr	r2, [r3, #8]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e5a:	609a      	str	r2, [r3, #8]
      break;
 8002e5c:	e03b      	b.n	8002ed6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6818      	ldr	r0, [r3, #0]
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	6859      	ldr	r1, [r3, #4]
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	68db      	ldr	r3, [r3, #12]
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	f000 f8bc 	bl	8002fe8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2150      	movs	r1, #80	; 0x50
 8002e76:	4618      	mov	r0, r3
 8002e78:	f000 f913 	bl	80030a2 <TIM_ITRx_SetConfig>
      break;
 8002e7c:	e02b      	b.n	8002ed6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6818      	ldr	r0, [r3, #0]
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	6859      	ldr	r1, [r3, #4]
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	68db      	ldr	r3, [r3, #12]
 8002e8a:	461a      	mov	r2, r3
 8002e8c:	f000 f8da 	bl	8003044 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	2160      	movs	r1, #96	; 0x60
 8002e96:	4618      	mov	r0, r3
 8002e98:	f000 f903 	bl	80030a2 <TIM_ITRx_SetConfig>
      break;
 8002e9c:	e01b      	b.n	8002ed6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6818      	ldr	r0, [r3, #0]
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	6859      	ldr	r1, [r3, #4]
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	68db      	ldr	r3, [r3, #12]
 8002eaa:	461a      	mov	r2, r3
 8002eac:	f000 f89c 	bl	8002fe8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	2140      	movs	r1, #64	; 0x40
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f000 f8f3 	bl	80030a2 <TIM_ITRx_SetConfig>
      break;
 8002ebc:	e00b      	b.n	8002ed6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	4610      	mov	r0, r2
 8002eca:	f000 f8ea 	bl	80030a2 <TIM_ITRx_SetConfig>
        break;
 8002ece:	e002      	b.n	8002ed6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002ed0:	bf00      	nop
 8002ed2:	e000      	b.n	8002ed6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002ed4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2201      	movs	r2, #1
 8002eda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ee6:	2300      	movs	r3, #0
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3710      	adds	r7, #16
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}

08002ef0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ef8:	bf00      	nop
 8002efa:	370c      	adds	r7, #12
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bc80      	pop	{r7}
 8002f00:	4770      	bx	lr

08002f02 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f02:	b480      	push	{r7}
 8002f04:	b083      	sub	sp, #12
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f0a:	bf00      	nop
 8002f0c:	370c      	adds	r7, #12
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bc80      	pop	{r7}
 8002f12:	4770      	bx	lr

08002f14 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f1c:	bf00      	nop
 8002f1e:	370c      	adds	r7, #12
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bc80      	pop	{r7}
 8002f24:	4770      	bx	lr

08002f26 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f26:	b480      	push	{r7}
 8002f28:	b083      	sub	sp, #12
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f2e:	bf00      	nop
 8002f30:	370c      	adds	r7, #12
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bc80      	pop	{r7}
 8002f36:	4770      	bx	lr

08002f38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b085      	sub	sp, #20
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	4a25      	ldr	r2, [pc, #148]	; (8002fe0 <TIM_Base_SetConfig+0xa8>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d007      	beq.n	8002f60 <TIM_Base_SetConfig+0x28>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f56:	d003      	beq.n	8002f60 <TIM_Base_SetConfig+0x28>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	4a22      	ldr	r2, [pc, #136]	; (8002fe4 <TIM_Base_SetConfig+0xac>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d108      	bne.n	8002f72 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	68fa      	ldr	r2, [r7, #12]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4a1a      	ldr	r2, [pc, #104]	; (8002fe0 <TIM_Base_SetConfig+0xa8>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d007      	beq.n	8002f8a <TIM_Base_SetConfig+0x52>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f80:	d003      	beq.n	8002f8a <TIM_Base_SetConfig+0x52>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	4a17      	ldr	r2, [pc, #92]	; (8002fe4 <TIM_Base_SetConfig+0xac>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d108      	bne.n	8002f9c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	68db      	ldr	r3, [r3, #12]
 8002f96:	68fa      	ldr	r2, [r7, #12]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	695b      	ldr	r3, [r3, #20]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	68fa      	ldr	r2, [r7, #12]
 8002fae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	689a      	ldr	r2, [r3, #8]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	4a07      	ldr	r2, [pc, #28]	; (8002fe0 <TIM_Base_SetConfig+0xa8>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d103      	bne.n	8002fd0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	691a      	ldr	r2, [r3, #16]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	615a      	str	r2, [r3, #20]
}
 8002fd6:	bf00      	nop
 8002fd8:	3714      	adds	r7, #20
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bc80      	pop	{r7}
 8002fde:	4770      	bx	lr
 8002fe0:	40012c00 	.word	0x40012c00
 8002fe4:	40000400 	.word	0x40000400

08002fe8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b087      	sub	sp, #28
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	60b9      	str	r1, [r7, #8]
 8002ff2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	6a1b      	ldr	r3, [r3, #32]
 8002ff8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	6a1b      	ldr	r3, [r3, #32]
 8002ffe:	f023 0201 	bic.w	r2, r3, #1
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	699b      	ldr	r3, [r3, #24]
 800300a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003012:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	011b      	lsls	r3, r3, #4
 8003018:	693a      	ldr	r2, [r7, #16]
 800301a:	4313      	orrs	r3, r2
 800301c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	f023 030a 	bic.w	r3, r3, #10
 8003024:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003026:	697a      	ldr	r2, [r7, #20]
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	4313      	orrs	r3, r2
 800302c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	693a      	ldr	r2, [r7, #16]
 8003032:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	697a      	ldr	r2, [r7, #20]
 8003038:	621a      	str	r2, [r3, #32]
}
 800303a:	bf00      	nop
 800303c:	371c      	adds	r7, #28
 800303e:	46bd      	mov	sp, r7
 8003040:	bc80      	pop	{r7}
 8003042:	4770      	bx	lr

08003044 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003044:	b480      	push	{r7}
 8003046:	b087      	sub	sp, #28
 8003048:	af00      	add	r7, sp, #0
 800304a:	60f8      	str	r0, [r7, #12]
 800304c:	60b9      	str	r1, [r7, #8]
 800304e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6a1b      	ldr	r3, [r3, #32]
 8003054:	f023 0210 	bic.w	r2, r3, #16
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	699b      	ldr	r3, [r3, #24]
 8003060:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	6a1b      	ldr	r3, [r3, #32]
 8003066:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800306e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	031b      	lsls	r3, r3, #12
 8003074:	697a      	ldr	r2, [r7, #20]
 8003076:	4313      	orrs	r3, r2
 8003078:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003080:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	011b      	lsls	r3, r3, #4
 8003086:	693a      	ldr	r2, [r7, #16]
 8003088:	4313      	orrs	r3, r2
 800308a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	697a      	ldr	r2, [r7, #20]
 8003090:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	693a      	ldr	r2, [r7, #16]
 8003096:	621a      	str	r2, [r3, #32]
}
 8003098:	bf00      	nop
 800309a:	371c      	adds	r7, #28
 800309c:	46bd      	mov	sp, r7
 800309e:	bc80      	pop	{r7}
 80030a0:	4770      	bx	lr

080030a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80030a2:	b480      	push	{r7}
 80030a4:	b085      	sub	sp, #20
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	6078      	str	r0, [r7, #4]
 80030aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80030ba:	683a      	ldr	r2, [r7, #0]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	4313      	orrs	r3, r2
 80030c0:	f043 0307 	orr.w	r3, r3, #7
 80030c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	68fa      	ldr	r2, [r7, #12]
 80030ca:	609a      	str	r2, [r3, #8]
}
 80030cc:	bf00      	nop
 80030ce:	3714      	adds	r7, #20
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bc80      	pop	{r7}
 80030d4:	4770      	bx	lr

080030d6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80030d6:	b480      	push	{r7}
 80030d8:	b087      	sub	sp, #28
 80030da:	af00      	add	r7, sp, #0
 80030dc:	60f8      	str	r0, [r7, #12]
 80030de:	60b9      	str	r1, [r7, #8]
 80030e0:	607a      	str	r2, [r7, #4]
 80030e2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030f0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	021a      	lsls	r2, r3, #8
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	431a      	orrs	r2, r3
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	697a      	ldr	r2, [r7, #20]
 8003100:	4313      	orrs	r3, r2
 8003102:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	697a      	ldr	r2, [r7, #20]
 8003108:	609a      	str	r2, [r3, #8]
}
 800310a:	bf00      	nop
 800310c:	371c      	adds	r7, #28
 800310e:	46bd      	mov	sp, r7
 8003110:	bc80      	pop	{r7}
 8003112:	4770      	bx	lr

08003114 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003114:	b480      	push	{r7}
 8003116:	b085      	sub	sp, #20
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003124:	2b01      	cmp	r3, #1
 8003126:	d101      	bne.n	800312c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003128:	2302      	movs	r3, #2
 800312a:	e041      	b.n	80031b0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2201      	movs	r2, #1
 8003130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2202      	movs	r2, #2
 8003138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003152:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	68fa      	ldr	r2, [r7, #12]
 800315a:	4313      	orrs	r3, r2
 800315c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	68fa      	ldr	r2, [r7, #12]
 8003164:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a14      	ldr	r2, [pc, #80]	; (80031bc <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d009      	beq.n	8003184 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003178:	d004      	beq.n	8003184 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a10      	ldr	r2, [pc, #64]	; (80031c0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d10c      	bne.n	800319e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800318a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	68ba      	ldr	r2, [r7, #8]
 8003192:	4313      	orrs	r3, r2
 8003194:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	68ba      	ldr	r2, [r7, #8]
 800319c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2201      	movs	r2, #1
 80031a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80031ae:	2300      	movs	r3, #0
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3714      	adds	r7, #20
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bc80      	pop	{r7}
 80031b8:	4770      	bx	lr
 80031ba:	bf00      	nop
 80031bc:	40012c00 	.word	0x40012c00
 80031c0:	40000400 	.word	0x40000400

080031c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80031cc:	bf00      	nop
 80031ce:	370c      	adds	r7, #12
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bc80      	pop	{r7}
 80031d4:	4770      	bx	lr

080031d6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80031d6:	b480      	push	{r7}
 80031d8:	b083      	sub	sp, #12
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80031de:	bf00      	nop
 80031e0:	370c      	adds	r7, #12
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bc80      	pop	{r7}
 80031e6:	4770      	bx	lr

080031e8 <__errno>:
 80031e8:	4b01      	ldr	r3, [pc, #4]	; (80031f0 <__errno+0x8>)
 80031ea:	6818      	ldr	r0, [r3, #0]
 80031ec:	4770      	bx	lr
 80031ee:	bf00      	nop
 80031f0:	20000098 	.word	0x20000098

080031f4 <__libc_init_array>:
 80031f4:	b570      	push	{r4, r5, r6, lr}
 80031f6:	2600      	movs	r6, #0
 80031f8:	4d0c      	ldr	r5, [pc, #48]	; (800322c <__libc_init_array+0x38>)
 80031fa:	4c0d      	ldr	r4, [pc, #52]	; (8003230 <__libc_init_array+0x3c>)
 80031fc:	1b64      	subs	r4, r4, r5
 80031fe:	10a4      	asrs	r4, r4, #2
 8003200:	42a6      	cmp	r6, r4
 8003202:	d109      	bne.n	8003218 <__libc_init_array+0x24>
 8003204:	f000 f8dc 	bl	80033c0 <_init>
 8003208:	2600      	movs	r6, #0
 800320a:	4d0a      	ldr	r5, [pc, #40]	; (8003234 <__libc_init_array+0x40>)
 800320c:	4c0a      	ldr	r4, [pc, #40]	; (8003238 <__libc_init_array+0x44>)
 800320e:	1b64      	subs	r4, r4, r5
 8003210:	10a4      	asrs	r4, r4, #2
 8003212:	42a6      	cmp	r6, r4
 8003214:	d105      	bne.n	8003222 <__libc_init_array+0x2e>
 8003216:	bd70      	pop	{r4, r5, r6, pc}
 8003218:	f855 3b04 	ldr.w	r3, [r5], #4
 800321c:	4798      	blx	r3
 800321e:	3601      	adds	r6, #1
 8003220:	e7ee      	b.n	8003200 <__libc_init_array+0xc>
 8003222:	f855 3b04 	ldr.w	r3, [r5], #4
 8003226:	4798      	blx	r3
 8003228:	3601      	adds	r6, #1
 800322a:	e7f2      	b.n	8003212 <__libc_init_array+0x1e>
 800322c:	080033f8 	.word	0x080033f8
 8003230:	080033f8 	.word	0x080033f8
 8003234:	080033f8 	.word	0x080033f8
 8003238:	080033fc 	.word	0x080033fc

0800323c <malloc>:
 800323c:	4b02      	ldr	r3, [pc, #8]	; (8003248 <malloc+0xc>)
 800323e:	4601      	mov	r1, r0
 8003240:	6818      	ldr	r0, [r3, #0]
 8003242:	f000 b82b 	b.w	800329c <_malloc_r>
 8003246:	bf00      	nop
 8003248:	20000098 	.word	0x20000098

0800324c <memset>:
 800324c:	4603      	mov	r3, r0
 800324e:	4402      	add	r2, r0
 8003250:	4293      	cmp	r3, r2
 8003252:	d100      	bne.n	8003256 <memset+0xa>
 8003254:	4770      	bx	lr
 8003256:	f803 1b01 	strb.w	r1, [r3], #1
 800325a:	e7f9      	b.n	8003250 <memset+0x4>

0800325c <sbrk_aligned>:
 800325c:	b570      	push	{r4, r5, r6, lr}
 800325e:	4e0e      	ldr	r6, [pc, #56]	; (8003298 <sbrk_aligned+0x3c>)
 8003260:	460c      	mov	r4, r1
 8003262:	6831      	ldr	r1, [r6, #0]
 8003264:	4605      	mov	r5, r0
 8003266:	b911      	cbnz	r1, 800326e <sbrk_aligned+0x12>
 8003268:	f000 f88c 	bl	8003384 <_sbrk_r>
 800326c:	6030      	str	r0, [r6, #0]
 800326e:	4621      	mov	r1, r4
 8003270:	4628      	mov	r0, r5
 8003272:	f000 f887 	bl	8003384 <_sbrk_r>
 8003276:	1c43      	adds	r3, r0, #1
 8003278:	d00a      	beq.n	8003290 <sbrk_aligned+0x34>
 800327a:	1cc4      	adds	r4, r0, #3
 800327c:	f024 0403 	bic.w	r4, r4, #3
 8003280:	42a0      	cmp	r0, r4
 8003282:	d007      	beq.n	8003294 <sbrk_aligned+0x38>
 8003284:	1a21      	subs	r1, r4, r0
 8003286:	4628      	mov	r0, r5
 8003288:	f000 f87c 	bl	8003384 <_sbrk_r>
 800328c:	3001      	adds	r0, #1
 800328e:	d101      	bne.n	8003294 <sbrk_aligned+0x38>
 8003290:	f04f 34ff 	mov.w	r4, #4294967295
 8003294:	4620      	mov	r0, r4
 8003296:	bd70      	pop	{r4, r5, r6, pc}
 8003298:	200001c4 	.word	0x200001c4

0800329c <_malloc_r>:
 800329c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80032a0:	1ccd      	adds	r5, r1, #3
 80032a2:	f025 0503 	bic.w	r5, r5, #3
 80032a6:	3508      	adds	r5, #8
 80032a8:	2d0c      	cmp	r5, #12
 80032aa:	bf38      	it	cc
 80032ac:	250c      	movcc	r5, #12
 80032ae:	2d00      	cmp	r5, #0
 80032b0:	4607      	mov	r7, r0
 80032b2:	db01      	blt.n	80032b8 <_malloc_r+0x1c>
 80032b4:	42a9      	cmp	r1, r5
 80032b6:	d905      	bls.n	80032c4 <_malloc_r+0x28>
 80032b8:	230c      	movs	r3, #12
 80032ba:	2600      	movs	r6, #0
 80032bc:	603b      	str	r3, [r7, #0]
 80032be:	4630      	mov	r0, r6
 80032c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80032c4:	4e2e      	ldr	r6, [pc, #184]	; (8003380 <_malloc_r+0xe4>)
 80032c6:	f000 f86d 	bl	80033a4 <__malloc_lock>
 80032ca:	6833      	ldr	r3, [r6, #0]
 80032cc:	461c      	mov	r4, r3
 80032ce:	bb34      	cbnz	r4, 800331e <_malloc_r+0x82>
 80032d0:	4629      	mov	r1, r5
 80032d2:	4638      	mov	r0, r7
 80032d4:	f7ff ffc2 	bl	800325c <sbrk_aligned>
 80032d8:	1c43      	adds	r3, r0, #1
 80032da:	4604      	mov	r4, r0
 80032dc:	d14d      	bne.n	800337a <_malloc_r+0xde>
 80032de:	6834      	ldr	r4, [r6, #0]
 80032e0:	4626      	mov	r6, r4
 80032e2:	2e00      	cmp	r6, #0
 80032e4:	d140      	bne.n	8003368 <_malloc_r+0xcc>
 80032e6:	6823      	ldr	r3, [r4, #0]
 80032e8:	4631      	mov	r1, r6
 80032ea:	4638      	mov	r0, r7
 80032ec:	eb04 0803 	add.w	r8, r4, r3
 80032f0:	f000 f848 	bl	8003384 <_sbrk_r>
 80032f4:	4580      	cmp	r8, r0
 80032f6:	d13a      	bne.n	800336e <_malloc_r+0xd2>
 80032f8:	6821      	ldr	r1, [r4, #0]
 80032fa:	3503      	adds	r5, #3
 80032fc:	1a6d      	subs	r5, r5, r1
 80032fe:	f025 0503 	bic.w	r5, r5, #3
 8003302:	3508      	adds	r5, #8
 8003304:	2d0c      	cmp	r5, #12
 8003306:	bf38      	it	cc
 8003308:	250c      	movcc	r5, #12
 800330a:	4638      	mov	r0, r7
 800330c:	4629      	mov	r1, r5
 800330e:	f7ff ffa5 	bl	800325c <sbrk_aligned>
 8003312:	3001      	adds	r0, #1
 8003314:	d02b      	beq.n	800336e <_malloc_r+0xd2>
 8003316:	6823      	ldr	r3, [r4, #0]
 8003318:	442b      	add	r3, r5
 800331a:	6023      	str	r3, [r4, #0]
 800331c:	e00e      	b.n	800333c <_malloc_r+0xa0>
 800331e:	6822      	ldr	r2, [r4, #0]
 8003320:	1b52      	subs	r2, r2, r5
 8003322:	d41e      	bmi.n	8003362 <_malloc_r+0xc6>
 8003324:	2a0b      	cmp	r2, #11
 8003326:	d916      	bls.n	8003356 <_malloc_r+0xba>
 8003328:	1961      	adds	r1, r4, r5
 800332a:	42a3      	cmp	r3, r4
 800332c:	6025      	str	r5, [r4, #0]
 800332e:	bf18      	it	ne
 8003330:	6059      	strne	r1, [r3, #4]
 8003332:	6863      	ldr	r3, [r4, #4]
 8003334:	bf08      	it	eq
 8003336:	6031      	streq	r1, [r6, #0]
 8003338:	5162      	str	r2, [r4, r5]
 800333a:	604b      	str	r3, [r1, #4]
 800333c:	4638      	mov	r0, r7
 800333e:	f104 060b 	add.w	r6, r4, #11
 8003342:	f000 f835 	bl	80033b0 <__malloc_unlock>
 8003346:	f026 0607 	bic.w	r6, r6, #7
 800334a:	1d23      	adds	r3, r4, #4
 800334c:	1af2      	subs	r2, r6, r3
 800334e:	d0b6      	beq.n	80032be <_malloc_r+0x22>
 8003350:	1b9b      	subs	r3, r3, r6
 8003352:	50a3      	str	r3, [r4, r2]
 8003354:	e7b3      	b.n	80032be <_malloc_r+0x22>
 8003356:	6862      	ldr	r2, [r4, #4]
 8003358:	42a3      	cmp	r3, r4
 800335a:	bf0c      	ite	eq
 800335c:	6032      	streq	r2, [r6, #0]
 800335e:	605a      	strne	r2, [r3, #4]
 8003360:	e7ec      	b.n	800333c <_malloc_r+0xa0>
 8003362:	4623      	mov	r3, r4
 8003364:	6864      	ldr	r4, [r4, #4]
 8003366:	e7b2      	b.n	80032ce <_malloc_r+0x32>
 8003368:	4634      	mov	r4, r6
 800336a:	6876      	ldr	r6, [r6, #4]
 800336c:	e7b9      	b.n	80032e2 <_malloc_r+0x46>
 800336e:	230c      	movs	r3, #12
 8003370:	4638      	mov	r0, r7
 8003372:	603b      	str	r3, [r7, #0]
 8003374:	f000 f81c 	bl	80033b0 <__malloc_unlock>
 8003378:	e7a1      	b.n	80032be <_malloc_r+0x22>
 800337a:	6025      	str	r5, [r4, #0]
 800337c:	e7de      	b.n	800333c <_malloc_r+0xa0>
 800337e:	bf00      	nop
 8003380:	200001c0 	.word	0x200001c0

08003384 <_sbrk_r>:
 8003384:	b538      	push	{r3, r4, r5, lr}
 8003386:	2300      	movs	r3, #0
 8003388:	4d05      	ldr	r5, [pc, #20]	; (80033a0 <_sbrk_r+0x1c>)
 800338a:	4604      	mov	r4, r0
 800338c:	4608      	mov	r0, r1
 800338e:	602b      	str	r3, [r5, #0]
 8003390:	f7fe f9ba 	bl	8001708 <_sbrk>
 8003394:	1c43      	adds	r3, r0, #1
 8003396:	d102      	bne.n	800339e <_sbrk_r+0x1a>
 8003398:	682b      	ldr	r3, [r5, #0]
 800339a:	b103      	cbz	r3, 800339e <_sbrk_r+0x1a>
 800339c:	6023      	str	r3, [r4, #0]
 800339e:	bd38      	pop	{r3, r4, r5, pc}
 80033a0:	200001c8 	.word	0x200001c8

080033a4 <__malloc_lock>:
 80033a4:	4801      	ldr	r0, [pc, #4]	; (80033ac <__malloc_lock+0x8>)
 80033a6:	f000 b809 	b.w	80033bc <__retarget_lock_acquire_recursive>
 80033aa:	bf00      	nop
 80033ac:	200001cc 	.word	0x200001cc

080033b0 <__malloc_unlock>:
 80033b0:	4801      	ldr	r0, [pc, #4]	; (80033b8 <__malloc_unlock+0x8>)
 80033b2:	f000 b804 	b.w	80033be <__retarget_lock_release_recursive>
 80033b6:	bf00      	nop
 80033b8:	200001cc 	.word	0x200001cc

080033bc <__retarget_lock_acquire_recursive>:
 80033bc:	4770      	bx	lr

080033be <__retarget_lock_release_recursive>:
 80033be:	4770      	bx	lr

080033c0 <_init>:
 80033c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033c2:	bf00      	nop
 80033c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033c6:	bc08      	pop	{r3}
 80033c8:	469e      	mov	lr, r3
 80033ca:	4770      	bx	lr

080033cc <_fini>:
 80033cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033ce:	bf00      	nop
 80033d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033d2:	bc08      	pop	{r3}
 80033d4:	469e      	mov	lr, r3
 80033d6:	4770      	bx	lr
